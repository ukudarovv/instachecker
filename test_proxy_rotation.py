"""
üß™ –¢–µ—Å—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –†–ê–ó–ù–´–ô –ø—Ä–æ–∫—Å–∏.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from project.database import get_session_factory
from project.services.proxy_manager import ProxyManager


def test_proxy_rotation(user_id: int, iterations: int = 10):
    """
    –¢–µ—Å—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        iterations: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
    """
    print(f"\n{'='*70}")
    print(f"üß™ –¢–ï–°–¢ –†–û–¢–ê–¶–ò–ò –ü–†–û–ö–°–ò (user_id={user_id})")
    print(f"{'='*70}\n")
    
    SessionLocal = get_session_factory()
    
    selected_proxies = []
    
    with SessionLocal() as session:
        manager = ProxyManager(session)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û
        stats = manager.get_proxy_stats(user_id)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats['total']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}")
        print(f"   Success rate: {stats['success_rate']}%")
        print(f"\n{'='*70}\n")
        
        # –°–∏–º—É–ª—è—Ü–∏—è N –ø—Ä–æ–≤–µ—Ä–æ–∫
        print(f"üîÑ –°–∏–º—É–ª–∏—Ä—É—é {iterations} –ø—Ä–æ–≤–µ—Ä–æ–∫...\n")
        
        for i in range(iterations):
            proxy = manager.get_best_proxy(user_id, strategy='adaptive')
            
            if not proxy:
                print(f"[{i+1:2d}] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
                break
            
            selected_proxies.append(proxy.host)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            success_rate = (proxy.success_count / proxy.used_count * 100) if proxy.used_count > 0 else 0
            print(f"[{i+1:2d}] üîó –í—ã–±—Ä–∞–Ω: {proxy.host:<25} | "
                  f"–£—Å–ø–µ—Ö: {proxy.success_count}/{proxy.used_count} ({success_rate:5.1f}%) | "
                  f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {proxy.priority}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (80% —É—Å–ø–µ—Ö–∞)
            import random
            if random.random() < 0.8:
                manager.mark_success(proxy.id)
            else:
                manager.mark_failure(proxy.id, apply_cooldown=False)
        
        print(f"\n{'='*70}\n")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏
        unique_proxies = len(set(selected_proxies))
        total_proxies = len(selected_proxies)
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–û–¢–ê–¶–ò–ò:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_proxies}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {unique_proxies}")
        print(f"   –†–æ—Ç–∞—Ü–∏—è: {unique_proxies/total_proxies*100:.1f}%")
        
        if unique_proxies == total_proxies:
            print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏!")
        elif unique_proxies > total_proxies * 0.7:
            print(f"   ‚úÖ –•–û–†–û–®–û! –í—ã—Å–æ–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏")
        elif unique_proxies > total_proxies * 0.5:
            print(f"   ‚ö†Ô∏è –ù–û–†–ú–ê. –°—Ä–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏")
        else:
            print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        print(f"\n   üìà –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        from collections import Counter
        counter = Counter(selected_proxies)
        for proxy_host, count in counter.most_common(5):
            print(f"      {proxy_host}: {count}x")
        
        print(f"\n{'='*70}\n")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï
        stats_after = manager.get_proxy_stats(user_id)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   Success rate: {stats_after['success_rate']}%")
        print(f"   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats_after['total_uses']}")
        
        # –¢–æ–ø-5 –ª—É—á—à–∏—Ö –ø—Ä–æ–∫—Å–∏
        print(f"\nüîù –¢–æ–ø-5 –ª—É—á—à–∏—Ö –ø—Ä–æ–∫—Å–∏:")
        best = manager.get_best_proxies(user_id, top_n=5)
        for i, proxy in enumerate(best, 1):
            print(f"   {i}. {proxy['host']:<25} | "
                  f"{proxy['success_rate']:5.1f}% | "
                  f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {proxy['used_count']}x")
        
        print(f"\n{'='*70}\n")
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"{'='*70}\n")


def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Test proxy rotation')
    parser.add_argument('--user-id', type=int, required=True, help='User ID')
    parser.add_argument('--iterations', type=int, default=10, help='Number of iterations (default: 10)')
    
    args = parser.parse_args()
    
    test_proxy_rotation(args.user_id, args.iterations)


if __name__ == '__main__':
    main()



