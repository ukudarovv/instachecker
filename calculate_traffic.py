"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏.
–†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

# –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (–ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
# max_attempts = 1 (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—Ö)
AVG_TRAFFIC_ACTIVE = 5000  # bytes (~5 KB) - API check + screenshot
AVG_TRAFFIC_INACTIVE = 1900  # bytes (~1.9 KB) - API check only (1 attempt)

def format_bytes(bytes_count):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞."""
    if bytes_count < 1024:
        return f"{bytes_count} B"
    elif bytes_count < 1024 * 1024:
        return f"{bytes_count / 1024:.2f} KB"
    elif bytes_count < 1024 * 1024 * 1024:
        return f"{bytes_count / (1024 * 1024):.2f} MB"
    else:
        return f"{bytes_count / (1024 * 1024 * 1024):.2f} GB"


def calculate_traffic(
    num_accounts=10,
    interval_minutes=2,
    active_ratio=0.5,  # 50% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã
    hours=None,
    days=None,
    months=None
):
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞.
    
    Args:
        num_accounts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        active_ratio: –î–æ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (0.0 - 1.0)
        hours/days/months: –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    """
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
    active_accounts = int(num_accounts * active_ratio)
    inactive_accounts = num_accounts - active_accounts
    
    # –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    traffic_per_check = (active_accounts * AVG_TRAFFIC_ACTIVE + 
                         inactive_accounts * AVG_TRAFFIC_INACTIVE)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    checks_per_hour = 60 / interval_minutes
    
    results = []
    
    # –†–∞—Å—á–µ—Ç –∑–∞ —á–∞—Å
    if hours or not (days or months):
        period_hours = hours or 1
        total_checks = checks_per_hour * period_hours
        total_traffic = traffic_per_check * total_checks
        
        results.append({
            'period': f"{period_hours} —á–∞—Å(–æ–≤)",
            'checks': int(total_checks),
            'traffic': total_traffic
        })
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –¥–µ–Ω—å
    if days or not (hours or months):
        period_days = days or 1
        total_checks = checks_per_hour * 24 * period_days
        total_traffic = traffic_per_check * total_checks
        
        results.append({
            'period': f"{period_days} –¥–µ–Ω—å(–¥–Ω–µ–π)",
            'checks': int(total_checks),
            'traffic': total_traffic
        })
    
    # –†–∞—Å—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü
    if months:
        period_months = months
        total_checks = checks_per_hour * 24 * 30 * period_months
        total_traffic = traffic_per_check * total_checks
        
        results.append({
            'period': f"{period_months} –º–µ—Å—è—Ü(–µ–≤)",
            'checks': int(total_checks),
            'traffic': total_traffic
        })
    
    return {
        'accounts': num_accounts,
        'active_accounts': active_accounts,
        'inactive_accounts': inactive_accounts,
        'interval_minutes': interval_minutes,
        'traffic_per_check': traffic_per_check,
        'checks_per_hour': checks_per_hour,
        'results': results
    }


def print_report(calc):
    """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—á–µ—Ç–µ."""
    print("=" * 70)
    print("üìä –†–ê–°–ß–ï–¢ –ü–û–¢–†–ï–ë–õ–ï–ù–ò–Ø –¢–†–ê–§–ò–ö–ê –ê–í–¢–û–ü–†–û–í–ï–†–ö–ò")
    print("=" * 70)
    
    print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {calc['accounts']}")
    print(f"    - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {calc['active_accounts']} (~{AVG_TRAFFIC_ACTIVE/1024:.2f} KB –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)")
    print(f"    - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {calc['inactive_accounts']} (~{AVG_TRAFFIC_INACTIVE/1024:.2f} KB –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)")
    print(f"  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {calc['interval_minutes']} –º–∏–Ω—É—Ç")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ —á–∞—Å: {calc['checks_per_hour']:.1f}")
    print(f"  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫ –∑–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {format_bytes(int(calc['traffic_per_check']))}")
    
    print(f"\nüìä –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:")
    for result in calc['results']:
        print(f"\n  ‚è±Ô∏è  –ó–∞ {result['period']}:")
        print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: {result['checks']:,}")
        print(f"    ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: {format_bytes(int(result['traffic']))}")


if __name__ == "__main__":
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 1: 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã")
    print("–ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: 50% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã, 50% –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
    print("="*70)
    
    calc = calculate_traffic(
        num_accounts=10,
        interval_minutes=2,
        active_ratio=0.5,
        hours=1,
        days=1,
        months=1
    )
    print_report(calc)
    
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 2: –í—Å–µ 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã (—Ö—É–¥—à–∏–π —Å–ª—É—á–∞–π)")
    print("="*70)
    
    calc = calculate_traffic(
        num_accounts=10,
        interval_minutes=2,
        active_ratio=1.0,  # 100% –∞–∫—Ç–∏–≤–Ω—ã
        hours=1,
        days=1,
        months=1
    )
    print_report(calc)
    
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 3: –í—Å–µ 10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã (–ª—É—á—à–∏–π —Å–ª—É—á–∞–π)")
    print("="*70)
    
    calc = calculate_traffic(
        num_accounts=10,
        interval_minutes=2,
        active_ratio=0.0,  # 0% –∞–∫—Ç–∏–≤–Ω—ã
        hours=1,
        days=1,
        months=1
    )
    print_report(calc)
    
    print("\n" + "="*70)
    print("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò")
    print("="*70)
    
    # –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    print("\nüìå –í–ª–∏—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (10 –∞–∫–∫–∞—É–Ω—Ç–æ–≤, 50% –∞–∫—Ç–∏–≤–Ω—ã, –∑–∞ 1 –¥–µ–Ω—å):")
    for interval in [1, 2, 5, 10, 15, 30, 60]:
        calc = calculate_traffic(
            num_accounts=10,
            interval_minutes=interval,
            active_ratio=0.5,
            days=1
        )
        traffic_day = calc['results'][0]['traffic']
        print(f"  ‚Ä¢ –ö–∞–∂–¥—ã–µ {interval:2d} –º–∏–Ω: {format_bytes(int(traffic_day)):>12} –≤ –¥–µ–Ω—å")
    
    print("\n")

