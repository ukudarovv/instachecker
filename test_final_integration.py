#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ api-v2 –≤ –±–æ—Ç
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from project.keyboards import admin_verify_mode_selection_kb, verify_mode_selection_kb
import asyncio

def test_system_settings():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ system_settings.py"""
    print("üîß –¢–µ—Å—Ç system_settings.py...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ api-v2 –µ—Å—Ç—å –≤ valid_modes –≤ —Ñ—É–Ω–∫—Ü–∏–∏ set_global_verify_mode
    try:
        from project.services.system_settings import set_global_verify_mode
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
        import inspect
        source = inspect.getsource(set_global_verify_mode)
        if "api-v2" in source:
            print("‚úÖ api-v2 –¥–æ–±–∞–≤–ª–µ–Ω –≤ valid_modes –≤ set_global_verify_mode")
            return True
        else:
            print("‚ùå api-v2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ valid_modes")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ system_settings: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ keyboards.py"""
    print("üîß –¢–µ—Å—Ç keyboards.py...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    admin_kb = admin_verify_mode_selection_kb()
    admin_text = str(admin_kb)
    if "api-v2" in admin_text:
        print("‚úÖ api-v2 –¥–æ–±–∞–≤–ª–µ–Ω –≤ admin_verify_mode_selection_kb")
    else:
        print("‚ùå api-v2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ admin_verify_mode_selection_kb")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user_kb = verify_mode_selection_kb()
    user_text = str(user_kb)
    if "api-v2" in user_text:
        print("‚úÖ api-v2 –¥–æ–±–∞–≤–ª–µ–Ω –≤ verify_mode_selection_kb")
    else:
        print("‚ùå api-v2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ verify_mode_selection_kb")
        return False
    
    return True

def test_hybrid_checker():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ hybrid_checker.py"""
    print("üîß –¢–µ—Å—Ç hybrid_checker.py...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è check_account_hybrid –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å api-v2 —Ä–µ–∂–∏–º–æ–º
        result = asyncio.run(check_account_hybrid(
            username="test_user",
            user_id=1,
            verify_mode="api-v2"
        ))
        print("‚úÖ hybrid_checker –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2 —Ä–µ–∂–∏–º")
        return True
    except Exception as e:
        if "api-v2" in str(e):
            print("‚úÖ api-v2 —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ hybrid_checker")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ hybrid_checker: {e}")
            return False

def test_main_checker():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main_checker.py"""
    print("üîß –¢–µ—Å—Ç main_checker.py...")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å api-v2 —Ä–µ–∂–∏–º–æ–º
        result = asyncio.run(check_account_main(
            username="test_user",
            user_id=1,
            verify_mode="api-v2"
        ))
        print("‚úÖ main_checker –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2 —Ä–µ–∂–∏–º")
        return True
    except Exception as e:
        if "api-v2" in str(e):
            print("‚úÖ api-v2 —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ main_checker")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_checker: {e}")
            return False

def test_auto_checker():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ auto_checker_new.py"""
    print("üîß –¢–µ—Å—Ç auto_checker_new.py...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ auto_checker –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å api-v2 —Ä–µ–∂–∏–º
    try:
        from project.cron.auto_checker_new import process_accounts
        print("‚úÖ auto_checker_new –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_checker_new: {e}")
        return False

def test_user_management():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ user_management.py"""
    print("üîß –¢–µ—Å—Ç user_management.py...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è handle_callback_usr_change_verify –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback —Å api-v2
        class MockCallbackQuery:
            def __init__(self):
                self.data = "usr_change_verify:api-v2"
                self.from_user = type('obj', (object,), {'id': 1})()
        
        class MockBot:
            def __init__(self):
                pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2
        print("‚úÖ user_management –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å api-v2 —Ä–µ–∂–∏–º")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ user_management: {e}")
        return False

def test_api_v2_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ api_v2_proxy_checker"""
    print("üîß –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ api_v2_proxy_checker...")
    
    try:
        from project.services.api_v2_proxy_checker import check_account_via_api_v2_proxy
        print("‚úÖ api_v2_proxy_checker –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ api_v2_proxy_checker: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API-V2 –í –ë–û–¢")
    print("=" * 60)
    
    tests = [
        ("System Settings", test_system_settings),
        ("Keyboards", test_keyboards),
        ("Hybrid Checker", test_hybrid_checker),
        ("Main Checker", test_main_checker),
        ("Auto Checker", test_auto_checker),
        ("User Management", test_user_management),
        ("API V2 Import", test_api_v2_import)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test_name}...")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API-V2 –£–°–ü–ï–®–ù–û –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù –í –ë–û–¢!")
        print("\n‚úÖ –†–µ–∂–∏–º api-v2 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   - –î–æ—Å—Ç—É–ø–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")
        print("   - –î–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ hybrid_checker")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main_checker")
        print("   - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ auto_checker")
        print("   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏")
        print("   - –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ Firefox")
        print("   - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞")
        print("   - –£–±–∏—Ä–∞–µ—Ç –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ")
        return True
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
