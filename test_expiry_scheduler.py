"""Test expiry notification scheduler."""

import sys
import os
import asyncio
from datetime import time

# Add project to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from project.config import get_settings
from project.database import get_session_factory, get_engine
from project.expiry_scheduler import ExpiryNotificationScheduler


async def main():
    """Test expiry scheduler."""
    print("=" * 80)
    print("–¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –°–†–û–ö–ê–•")
    print("=" * 80)
    print()
    
    settings = get_settings()
    engine = get_engine(settings.db_url)
    SessionLocal = get_session_factory(engine)
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler = ExpiryNotificationScheduler(
        bot_token=settings.bot_token,
        SessionLocal=SessionLocal,
        notification_time=time(10, 0)  # 10:00 AM
    )
    
    print("2. –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler.start()
    
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    print(f"   –ó–∞–ø—É—â–µ–Ω: {scheduler.is_running()}")
    
    next_run = scheduler.get_next_run_time()
    if next_run:
        print(f"   –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}")
        print(f"   –≠—Ç–æ –±—É–¥–µ—Ç –≤: {next_run.strftime('%Y-%m-%d %H:%M:%S')}")
    
    print()
    print("4. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("   (–æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 10:00)")
    print()
    
    # Manually trigger notification check for testing
    from project.services.expiry_notifications import check_and_send_expiry_notifications
    from project.utils.async_bot_wrapper import AsyncBotWrapper
    
    async_bot = AsyncBotWrapper(settings.bot_token)
    
    try:
        await check_and_send_expiry_notifications(SessionLocal, async_bot)
        print()
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
    
    print()
    print("5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler.stop()
    print("   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print()
    print("=" * 80)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    print()
    print("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("   - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
    print("   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")
    print("   - –ö–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å")
    print("   - –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ expiry_notifications")


if __name__ == "__main__":
    asyncio.run(main())

