#!/usr/bin/env python3
"""
Test concurrent processing with different verification modes
"""

import asyncio
import sys
sys.path.append('project')
from models import User, Account
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from utils.async_bot_wrapper import AsyncBotWrapper
from config import get_settings

async def test_concurrent_modes():
    """Test that different users with different modes don't conflict"""
    engine = create_engine('sqlite:///bot.db')
    Session = sessionmaker(bind=engine)
    session = Session()
    
    # Get all active users with pending accounts
    users_with_accounts = (
        session.query(User)
        .join(Account)
        .filter(User.is_active == True, Account.done == False)
        .distinct()
        .all()
    )
    
    print(f"üìä Found {len(users_with_accounts)} active users with pending accounts")
    print("\n" + "="*60)
    
    # Display each user's configuration
    for user in users_with_accounts:
        accounts_count = session.query(Account).filter(
            Account.user_id == user.id,
            Account.done == False
        ).count()
        
        verify_mode = user.verify_mode or "api+instagram"
        
        print(f"\nüë§ User: {user.username} (ID: {user.id})")
        print(f"   üìã Mode: {verify_mode}")
        print(f"   üìä Pending accounts: {accounts_count}")
        
        # Check required resources
        resources = []
        
        # Check if needs API
        if verify_mode in ["api+instagram", "api+proxy", "api+proxy+instagram"]:
            from models import APIKey
            api_keys = session.query(APIKey).filter(
                APIKey.user_id == user.id,
                APIKey.is_work == True
            ).count()
            resources.append(f"API keys: {api_keys}")
        
        # Check if needs Instagram session
        if verify_mode in ["api+instagram", "instagram", "instagram+proxy", "api+proxy+instagram"]:
            from models import InstagramSession
            ig_sessions = session.query(InstagramSession).filter(
                InstagramSession.user_id == user.id,
                InstagramSession.is_active == True
            ).count()
            resources.append(f"IG sessions: {ig_sessions}")
        
        # Check if needs Proxy
        if verify_mode in ["api+proxy", "proxy", "instagram+proxy", "api+proxy+instagram"]:
            from models import Proxy
            proxies = session.query(Proxy).filter(
                Proxy.user_id == user.id,
                Proxy.is_active == True
            ).count()
            resources.append(f"Proxies: {proxies}")
        
        if resources:
            print(f"   üîß Resources: {', '.join(resources)}")
    
    print("\n" + "="*60)
    
    # Check for potential conflicts
    print("\nüîç Checking for potential conflicts...")
    
    conflicts = []
    
    # Check 1: Users with same mode should not conflict
    mode_groups = {}
    for user in users_with_accounts:
        mode = user.verify_mode or "api+instagram"
        if mode not in mode_groups:
            mode_groups[mode] = []
        mode_groups[mode].append(user.username)
    
    print("\nüìä Users grouped by mode:")
    for mode, usernames in mode_groups.items():
        print(f"   {mode}: {len(usernames)} users - {', '.join(usernames[:3])}{'...' if len(usernames) > 3 else ''}")
    
    # Check 2: Verify each user has required resources
    print("\n‚úÖ Resource validation:")
    for user in users_with_accounts:
        mode = user.verify_mode or "api+instagram"
        missing = []
        
        # Check API keys
        if mode in ["api+instagram", "api+proxy", "api+proxy+instagram"]:
            from models import APIKey
            if not session.query(APIKey).filter(
                APIKey.user_id == user.id,
                APIKey.is_work == True
            ).first():
                missing.append("API key")
        
        # Check Instagram session
        if mode in ["api+instagram", "instagram", "instagram+proxy", "api+proxy+instagram"]:
            from models import InstagramSession
            if not session.query(InstagramSession).filter(
                InstagramSession.user_id == user.id,
                InstagramSession.is_active == True
            ).first():
                missing.append("Instagram session")
        
        # Check Proxy
        if mode in ["api+proxy", "proxy", "instagram+proxy", "api+proxy+instagram"]:
            from models import Proxy
            if not session.query(Proxy).filter(
                Proxy.user_id == user.id,
                Proxy.is_active == True
            ).first():
                missing.append("Proxy")
        
        if missing:
            conflicts.append(f"User {user.username} (mode: {mode}) missing: {', '.join(missing)}")
            print(f"   ‚ö†Ô∏è {user.username}: Missing {', '.join(missing)}")
        else:
            print(f"   ‚úÖ {user.username}: All resources available")
    
    # Summary
    print("\n" + "="*60)
    print("\nüìã SUMMARY:")
    print(f"   Total users: {len(users_with_accounts)}")
    print(f"   Different modes: {len(mode_groups)}")
    print(f"   Users with conflicts: {len(conflicts)}")
    
    if conflicts:
        print("\n‚ö†Ô∏è CONFLICTS DETECTED:")
        for conflict in conflicts:
            print(f"   ‚Ä¢ {conflict}")
        print("\nüí° These users will be skipped during auto-check")
    else:
        print("\n‚úÖ NO CONFLICTS! All users can run concurrently")
    
    # Test parallel execution simulation
    print("\n" + "="*60)
    print("\nüß™ SIMULATING PARALLEL EXECUTION:")
    print("   Each user will be processed in a separate task")
    print("   Users with different modes will NOT interfere with each other")
    print("   Each user maintains their own:")
    print("   ‚Ä¢ verify_mode setting")
    print("   ‚Ä¢ Instagram session (if needed)")
    print("   ‚Ä¢ Proxy configuration (if needed)")
    print("   ‚Ä¢ API keys (if needed)")
    
    # Send report to user
    settings = get_settings()
    bot = AsyncBotWrapper(settings.bot_token)
    
    report_message = f"""üîç **–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í –†–ï–ñ–ò–ú–û–í**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_with_accounts)}
‚Ä¢ –†–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤: {len(mode_groups)}
‚Ä¢ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}

**üìã –†–µ–∂–∏–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
"""
    
    for mode, usernames in mode_groups.items():
        report_message += f"\n‚Ä¢ `{mode}`: {len(usernames)} –ø–æ–ª—å–∑."
    
    if conflicts:
        report_message += f"\n\n‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:**\n"
        for conflict in conflicts[:5]:  # Show first 5
            report_message += f"‚Ä¢ {conflict}\n"
        if len(conflicts) > 5:
            report_message += f"‚Ä¢ ... –∏ –µ—â–µ {len(conflicts) - 5}\n"
        report_message += "\nüí° –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–µ"
    else:
        report_message += "\n\n‚úÖ **–ö–û–ù–§–õ–ò–ö–¢–û–í –ù–ï–¢!**\n\n"
        report_message += "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:\n"
        report_message += "‚Ä¢ –ö–∞–∂–¥—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π —Ä–µ–∂–∏–º\n"
        report_message += "‚Ä¢ –ö–∞–∂–¥—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã\n"
        report_message += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞\n"
    
    await bot.send_message(1972775559, report_message)
    print("\n‚úÖ Report sent to user!")
    
    session.close()

if __name__ == '__main__':
    asyncio.run(test_concurrent_modes())
