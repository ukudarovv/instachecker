"""
–¢–µ—Å—Ç API v2 proxy checker —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ DESIGN
"""
import asyncio
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from project.services.api_v2_proxy_checker import check_account_via_api_v2_proxy

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
engine = create_engine('sqlite:///bot.db', echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def test_check_account():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ API v2"""
    session = SessionLocal()
    
    try:
        print("="*70)
        print("üß™ –¢–ï–°–¢ API V2 PROXY CHECKER –° –ù–û–í–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò DESIGN")
        print("="*70)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π username
        test_username = "ukudarov"
        test_user_id = 1
        
        print(f"\nüìù –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫–∫–∞—É–Ω—Ç: @{test_username}")
        print("-"*70)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        result = await check_account_via_api_v2_proxy(
            session=session,
            user_id=test_user_id,
            username=test_username,
            max_attempts=2
        )
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.get('exists')}")
        print(f"   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {result.get('is_verified')}")
        print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {result.get('is_private')}")
        print(f"   –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {result.get('followers')}")
        print(f"   –ü–æ–¥–ø–∏—Å–æ–∫: {result.get('following')}")
        print(f"   –ü–æ—Å—Ç–æ–≤: {result.get('posts')}")
        
        if result.get('screenshot_path'):
            print(f"\n‚úÖ –®–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:")
            print(f"   üìÅ {result['screenshot_path']}")
        else:
            print(f"\n‚ö†Ô∏è –®–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            if result.get('error'):
                print(f"   –û—à–∏–±–∫–∞: {result['error']}")
        
        print("\n" + "="*70)
        return result
        
    finally:
        session.close()

if __name__ == "__main__":
    try:
        result = asyncio.run(test_check_account())
        sys.exit(0 if result.get('success') or result.get('exists') else 1)
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

