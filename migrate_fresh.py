"""–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é —Å –æ—á–∏—Å—Ç–∫–æ–π."""

import sqlite3
import sys
from datetime import datetime

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
OLD_DB = "bu/date.db"
NEW_DB = "bot.db"


def backup_new_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–æ–≤–æ–π –ë–î."""
    import shutil
    import time
    
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    backup_name = f"bot_backup_{timestamp}.db"
    
    try:
        shutil.copy2(NEW_DB, backup_name)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None


def clear_new_db_data():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –ë–î (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)."""
    print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –ë–î...\n")
    
    try:
        conn = sqlite3.connect(NEW_DB)
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ)
        tables_to_clear = [
            "accounts",
            "api", 
            "proxies",
            "instagram_sessions",
            "users"
        ]
        
        for table in tables_to_clear:
            cursor.execute(f"DELETE FROM {table}")
            deleted = cursor.rowcount
            print(f"   üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: —É–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞–ø–∏—Å–µ–π")
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º system_settings
        print(f"   ‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ system_settings –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –ù–æ–≤–∞—è –ë–î –æ—á–∏—â–µ–Ω–∞")
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤–æ–π –ë–î: {e}")
        sys.exit(1)


def migrate_users():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("\nüë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM users")
        old_users = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(users)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        
        for user_data in old_users:
            user_dict = dict(zip(column_names, user_data))
            user_id = user_dict.get('id')
            
            if not user_id:
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            username = user_dict.get('username', f'user_{user_id}')
            is_active = user_dict.get('is_active', 0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º is_admin –≤ role
            is_admin = user_dict.get('is_admin', 0)
            role = "admin" if is_admin else "user"
            
            verify_mode = user_dict.get('verify_mode', 'api')
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_cursor.execute(
                "INSERT INTO users (id, username, is_active, role, verify_mode) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, is_active, role, verify_mode)
            )
            
            role_icon = "üëë" if role == "admin" else "üë§"
            status_icon = "‚úÖ" if is_active else "‚ùå"
            print(f"   {status_icon} {role_icon} –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: {username} (ID: {user_id})")
            migrated += 1
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0


def migrate_accounts():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    print("\nüì± –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM accounts")
        old_accounts = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(accounts)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        skipped = 0
        
        for account_data in old_accounts:
            account_dict = dict(zip(column_names, account_data))
            
            user_id = account_dict.get('user_id')
            account_name = account_dict.get('account')
            
            if not user_id or not account_name:
                skipped += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–æ–≤–æ–π –ë–î
            new_cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not new_cursor.fetchone():
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º @{account_name}")
                skipped += 1
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            from_date = account_dict.get('from_date')
            period = account_dict.get('period')
            to_date = account_dict.get('to_date')
            date_of_finish = account_dict.get('date_of_finish')
            done = account_dict.get('done', 0)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç (–±–µ–∑ id, –æ–Ω auto-increment)
            new_cursor.execute(
                "INSERT INTO accounts (user_id, account, from_date, period, to_date, date_of_finish, done) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, account_name, from_date, period, to_date, date_of_finish, done)
            )
            
            status_icon = "‚úÖ" if done else "‚è≥"
            if migrated < 20 or migrated % 50 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∏ –∫–∞–∂–¥—ã–π 50-–π
                print(f"   {status_icon} @{account_name} (user: {user_id})")
            migrated += 1
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return 0


def migrate_api_keys():
    """–ú–∏–≥—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π."""
    print("\nüîë –ú–∏–≥—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ API –∫–ª—é—á–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM api")
        old_keys = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(api)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        skipped = 0
        
        for key_data in old_keys:
            key_dict = dict(zip(column_names, key_data))
            
            user_id = key_dict.get('user_id')
            key_value = key_dict.get('key')
            
            if not user_id or not key_value:
                skipped += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            new_cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not new_cursor.fetchone():
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á")
                skipped += 1
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            qty_req = key_dict.get('qty_req', 0)
            ref_date = key_dict.get('ref_date')
            is_work = key_dict.get('is_work', 1)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á
            try:
                new_cursor.execute(
                    "INSERT INTO api (user_id, key, qty_req, ref_date, is_work) "
                    "VALUES (?, ?, ?, ?, ?)",
                    (user_id, key_value, qty_req, ref_date, is_work)
                )
                
                masked_key = key_value[:4] + "..." + key_value[-4:] if len(key_value) > 8 else "***"
                status_icon = "‚úÖ" if is_work else "‚ùå"
                print(f"   {status_icon} {masked_key} (user: {user_id})")
                migrated += 1
            except sqlite3.IntegrityError:
                # –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (UNIQUE constraint)
                skipped += 1
                continue
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π: {e}")
        return 0


def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–µ–∏—Ö –ë–î."""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó –î–ê–ù–ù–´–•:")
    print("=" * 60)
    
    # –°—Ç–∞—Ä–∞—è –ë–î
    try:
        old_conn = sqlite3.connect(OLD_DB)
        old_cursor = old_conn.cursor()
        
        print("\nüóÇÔ∏è –°–¢–ê–†–ê–Ø –ë–î (bu/date.db):")
        old_cursor.execute("SELECT COUNT(*) FROM users")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {old_cursor.fetchone()[0]}")
        old_cursor.execute("SELECT COUNT(*) FROM accounts")
        print(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {old_cursor.fetchone()[0]}")
        old_cursor.execute("SELECT COUNT(*) FROM api")
        print(f"   üîë API –∫–ª—é—á–µ–π: {old_cursor.fetchone()[0]}")
        
        old_conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –ë–î: {e}")
    
    # –ù–æ–≤–∞—è –ë–î
    try:
        new_conn = sqlite3.connect(NEW_DB)
        new_cursor = new_conn.cursor()
        
        print("\nüÜï –ù–û–í–ê–Ø –ë–î (bot.db):")
        new_cursor.execute("SELECT COUNT(*) FROM users")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_cursor.fetchone()[0]}")
        new_cursor.execute("SELECT COUNT(*) FROM accounts")
        print(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {new_cursor.fetchone()[0]}")
        new_cursor.execute("SELECT COUNT(*) FROM api")
        print(f"   üîë API –∫–ª—é—á–µ–π: {new_cursor.fetchone()[0]}")
        new_cursor.execute("SELECT COUNT(*) FROM proxies")
        print(f"   üåê –ü—Ä–æ–∫—Å–∏: {new_cursor.fetchone()[0]}")
        new_cursor.execute("SELECT COUNT(*) FROM instagram_sessions")
        print(f"   üì∏ IG-—Å–µ—Å—Å–∏–π: {new_cursor.fetchone()[0]}")
        
        new_conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–æ–≤–æ–π –ë–î: {e}")
    
    print("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 60)
    print("üîÑ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• (–° –û–ß–ò–°–¢–ö–û–ô)")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    show_statistics()
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í–ê–ñ–ù–û!")
    print("=" * 60)
    print()
    print("–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è:")
    print("1. –°–æ–∑–¥–∞—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–æ–≤–æ–π –ë–î")
    print("2. –£–î–ê–õ–ò–¢ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π –ë–î:")
    print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   - –ê–∫–∫–∞—É–Ω—Ç—ã")
    print("   - API –∫–ª—é—á–∏")
    print("   - –ü—Ä–æ–∫—Å–∏")
    print("   - Instagram —Å–µ—Å—Å–∏–∏")
    print("3. –ü–µ—Ä–µ–Ω–µ—Å—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î:")
    print("   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   - –ê–∫–∫–∞—É–Ω—Ç—ã")
    print("   - API –∫–ª—é—á–∏")
    print()
    print("‚ö†Ô∏è system_settings –∏ proxies/instagram_sessions –æ—Å—Ç–∞–Ω—É—Ç—Å—è!")
    print()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if response not in ['–¥–∞', 'yes', 'y', '–¥']:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    print("\n" + "=" * 60)
    print("üíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
    print("=" * 60)
    backup = backup_new_db()
    if not backup:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–≤—É—é –ë–î
    print("\n" + "=" * 60)
    print("üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ù–û–í–û–ô –ë–î")
    print("=" * 60)
    clear_new_db_data()
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "=" * 60)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    users_migrated = migrate_users()
    accounts_migrated = migrate_accounts()
    keys_migrated = migrate_api_keys()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_migrated}")
    print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_migrated}")
    print(f"üîë API –∫–ª—é—á–µ–π: {keys_migrated}")
    print(f"\nüìä –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users_migrated + accounts_migrated + keys_migrated} –∑–∞–ø–∏—Å–µ–π")
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup}")
    print("=" * 60)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    show_statistics()
    
    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üí° –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup}")
    print("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

