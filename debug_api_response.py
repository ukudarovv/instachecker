#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'project'))

from project.services.check_via_api import check_account_exists_via_api
from project.models import User, Account
from project.config import get_settings
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

async def debug_api_response():
    """–û—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = get_settings()
    engine = create_engine(settings.db_url)
    SessionLocal = sessionmaker(bind=engine)
    
    with SessionLocal() as session:
        print("üîç –û—Ç–ª–∞–¥–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user = session.query(User).filter(User.id == 1).first()
        if not test_user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.id}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        test_accounts = [
            "ukudarov",  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            "nonexistent123456789",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            "invalid_user_12345",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        ]
        
        for username in test_accounts:
            print(f"\nüìä –¢–µ—Å—Ç API –¥–ª—è @{username}")
            print("-" * 40)
            
            try:
                result = await check_account_exists_via_api(
                    session=session,
                    user_id=test_user.id,
                    username=username
                )
                
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç API:")
                print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.get('exists')}")
                print(f"   ‚ùó –û—à–∏–±–∫–∞: {result.get('error', 'N/A')}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
                if result.get('exists') is True and username in ["nonexistent123456789", "invalid_user_12345"]:
                    print("   üö® –ü–†–û–ë–õ–ï–ú–ê: API –Ω–∞—à–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç!")
                    print("   üîç –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è username –≤ API")
                elif result.get('exists') is False and username == "ukudarov":
                    print("   üö® –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ –Ω–∞—à–µ–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç!")
                
            except Exception as e:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
        
        print(f"\n" + "=" * 60)
        print("üéØ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å API")

if __name__ == "__main__":
    asyncio.run(debug_api_response())
