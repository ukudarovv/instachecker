"""–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é."""

import sqlite3
import sys
from datetime import datetime

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
OLD_DB = "bu/date.db"
NEW_DB = "bot.db"


def check_old_db_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ä–æ–π –ë–î."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    try:
        conn = sqlite3.connect(OLD_DB)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}\n")
        
        for table in tables:
            table_name = table[0]
            print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            
            print("   –ö–æ–ª–æ–Ω–∫–∏:")
            for col in columns:
                col_id, col_name, col_type, not_null, default_val, pk = col
                pk_marker = " [PK]" if pk else ""
                print(f"   - {col_name}: {col_type}{pk_marker}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìà –ó–∞–ø–∏—Å–µ–π: {count}\n")
        
        conn.close()
        return tables
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –ë–î: {e}")
        return []


def check_new_db_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ–π –ë–î."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    try:
        conn = sqlite3.connect(NEW_DB)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}\n")
        
        for table in tables:
            table_name = table[0]
            print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"   üìà –ó–∞–ø–∏—Å–µ–π: {count}")
        
        conn.close()
        return tables
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ë–î: {e}")
        return []


def preview_old_data():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î."""
    print("\nüëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î...\n")
    
    try:
        conn = sqlite3.connect(OLD_DB)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
            cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
            rows = cursor.fetchall()
            
            if rows:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = [col[1] for col in cursor.fetchall()]
                
                print(f"   –ö–æ–ª–æ–Ω–∫–∏: {', '.join(columns)}")
                print(f"   –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:")
                for i, row in enumerate(rows, 1):
                    print(f"   {i}. {row}")
            else:
                print("   (–ø—É—Å—Ç–æ)")
            print()
        
        conn.close()
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def migrate_users():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    print("\nüë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ users –≤ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if not old_cursor.fetchone():
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–π –ë–î")
            old_conn.close()
            new_conn.close()
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        old_cursor.execute("PRAGMA table_info(users)")
        old_columns = {col[1]: col for col in old_cursor.fetchall()}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM users")
        old_users = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(users)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        skipped = 0
        
        for user_data in old_users:
            user_dict = dict(zip(column_names, user_data))
            user_id = user_dict.get('id')
            
            if not user_id:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            new_cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if new_cursor.fetchone():
                print(f"   ‚è≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                skipped += 1
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            username = user_dict.get('username', f'user_{user_id}')
            is_active = user_dict.get('is_active', 0)
            role = user_dict.get('role', 'user')
            verify_mode = user_dict.get('verify_mode', 'api')
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_cursor.execute(
                "INSERT INTO users (id, username, is_active, role, verify_mode) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, is_active, role, verify_mode)
            )
            
            print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
            migrated += 1
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0


def migrate_accounts():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    print("\nüì± –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ accounts –≤ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='accounts'")
        if not old_cursor.fetchone():
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'accounts' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–π –ë–î")
            old_conn.close()
            new_conn.close()
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM accounts")
        old_accounts = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(accounts)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        skipped = 0
        errors = 0
        
        for account_data in old_accounts:
            account_dict = dict(zip(column_names, account_data))
            
            user_id = account_dict.get('user_id')
            account_name = account_dict.get('account')
            
            if not user_id or not account_name:
                errors += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–æ–≤–æ–π –ë–î
            new_cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not new_cursor.fetchone():
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_name}")
                skipped += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç
            new_cursor.execute(
                "SELECT id FROM accounts WHERE user_id = ? AND account = ?",
                (user_id, account_name)
            )
            if new_cursor.fetchone():
                print(f"   ‚è≠ –ê–∫–∫–∞—É–Ω—Ç @{account_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                skipped += 1
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            from_date = account_dict.get('from_date')
            period = account_dict.get('period')
            to_date = account_dict.get('to_date')
            date_of_finish = account_dict.get('date_of_finish')
            done = account_dict.get('done', 0)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç (–±–µ–∑ id, –æ–Ω auto-increment)
            new_cursor.execute(
                "INSERT INTO accounts (user_id, account, from_date, period, to_date, date_of_finish, done) "
                "VALUES (?, ?, ?, ?, ?, ?, ?)",
                (user_id, account_name, from_date, period, to_date, date_of_finish, done)
            )
            
            print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{account_name} (user_id: {user_id})")
            migrated += 1
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}, –æ—à–∏–±–æ–∫ {errors}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return 0


def migrate_api_keys():
    """–ú–∏–≥—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π."""
    print("\nüîë –ú–∏–≥—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π...\n")
    
    try:
        old_conn = sqlite3.connect(OLD_DB)
        new_conn = sqlite3.connect(NEW_DB)
        
        old_cursor = old_conn.cursor()
        new_cursor = new_conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ api –≤ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='api'")
        if not old_cursor.fetchone():
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'api' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ä–æ–π –ë–î")
            old_conn.close()
            new_conn.close()
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ API –∫–ª—é—á–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        old_cursor.execute("SELECT * FROM api")
        old_keys = old_cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        old_cursor.execute("PRAGMA table_info(api)")
        column_names = [col[1] for col in old_cursor.fetchall()]
        
        migrated = 0
        skipped = 0
        
        for key_data in old_keys:
            key_dict = dict(zip(column_names, key_data))
            
            user_id = key_dict.get('user_id')
            key_value = key_dict.get('key')
            
            if not user_id or not key_value:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            new_cursor.execute("SELECT id FROM users WHERE id = ?", (user_id,))
            if not new_cursor.fetchone():
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á")
                skipped += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á
            new_cursor.execute("SELECT id FROM api WHERE key = ?", (key_value,))
            if new_cursor.fetchone():
                print(f"   ‚è≠ API –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                skipped += 1
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            qty_req = key_dict.get('qty_req', 0)
            ref_date = key_dict.get('ref_date')
            is_work = key_dict.get('is_work', 1)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á
            new_cursor.execute(
                "INSERT INTO api (user_id, key, qty_req, ref_date, is_work) "
                "VALUES (?, ?, ?, ?, ?)",
                (user_id, key_value, qty_req, ref_date, is_work)
            )
            
            masked_key = key_value[:4] + "..." + key_value[-4:] if len(key_value) > 8 else "***"
            print(f"   ‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω API –∫–ª—é—á: {masked_key} (user_id: {user_id})")
            migrated += 1
        
        new_conn.commit()
        old_conn.close()
        new_conn.close()
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return migrated
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π: {e}")
        return 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó –°–¢–ê–†–û–ô –ë–î –í –ù–û–í–£–Æ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    old_tables = check_old_db_structure()
    if not old_tables:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—É—é –ë–î")
        return
    
    new_tables = check_new_db_structure()
    if not new_tables:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤—É—é –ë–î")
        return
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_old_data()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print("=" * 60)
    print("–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é.")
    print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –Ω–æ–≤–æ–π –ë–î –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.")
    print()
    
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if response not in ['–¥–∞', 'yes', 'y', '–¥']:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    print("\n" + "=" * 60)
    print("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    users_migrated = migrate_users()
    accounts_migrated = migrate_accounts()
    keys_migrated = migrate_api_keys()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_migrated}")
    print(f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_migrated}")
    print(f"üîë API –∫–ª—é—á–µ–π: {keys_migrated}")
    print(f"\nüìä –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users_migrated + accounts_migrated + keys_migrated} –∑–∞–ø–∏—Å–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n")
    check_new_db_structure()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

