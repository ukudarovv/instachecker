#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ukudarov —á–µ—Ä–µ–∑ API v2.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'project'))

from project.services.api_v2_proxy_checker import check_account_via_api_v2_proxy
from project.models import Proxy, User, Account
from project.config import get_settings
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import date

async def test_ukudarov():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ukudarov"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ @ukudarov —á–µ—Ä–µ–∑ API v2...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = get_settings()
    engine = create_engine(settings.db_url)
    SessionLocal = sessionmaker(bind=engine)
    
    with SessionLocal() as session:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = session.query(User).filter(User.id == 1).first()
        if not test_user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏
        proxies = session.query(Proxy).filter(
            Proxy.user_id == test_user.id,
            Proxy.is_active == True
        ).all()
        
        if not proxies:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        for i, proxy in enumerate(proxies[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   üì° –ü—Ä–æ–∫—Å–∏ {i+1}: {proxy.host}")
        
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç @ukudarov...")
        
        try:
            result = await check_account_via_api_v2_proxy(
                session=session,
                user_id=test_user.id,
                username="ukudarov"
            )
            
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è @ukudarov:")
            print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.get('exists')}")
            print(f"   üìõ –ò–º—è: {result.get('full_name', 'N/A')}")
            followers = result.get('followers', 0) or 0
            following = result.get('following', 0) or 0
            posts = result.get('posts', 0) or 0
            print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers:,}")
            print(f"   üë• –ü–æ–¥–ø–∏—Å–∫–∏: {following:,}")
            print(f"   üì∏ –ü–æ—Å—Ç—ã: {posts}")
            print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {result.get('is_verified', False)}")
            print(f"   üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {result.get('is_private', False)}")
            print(f"   üîó –ü—Ä–æ–∫—Å–∏: {result.get('proxy_used', 'N/A')}")
            print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {result.get('screenshot_path', 'N/A')}")
            print(f"   ‚ùó –û—à–∏–±–∫–∞: {result.get('error', 'N/A')}")
            print(f"   üéØ –ú–µ—Ç–æ–¥: {result.get('checked_via', 'N/A')}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if result.get('screenshot_path') and os.path.exists(result.get('screenshot_path')):
                file_size = os.path.getsize(result.get('screenshot_path')) / 1024
                print(f"   üìè –†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {file_size:.1f} KB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            account = session.query(Account).filter(
                Account.user_id == test_user.id,
                Account.account == "ukudarov"
            ).first()
            
            if account:
                print(f"   üìä –°—Ç–∞—Ç—É—Å –≤ –ë–î: {'–í—ã–ø–æ–ª–Ω–µ–Ω' if account.done else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
                if account.date_of_finish:
                    print(f"   üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {account.date_of_finish}")
            else:
                print(f"   üìä –°—Ç–∞—Ç—É—Å –≤ –ë–î: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ @ukudarov: {e}")
            import traceback
            traceback.print_exc()
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(test_ukudarov())
