#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Instagram –ø—Ä–æ—Ñ–∏–ª—è.
–¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
"""

import asyncio
import os
from datetime import datetime
from playwright.async_api import async_playwright

async def minimal_screenshot():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    username = "ukudarov"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π username
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    screenshots_dir = "screenshots"
    os.makedirs(screenshots_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_path = os.path.join(screenshots_dir, f"minimal_{username}_{timestamp}.png")
    
    print(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è @{username}")
    print(f"üì∏ –ü—É—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot_path}")
    print("-" * 50)
    
    try:
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            browser = await p.chromium.launch(
                headless=True,
                args=["--no-sandbox", "--disable-dev-shm-usage"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await browser.new_context(
                viewport={"width": 1920, "height": 1080}
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page = await context.new_page()
            
            # URL –ø—Ä–æ—Ñ–∏–ª—è
            url = f"https://www.instagram.com/{username}/"
            
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await page.goto(url, timeout=30000)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            await page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            current_url = page.url
            print(f"üîó –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            print("üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...")
            await page.screenshot(path=screenshot_path, full_page=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if os.path.exists(screenshot_path):
                file_size = os.path.getsize(screenshot_path) / 1024
                print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
                print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                if file_size > 1:  # –ë–æ–ª—å—à–µ 1 KB
                    print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                    return True
                else:
                    print("‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø—É—Å—Ç–æ–π")
                    return False
            else:
                print("‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω!")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    finally:
        try:
            await browser.close()
        except:
            pass

async def test_different_accounts():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    
    accounts = [
        "ukudarov",
        "instagram",
        "test_account"
    ]
    
    print(f"üß™ –¢–µ—Å—Ç {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("=" * 50)
    
    results = []
    
    for i, username in enumerate(accounts, 1):
        print(f"\n[{i}/{len(accounts)}] –¢–µ—Å—Ç–∏—Ä—É–µ–º @{username}...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º username –≤ —Ñ—É–Ω–∫—Ü–∏–∏
        import sys
        import types
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º username
        def updated_minimal_screenshot():
            return minimal_screenshot.__code__.replace(
                b"ukudarov", username.encode()
            )
        
        success = await minimal_screenshot()
        results.append({"username": username, "success": success})
        
        if success:
            print(f"  ‚úÖ @{username} - —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"  ‚ùå @{username} - –Ω–µ—É–¥–∞—á–Ω–æ")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    successful = sum(1 for r in results if r['success'])
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{total}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total - successful}/{total}")
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} @{result['username']}")
    
    return results

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤")
    print("=" * 50)
    
    # –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç
    test_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:\n1. –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç\n2. –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if test_choice == "1":
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        username = input("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
        if username:
            # –û–±–Ω–æ–≤–ª—è–µ–º username
            import sys
            sys.modules[__name__].minimal_screenshot.__code__ = minimal_screenshot.__code__.replace(
                b"ukudarov", username.encode()
            )
        
        success = asyncio.run(minimal_screenshot())
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 50)
        print(f"‚úÖ –£—Å–ø–µ—Ö: {success}")
        
    elif test_choice == "2":
        # –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        asyncio.run(test_different_accounts())
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        asyncio.run(minimal_screenshot())
