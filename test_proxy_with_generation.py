"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª—è (–ë–ï–ó –ë–†–ê–£–ó–ï–†–ê)
"""
import asyncio
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from project.models import Proxy
from project.services.proxy_tester import test_proxy_with_screenshot

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
engine = create_engine('sqlite:///bot.db', echo=False)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def test_proxy_generation():
    """–¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª—è"""
    session = SessionLocal()
    
    try:
        print("="*70)
        print("üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª—è (–ë–ï–ó –ë–†–ê–£–ó–ï–†–ê)")
        print("="*70)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        proxy = session.query(Proxy).filter(
            Proxy.is_active == True,
            Proxy.user_id == 1
        ).first()
        
        if not proxy:
            print("\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –ë–î")
            return False
        
        print(f"\nüì° –ü—Ä–æ–∫—Å–∏: {proxy.scheme}://{proxy.host}")
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: @instagram")
        print(f"üöÄ –ú–µ—Ç–æ–¥: API + –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)")
        print("-"*70)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
        success, message, screenshot_path = await test_proxy_with_screenshot(
            proxy=proxy,
            test_username="instagram"
        )
        
        print("\n" + "="*70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        print("="*70)
        
        if success:
            print("‚úÖ –£—Å–ø–µ—Ö!")
            print(f"\n{message}")
            if screenshot_path:
                print(f"\nüìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {screenshot_path}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(f"\n{message}")
        
        print("\n" + "="*70)
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        session.close()

async def test_multiple_accounts():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    session = SessionLocal()
    
    try:
        print("\n" + "="*70)
        print("üß™ –¢–ï–°–¢: –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("="*70)
        
        proxy = session.query(Proxy).filter(
            Proxy.is_active == True,
            Proxy.user_id == 1
        ).first()
        
        if not proxy:
            print("\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –ë–î")
            return
        
        test_accounts = ["instagram", "cristiano", "leomessi"]
        results = []
        
        for username in test_accounts:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º @{username}...")
            success, message, screenshot_path = await test_proxy_with_screenshot(
                proxy=proxy,
                test_username=username
            )
            results.append({
                "username": username,
                "success": success,
                "path": screenshot_path
            })
            print(f"   {'‚úÖ' if success else '‚ùå'} {username}")
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–ò:")
        print("="*70)
        successful = sum(1 for r in results if r["success"])
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(test_accounts)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(test_accounts) - successful}/{len(test_accounts)}")
        
        for result in results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} @{result['username']}")
            if result["path"]:
                print(f"      üìÅ {result['path']}")
        
        print("="*70)
        
    finally:
        session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üé®"*35)
    print(" "*10 + "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò –° –ì–ï–ù–ï–†–ê–¶–ò–ï–ô")
    print("üé®"*35)
    
    # –¢–µ—Å—Ç 1: –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
    result1 = await test_proxy_generation()
    
    if result1:
        # –¢–µ—Å—Ç 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        response = input("\n\n‚ö° –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤? (y/n): ")
        if response.lower() == 'y':
            await test_multiple_accounts()
    
    print("\n" + "üéâ"*35)
    print(" "*15 + "–¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("   –¢–µ–ø–µ—Ä—å –ø—Ä–æ–∫—Å–∏ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –ë–ï–ó –±—Ä–∞—É–∑–µ—Ä–∞!")
    print("   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    print("üéâ"*35 + "\n")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

