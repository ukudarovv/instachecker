#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –±–æ—Ç.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
"""

import sys
import os

sys.path.insert(0, os.path.dirname(__file__))

from project.database import get_engine, get_session_factory
from project.config import get_settings
from project.models import Proxy, User
from project.utils.encryptor import OptionalFernet
from project.services.proxy_parser import parse_proxy_list, validate_proxy_data, deduplicate_proxies


# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏)
TEST_PROXIES = """
# –†–µ–∑–∏–¥–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏ resi.gg (—Ä–∞–±–æ—á–∏–π)
http://74276e667af9:d9754cc35e1e@proxy.resi.gg:12321

# –ü—Ä–∏–º–µ—Ä—ã –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ)
# http://user:pass@proxy2.com:8080
# socks5://user:pass@proxy3.com:1080
# 192.168.1.1:3128
# proxy4.com:8080:user:pass
"""


def batch_add_proxies(proxy_list_text: str):
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    
    print("="*80)
    print("üì¶ –ú–ê–°–°–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–ö–°–ò")
    print("="*80)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    engine = get_engine(settings.db_url)
    SessionFactory = get_session_factory(engine)
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫
    print(f"\nüìù –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞...")
    valid_proxies, parse_errors = parse_proxy_list(proxy_list_text)
    
    print(f"  ‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {len(valid_proxies)}")
    if parse_errors:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(parse_errors)}")
        for err in parse_errors[:3]:
            print(f"    ‚Ä¢ {err}")
        if len(parse_errors) > 3:
            print(f"    ... –∏ –µ—â–µ {len(parse_errors) - 3}")
    
    if not valid_proxies:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with SessionFactory() as session:
        user = session.query(User).filter(
            (User.role.in_(['admin', 'superuser'])) | (User.is_active == True)
        ).first()
        
        if not user:
            print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return False
        
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or user.telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏
        existing = session.query(Proxy).filter(Proxy.user_id == user.id).all()
        existing_data = [
            {'scheme': p.scheme, 'host': p.host}
            for p in existing
        ]
        
        print(f"  üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(existing)}")
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
        unique_proxies, duplicates = deduplicate_proxies(existing_data, valid_proxies)
        
        if duplicates > 0:
            print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è...")
        validated = []
        validation_errors = []
        
        for proxy_data in unique_proxies:
            is_valid, error = validate_proxy_data(proxy_data)
            if is_valid:
                validated.append(proxy_data)
            else:
                validation_errors.append(f"{proxy_data['host']}: {error}")
        
        print(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(validated)}")
        
        if validation_errors:
            print(f"  ‚ùå –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validation_errors)}")
            for err in validation_errors[:3]:
                print(f"    ‚Ä¢ {err}")
            if len(validation_errors) > 3:
                print(f"    ... –∏ –µ—â–µ {len(validation_errors) - 3}")
        
        if not validated:
            print("\n‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        encryptor = OptionalFernet(settings.encryption_key)
        added_count = 0
        
        for proxy_data in validated:
            proxy = Proxy(
                user_id=user.id,
                scheme=proxy_data['scheme'],
                host=proxy_data['host'],
                username=proxy_data.get('username'),
                password=encryptor.encrypt(proxy_data['password']) if proxy_data.get('password') else None,
                is_active=True,
                priority=5
            )
            session.add(proxy)
            added_count += 1
            print(f"  ‚Ä¢ {proxy_data['scheme']}://{proxy_data['host']}")
        
        session.commit()
        
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*80}")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
        if duplicates > 0:
            print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {duplicates}")
        if parse_errors:
            print(f"‚ùå –û—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(parse_errors)}")
        if validation_errors:
            print(f"‚ùå –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validation_errors)}")
        
        print(f"\nüí° –í—Å–µ –ø—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 5 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print(f"üí° –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –ü—Ä–æ–∫—Å–∏ ‚Üí –ú–æ–∏ –ø—Ä–æ–∫—Å–∏")
        
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("\n" + "="*80)
    print("üîç –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ö–°–ò")
    print("="*80)
    print("\nüí° –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ –±–æ—Ç")
    print("üí° –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TEST_PROXIES\n")
    
    try:
        success = batch_add_proxies(TEST_PROXIES)
        
        if success:
            print("\n‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            print("\nüì± –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python run_bot.py")
            print("  2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram")
            print("  3. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –ü—Ä–æ–∫—Å–∏ ‚Üí –ú–æ–∏ –ø—Ä–æ–∫—Å–∏")
            print("  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏")
            print("\nüöÄ –ì–æ—Ç–æ–≤–æ!")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ TEST_PROXIES –≤ —Ñ–∞–π–ª–µ")
        
        sys.exit(0 if success else 1)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()

