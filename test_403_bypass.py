"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ 403 –æ—à–∏–±–æ–∫ Instagram.

–ó–∞–ø—É—Å–∫:
    python test_403_bypass.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞:
1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
2. API endpoints
3. –ú–æ–±–∏–ª—å–Ω—ã–µ API endpoints
4. –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Google Cache, Archive.org)
5. –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (Chrome Mobile)
6. –ü–æ–ª–Ω–∞—è —Å–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
"""

import asyncio
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '.')

from project.services.instagram_bypass import check_account_with_bypass, quick_test_bypass, InstagramBypass


async def test_individual_methods(username: str):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –æ–±—Ö–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    """
    print(f"\n{'='*80}")
    print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í –û–ë–•–û–î–ê 403 –¥–ª—è @{username}")
    print(f"{'='*80}\n")
    
    bypass = InstagramBypass()
    
    # –ú–µ—Ç–æ–¥ 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "="*80)
    print("‚ö° –ú–ï–¢–û–î 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–±–∏–ª—å–Ω—ã–µ headers + no redirects)")
    print("="*80)
    result1 = bypass.quick_instagram_check(username)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}\n")
    
    # –ú–µ—Ç–æ–¥ 2: API endpoints
    print("\n" + "="*80)
    print("üì° –ú–ï–¢–û–î 2: API endpoints")
    print("="*80)
    result2 = bypass.check_profile_multiple_endpoints(username)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}\n")
    
    # –ú–µ—Ç–æ–¥ 3: –ú–æ–±–∏–ª—å–Ω—ã–µ endpoints
    print("\n" + "="*80)
    print("üì± –ú–ï–¢–û–î 3: –ú–æ–±–∏–ª—å–Ω—ã–µ API endpoints")
    print("="*80)
    result3 = bypass.check_mobile_endpoints(username)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}\n")
    
    # –ú–µ—Ç–æ–¥ 4: –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    print("\n" + "="*80)
    print("üåê –ú–ï–¢–û–î 4: –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    print("="*80)
    result4 = bypass.check_public_sources(username)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result4}\n")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        "quick_check": result1,
        "api_endpoints": result2,
        "mobile_endpoints": result3,
        "public_sources": result4
    }
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    
    successful_methods = []
    for method, result in results.items():
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result is True else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù" if result is False else "‚ö†Ô∏è –û–®–ò–ë–ö–ê"
        print(f"{method:20s}: {status}")
        if result is not None:
            successful_methods.append(method)
    
    print(f"\n–£—Å–ø–µ—à–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: {len(successful_methods)}/{len(results)}")
    
    return results


async def test_full_bypass(username: str):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ö–æ–¥–∞ (–≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
    """
    print(f"\n{'='*80}")
    print(f"üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ –û–ë–•–û–î–ê 403 –¥–ª—è @{username}")
    print(f"{'='*80}\n")
    
    result = await check_account_with_bypass(username, max_retries=1)
    
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print(f"{'='*80}")
    print(f"Username:       {result['username']}")
    print(f"Exists:         {result['exists']}")
    print(f"Error:          {result['error']}")
    print(f"Checked via:    {result['checked_via']}")
    print(f"Methods used:   {len(result['bypass_methods_used'])} –º–µ—Ç–æ–¥–æ–≤")
    print(f"{'='*80}\n")
    
    return result


async def test_multiple_accounts():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    test_accounts = [
        "instagram",      # –î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        "cristiano",      # –î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        "thisisafakeaccountthatdoesnotexist999",  # –ù–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    ]
    
    print(f"\n{'='*80}")
    print(f"üß™ –ú–ê–°–°–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ë–•–û–î–ê 403")
    print(f"{'='*80}\n")
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {len(test_accounts)}\n")
    
    results = []
    for username in test_accounts:
        print(f"\n{'='*80}")
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{username}")
        print(f"{'='*80}")
        
        result = await check_account_with_bypass(username, max_retries=1)
        results.append(result)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['exists']}")
        print(f"{'='*80}\n")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print(f"\n{'='*80}")
    print("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*80}")
    print(f"{'Username':<40} {'Exists':<10} {'Error'}")
    print("-" * 80)
    
    for result in results:
        username = result['username']
        exists = str(result['exists'])
        error = result['error'] or "None"
        print(f"{username:<40} {exists:<10} {error}")
    
    print(f"{'='*80}\n")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    """
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                               ‚ïë
‚ïë                  üõ°Ô∏è  –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–ë–•–û–î–ê 403 –û–®–ò–ë–û–ö INSTAGRAM  üõ°Ô∏è            ‚ïë
‚ïë                                                                               ‚ïë
‚ïë  –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç 6 –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Instagram:                     ‚ïë
‚ïë                                                                               ‚ïë
‚ïë  1Ô∏è‚É£  –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (no redirects)                ‚ïë
‚ïë  2Ô∏è‚É£  API endpoints (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)                                           ‚ïë
‚ïë  3Ô∏è‚É£  –ú–æ–±–∏–ª—å–Ω—ã–µ API endpoints (Instagram App)                                ‚ïë
‚ïë  4Ô∏è‚É£  –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Google Cache, Archive.org)                        ‚ïë
‚ïë  5Ô∏è‚É£  –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (Chrome Mobile Emulation)                           ‚ïë
‚ïë  6Ô∏è‚É£  –ü–æ–ª–Ω–∞—è —Å–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä                                  ‚ïë
‚ïë                                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)")
    print("2. –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("3. –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("4. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (quick test)")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
        
        if choice == "1":
            username = input("–í–≤–µ–¥–∏—Ç–µ Instagram username: ").strip()
            await test_full_bypass(username)
            
        elif choice == "2":
            username = input("–í–≤–µ–¥–∏—Ç–µ Instagram username: ").strip()
            await test_individual_methods(username)
            
        elif choice == "3":
            await test_multiple_accounts()
            
        elif choice == "4":
            username = input("–í–≤–µ–¥–∏—Ç–µ Instagram username: ").strip()
            await quick_test_bypass(username)
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

