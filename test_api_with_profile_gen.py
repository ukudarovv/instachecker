"""
üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –®–ê–ü–ö–ò –ü–†–û–§–ò–õ–Ø INSTAGRAM (API V2)
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å design_test.py
"""

import asyncio
import os
import math
from PIL import Image, ImageDraw, ImageFont, ImageOps
from datetime import datetime
from io import BytesIO
from typing import Optional
import aiohttp

# ============================================================================
# üìê –ü–ê–†–ê–ú–ï–¢–†–´ –î–ò–ó–ê–ô–ù–ê - –ó–î–ï–°–¨ –ú–ï–ù–Ø–ô–¢–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ò –†–ê–ó–ú–ï–†–´
# –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å design_test.py
# ============================================================================
DESIGN = {
    # === –†–ê–ó–ú–ï–† –•–û–õ–°–¢–ê ===
    "canvas_width": 1000,        # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    "canvas_height": 450,       # –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è
    "background": "#000000",    # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (—á–µ—Ä–Ω—ã–π)
    
    # === –û–¢–°–¢–£–ü–´ ===
    "pad_left": 60,             # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
    "pad_top": 145,              # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
    "pad_right": 16,            # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
    
    # === –ê–í–ê–¢–ê–† ===
    "avatar_size": 180,          # –†–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ ~90px
    "avatar_border": 0,         # –¢–æ–Ω–∫–∞—è –±–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
    "avatar_x": 100,             # X –ø–æ–∑–∏—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    "avatar_y": 130,             # Y –ø–æ–∑–∏—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    
    # === USERNAME (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
    "username_x_offset": 40,    # –û—Ç—Å—Ç—É–ø username –æ—Ç –∞–≤–∞—Ç–∞—Ä–∞
    "username_y_offset": 0,     # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    "username_font_size": 35,   # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ username –∂–∏—Ä–Ω—ã–π 22-28px
    
    # === –ì–ê–õ–û–ß–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===
    "verified_size": 30,         # –†–∞–∑–º–µ—Ä –≥–∞–ª–æ—á–∫–∏ (18x18px –∫–∞–∫ –≤ Instagram)
    "verified_offset_x": 8,      # –û—Ç—Å—Ç—É–ø –æ—Ç username
    "verified_offset_y": 4,      # –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y
    "verified_inner_padding": 3, # –û—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞–ª–æ—á–∫–∏ –æ—Ç –∫—Ä–∞—è
    "verified_line_width": 2,    # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –≥–∞–ª–æ—á–∫–∏
    "verified_spacing_after": 12, # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    # === –ó–ê–ú–û–ö (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö) ===
    "lock_offset_x": 22,        # –û—Ç—Å—Ç—É–ø –∑–∞–º–∫–∞ –æ—Ç –≥–∞–ª–æ—á–∫–∏
    
    # === –ö–ù–û–ü–ö–ê FOLLOW ===
    "button_width": 76,         # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏ Follow 88-100px
    "button_height": 34,        # –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ 34px
    "button_radius": 8,         # –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
    "button_offset_right": 15,  # –û—Ç—Å—Ç—É–ø –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
    "button_offset_y": 5,       # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å username
    "button_font_size": 18,     # –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    # === –¢–†–ò –¢–û–ß–ö–ò ===
    "dots_width": 34,           # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏
    "dots_offset_x": 8,         # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–Ω–æ–ø–∫–∏ Follow
    "dots_radius": 2,           # –†–∞–¥–∏—É—Å –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
    "dots_spacing": 12,         # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    "dots_center_offset_x": 20, # –°–º–µ—â–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ—á–µ–∫
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê (posts/followers/following) ===
    "stats_x": 320,               # X –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "stats_y": 0,               # Y –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "stats_y_offset": 60,       # Y –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞ (–µ—Å–ª–∏ stats_y = 0)
    "stats_spacing": 20,        # –†–∞–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    "stats_number_size": 20,    # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Ü–∏—Ñ—Ä –ñ–ò–†–ù–´–ô
    "stats_label_size": 20,     # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥–ø–∏—Å–µ–π
    "stats_line_gap": 5,        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é
    
    # === –ò–ú–Ø –ò –ë–ò–û–ì–†–ê–§–ò–Ø ===
    "name_x": 320,                # X –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–Ω–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "name_y": 0,                # Y –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–Ω–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "name_y_offset": 40,        # Y –æ—Ç—Å—Ç—É–ø –∏–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ name_y = 0)
    "name_font_size": 20,       # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–º–µ–Ω–∏
    "bio_x": 320,                 # X –ø–æ–∑–∏—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "bio_y": 0,                 # Y –ø–æ–∑–∏—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–Ω–∏, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "bio_y_offset": 30,         # Y –æ—Ç—Å—Ç—É–ø –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ bio_y = 0)
    "bio_line_gap": 18,         # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    "bio_font_size": 20,        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    "bio_max_lines": 2,         # –ú–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    
    # === –¶–í–ï–¢–ê ===
    "color_text_primary": "#ffffff",    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–±–µ–ª—ã–π)
    "color_text_secondary": "#a8a8a8",  # –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–µ—Ä—ã–π)
    "color_button": "#0095f6",          # –ö–Ω–æ–ø–∫–∞ Follow (—Å–∏–Ω–∏–π)
    "color_button_dark": "#262626",     # –°–µ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (Requested/—Ç–æ—á–∫–∏)
    "color_verified": "#0095f6",        # –¶–≤–µ—Ç –≥–∞–ª–æ—á–∫–∏ (—Å–∏–Ω–∏–π)
    
    # === –ñ–ò–†–ù–û–°–¢–¨ –®–†–ò–§–¢–û–í ===
    "username_bold": False,             # Username –∂–∏—Ä–Ω—ã–π (True/False)
    "name_bold": False,                 # –ò–º—è –∂–∏—Ä–Ω–æ–µ (True/False)
    "stat_num_bold": False,             # –ß–∏—Å–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∏—Ä–Ω—ã–µ (True/False)
    "stat_label_bold": False,           # –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∏—Ä–Ω—ã–µ (True/False)
    "bio_bold": False,                  # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –∂–∏—Ä–Ω–∞—è (True/False)
    "button_bold": True,               # –ö–Ω–æ–ø–∫–∞ –∂–∏—Ä–Ω–∞—è (True/False)
    
    # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –û–¢–°–¢–£–ü–´ –ö–ù–û–ü–ö–ò ===
    "button_padding_top": 4,            # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_bottom": 18,         # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_left": 16,          # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_right": 16,         # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
}


# ============================================================================
# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def load_verified_badge_image(size: int) -> Optional[Image.Image]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        img = Image.new("RGBA", (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º —Å–∏–Ω–∏–π –∫—Ä—É–≥
        draw.ellipse([0, 0, size, size], fill="#0095f6")
        
        # –†–∏—Å—É–µ–º –±–µ–ª—É—é –≥–∞–ª–æ—á–∫—É
        check_size = size * 0.6
        check_x = (size - check_size) // 2
        check_y = (size - check_size) // 2
        
        # –ì–∞–ª–æ—á–∫–∞ –∏–∑ –ª–∏–Ω–∏–π
        line_width = max(2, size // 8)
        check_points = [
            (check_x + check_size * 0.2, check_y + check_size * 0.5),  # –ù–∞—á–∞–ª–æ
            (check_x + check_size * 0.45, check_y + check_size * 0.75), # –°–µ—Ä–µ–¥–∏–Ω–∞
            (check_x + check_size * 0.8, check_y + check_size * 0.25)   # –ö–æ–Ω–µ—Ü
        ]
        
        for i in range(len(check_points) - 1):
            draw.line([check_points[i], check_points[i + 1]], fill="#ffffff", width=line_width)
        
        return img
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞–ª–æ—á–∫–∏: {e}")
        return None

def format_number_with_spaces(n: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: 3959 -> '3 959'"""
    try:
        return f"{int(n):,}".replace(",", " ")
    except Exception:
        return str(n)

def format_count_posts(count: int) -> str:
    """–ü–æ—Å—Ç—ã ‚Äî –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"""
    return format_number_with_spaces(count)

def format_count_followers(count: int) -> str:
    """–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: –¥–æ 9999 —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, –ø–æ—Ç–æ–º K/M/B"""
    try:
        n = int(count)
        if n <= 9_999:
            return format_number_with_spaces(n)
        if n >= 1_000_000_000:
            return f"{n // 1_000_000_000}B"
        if n >= 1_000_000:
            return f"{n // 1_000_000}M"
        if n >= 1_000:
            return f"{n // 1_000}K"
        return str(n)
    except Exception:
        return str(count)

def format_count_following(count: int) -> str:
    """–ü–æ–¥–ø–∏—Å–∫–∏: K/M/B"""
    try:
        n = int(count)
        if n <= 9_999:
            return format_number_with_spaces(n)
        if n >= 1_000_000_000:
            return f"{n // 1_000_000_000}B"
        if n >= 1_000_000:
            return f"{n // 1_000_000}M"
        if n >= 1_000:
            return f"{n // 1_000}K"
        return str(n)
    except Exception:
        return str(count)

def load_fonts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∏–∑ DESIGN"""
    fonts = {}
    tries = [
        ("arialbd.ttf", "arial.ttf"),
        ("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
         "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"),
    ]
    
    for bold_path, reg_path in tries:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            username_font = bold_path if DESIGN["username_bold"] else reg_path
            name_font = bold_path if DESIGN["name_bold"] else reg_path
            stat_num_font = bold_path if DESIGN["stat_num_bold"] else reg_path
            stat_label_font = bold_path if DESIGN["stat_label_bold"] else reg_path
            bio_font = bold_path if DESIGN["bio_bold"] else reg_path
            button_font = bold_path if DESIGN["button_bold"] else reg_path
            
            fonts["username"] = ImageFont.truetype(username_font, DESIGN["username_font_size"])
            fonts["name"] = ImageFont.truetype(name_font, DESIGN["name_font_size"])
            fonts["stat_num"] = ImageFont.truetype(stat_num_font, DESIGN["stats_number_size"])
            fonts["stat_label"] = ImageFont.truetype(stat_label_font, DESIGN["stats_label_size"])
            fonts["bio"] = ImageFont.truetype(bio_font, DESIGN["bio_font_size"])
            fonts["button"] = ImageFont.truetype(button_font, DESIGN["button_font_size"])
            return fonts
        except:
            continue
    
    # Fallback
    default = ImageFont.load_default()
    return {
        "username": default, "name": default, "stat_num": default,
        "stat_label": default, "bio": default, "button": default
    }


async def download_profile_image(url: str) -> Image.Image:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not url or "YOUR_IMAGE" in url:
        return None
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    return Image.open(BytesIO(content)).convert("RGBA")
    except:
        pass
    return None


def make_circular_avatar(image: Image.Image, size: int, border_px: int = 4) -> Image.Image:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä —Å –æ–±–≤–æ–¥–∫–æ–π"""
    avatar = ImageOps.fit(image.convert("RGBA"), (size, size), centering=(0.5, 0.5))
    mask = Image.new("L", (size, size), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, size, size), fill=255)
    avatar.putalpha(mask)
    
    # –û–±–≤–æ–¥–∫–∞
    total = size + border_px * 2
    bg = Image.new("RGBA", (total, total), (0, 0, 0, 0))
    ImageDraw.Draw(bg).ellipse((0, 0, total, total), fill="#ffffff")
    bg.paste(avatar, (border_px, border_px), avatar)
    return bg


# ============================================================================
# üé® –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò
# ============================================================================

async def generate_instagram_profile_image_improved(
    username: str,
    full_name: str = "",
    posts: int = 0,
    followers: int = 0,
    following: int = 0,
    is_private: bool = False,
    is_verified: bool = False,
    biography: str = "",
    profile_pic_url: str = "",
    output_path: Optional[str] = None
) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ DESIGN
    """
    try:
        print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª—å @{username}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        out_dir = "generated_profiles"
        os.makedirs(out_dir, exist_ok=True)
        if not output_path:
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = os.path.join(out_dir, f"{username}_profile_{ts}.png")
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç
        W, H = DESIGN["canvas_width"], DESIGN["canvas_height"]
        canvas = Image.new("RGB", (W, H), color=DESIGN["background"])
        draw = ImageDraw.Draw(canvas)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
        fonts = load_fonts()
        
        # –ü–æ–∑–∏—Ü–∏–∏
        avatar_x = DESIGN["avatar_x"]
        avatar_y = DESIGN["avatar_y"]
        avatar_size = DESIGN["avatar_size"]
        
        # === 1. –ê–í–ê–¢–ê–† ===
        print("üñºÔ∏è  –†–∏—Å—É–µ–º –∞–≤–∞—Ç–∞—Ä...")
        profile_img = await download_profile_image(profile_pic_url)
        if profile_img:
            avatar = make_circular_avatar(profile_img, avatar_size, DESIGN["avatar_border"])
            canvas.paste(avatar, (avatar_x, avatar_y), avatar)
        else:
            # Placeholder
            tmp = Image.new("RGBA", (avatar_size, avatar_size), "#262626")
            mask = Image.new("L", (avatar_size, avatar_size), 0)
            ImageDraw.Draw(mask).ellipse((0, 0, avatar_size, avatar_size), fill=255)
            tmp.putalpha(mask)
            avatar = make_circular_avatar(tmp, avatar_size, DESIGN["avatar_border"])
            canvas.paste(avatar, (avatar_x, avatar_y), avatar)
        
        # === 2. USERNAME ===
        print("‚úçÔ∏è  –î–æ–±–∞–≤–ª—è–µ–º username...")
        text_x = avatar_x + avatar_size + DESIGN["username_x_offset"]
        username_y = avatar_y + DESIGN["username_y_offset"]
        
        draw.text((text_x, username_y), username, 
                  fill=DESIGN["color_text_primary"], font=fonts["username"])
        
        # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É username
        bbox = draw.textbbox((text_x, username_y), username, font=fonts["username"])
        username_width = bbox[2] - bbox[0]
        
        # === 3. –ì–ê–õ–û–ß–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ username) ===
        if is_verified:
            print("‚úì  –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            
            # –ü–æ–∑–∏—Ü–∏—è –≥–∞–ª–æ—á–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ username
            check_x = text_x + username_width + DESIGN["verified_offset_x"]
            check_y = username_y + DESIGN["verified_offset_y"]
            
            # –†–∞–∑–º–µ—Ä –≥–∞–ª–æ—á–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            check_size = DESIGN["verified_size"]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
            verified_image = load_verified_badge_image(check_size)
            if verified_image:
                canvas.paste(verified_image, (check_x, check_y), verified_image)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            badge_x = check_x + check_size + DESIGN["verified_spacing_after"]
        else:
            badge_x = text_x + username_width + DESIGN["verified_offset_x"]
        
        # === 4. –ó–ê–ú–û–ö ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ===
        # (–ù–µ —Ä–∏—Å—É–µ–º –∑–∞–º–æ–∫ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
        
        # === 5. –ö–ù–û–ü–ö–ê FOLLOW (–ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏) ===
        print("üîò –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É Follow...")
        btn_w = DESIGN["button_width"]
        btn_h = DESIGN["button_height"]
        btn_x = badge_x + DESIGN["button_offset_right"]
        btn_y = username_y + DESIGN["button_offset_y"]
        
        # –í—Å–µ–≥–¥–∞ —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ Follow (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º is_private)
        btn_color = DESIGN["color_button"]
        draw.rounded_rectangle([btn_x, btn_y, btn_x + btn_w, btn_y + btn_h], 
                              radius=DESIGN["button_radius"], fill=btn_color)
        
        # –í—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç "Follow"
        button_text = "Follow"
        bt_bbox = draw.textbbox((0, 0), button_text, font=fonts["button"])
        bt_w = bt_bbox[2] - bt_bbox[0]
        bt_h = bt_bbox[3] - bt_bbox[1]
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
        text_btn_x = btn_x + DESIGN["button_padding_left"]
        text_btn_y = btn_y + DESIGN["button_padding_top"]
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        available_w = btn_w - DESIGN["button_padding_left"] - DESIGN["button_padding_right"]
        available_h = btn_h - DESIGN["button_padding_top"] - DESIGN["button_padding_bottom"]
        
        if bt_w <= available_w and bt_h <= available_h:
            draw.text((text_btn_x, text_btn_y), button_text, fill="#ffffff", font=fonts["button"])
        else:
            draw.text((btn_x + (btn_w - bt_w) / 2, btn_y + (btn_h - bt_h) / 2 - 2), 
                      button_text, fill="#ffffff", font=fonts["button"])
        
        # === 6. –¢–†–ò –¢–û–ß–ö–ò (–±–µ–∑ —Ñ–æ–Ω–∞) ===
        print("‚ãØ  –†–∏—Å—É–µ–º —Ç—Ä–∏ —Ç–æ—á–∫–∏...")
        dd_x = btn_x + btn_w + DESIGN["dots_offset_x"]
        
        # –†–∏—Å—É–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –±–µ–∑ —Ñ–æ–Ω–∞
        dot_radius = DESIGN["dots_radius"]
        dot_spacing = DESIGN["dots_spacing"]
        center_x = dd_x + DESIGN["dots_center_offset_x"]
        center_y = btn_y + btn_h // 2
        
        # –¢—Ä–∏ —Ç–æ—á–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        for i in range(3):
            dot_x = center_x - dot_spacing + (i * dot_spacing)
            draw.ellipse([dot_x - dot_radius, center_y - dot_radius, 
                         dot_x + dot_radius, center_y + dot_radius], 
                        fill=DESIGN["color_text_primary"])
        
        # === 7. –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
        print("üìä –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X
        if DESIGN["stats_x"] == 0:
            stats_x = text_x  # –ü–æ–¥ username
        else:
            stats_x = DESIGN["stats_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y
        if DESIGN["stats_y"] == 0:
            stats_y = avatar_y + DESIGN["stats_y_offset"]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞
        else:
            stats_y = DESIGN["stats_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_items = [
            (posts, "posts", format_count_posts),
            (followers, "followers", format_count_followers),
            (following, "following", format_count_following)
        ]
        
        for i, (count, label, formatter) in enumerate(stats_items):
            count_str = formatter(count)
            draw.text((stats_x, stats_y), count_str, 
                      fill=DESIGN["color_text_primary"], font=fonts["stat_num"])
            
            # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —á–∏—Å–ª–∞
            count_bbox = draw.textbbox((0, 0), count_str, font=fonts["stat_num"])
            count_w = count_bbox[2] - count_bbox[0]
            
            # –ü–æ–¥–ø–∏—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
            label_x = stats_x + count_w + 4
            draw.text((label_x, stats_y + 1), label, 
                      fill=DESIGN["color_text_secondary"], font=fonts["stat_label"])
            
            # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            label_bbox = draw.textbbox((0, 0), label, font=fonts["stat_label"])
            label_w = label_bbox[2] - label_bbox[0]
            
            # –†–∞–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            stats_x = label_x + label_w + DESIGN["stats_spacing"]
        
        # === 8. –ò–ú–Ø (—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
        if full_name:
            print("üë§ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è –∏–º–µ–Ω–∏
            if DESIGN["name_x"] == 0:
                name_x = text_x  # –ü–æ–¥ username
            else:
                name_x = DESIGN["name_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è –∏–º–µ–Ω–∏
            if DESIGN["name_y"] == 0:
                name_y = stats_y + DESIGN["name_y_offset"]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            else:
                name_y = DESIGN["name_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            
            draw.text((name_x, name_y), full_name, 
                      fill=DESIGN["color_text_primary"], font=fonts["name"])
        
        # === 9. –ë–ò–û–ì–†–ê–§–ò–Ø (—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
        if biography:
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
            if DESIGN["bio_x"] == 0:
                bio_x = text_x  # –ü–æ–¥ username
            else:
                bio_x = DESIGN["bio_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
            if DESIGN["bio_y"] == 0:
                bio_y = name_y + DESIGN["bio_y_offset"] if full_name else stats_y + DESIGN["name_y_offset"]
            else:
                bio_y = DESIGN["bio_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            
            lines = biography.split("\n")[:DESIGN["bio_max_lines"]]
            for line in lines:
                draw.text((bio_x, bio_y), line, 
                          fill=DESIGN["color_text_secondary"], font=fonts["bio"])
                bio_y += DESIGN["bio_line_gap"]
        
        # === –°–û–•–†–ê–ù–ï–ù–ò–ï ===
        canvas.save(output_path, format="PNG", optimize=True)
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {W}x{H} px\n")
        
        return {"success": True, "image_path": output_path}
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"success": False, "error": str(e)}


# ============================================================================
# üöÄ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö
# ============================================================================

async def main_demo():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    result = await generate_instagram_profile_image_improved(
        username="ukudarov",
        full_name="Umar",
        posts=0,
        followers=153,
        following=109,
        is_private=False,
        is_verified=True,
        biography="–≠–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞",
        profile_pic_url="",
    )
    print(result)

if __name__ == "__main__":
    try:
        asyncio.run(main_demo())
    except KeyboardInterrupt:
        print("–ü—Ä–µ—Ä–≤–∞–Ω–æ.")
