#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API v2 —Å –ø—Ä–æ–∫—Å–∏.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'project'))

from project.services.api_v2_proxy_checker import check_account_via_api_v2_proxy
from project.models import Proxy, User, Account
from project.config import get_settings
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import date

async def test_api_v2():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API v2"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = get_settings()
    engine = create_engine(settings.db_url)
    SessionLocal = sessionmaker(bind=engine)
    
    with SessionLocal() as session:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = session.query(User).filter(User.id == 1).first()
        if not test_user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏
        proxies = session.query(Proxy).filter(
            Proxy.user_id == test_user.id,
            Proxy.is_active == True
        ).all()
        
        if not proxies:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        test_accounts = [
            "instagram",  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            "zuck",       # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            "nonexistent123456789",  # –ù–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        ]
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API v2 –¥–ª—è {len(test_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        for username in test_accounts:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{username}...")
            
            try:
                result = await check_account_via_api_v2_proxy(
                    session=session,
                    user_id=test_user.id,
                    username=username
                )
                
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è @{username}:")
                print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.get('exists')}")
                print(f"   üìõ –ò–º—è: {result.get('full_name', 'N/A')}")
                print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {result.get('followers', 0):,}")
                print(f"   üì∏ –ü–æ—Å—Ç—ã: {result.get('posts', 0)}")
                print(f"   üîó –ü—Ä–æ–∫—Å–∏: {result.get('proxy_used', 'N/A')}")
                print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {result.get('screenshot_path', 'N/A')}")
                print(f"   ‚ùó –û—à–∏–±–∫–∞: {result.get('error', 'N/A')}")
                print(f"   üéØ –ú–µ—Ç–æ–¥: {result.get('checked_via', 'N/A')}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ @{username}: {e}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_api_v2())
