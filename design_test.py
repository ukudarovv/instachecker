"""
üé® –¢–ï–°–¢–û–í–´–ô –§–ê–ô–õ –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –î–ò–ó–ê–ô–ù–ê –ü–†–û–§–ò–õ–Ø INSTAGRAM
–ë—ã—Å—Ç—Ä–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
"""

import asyncio
import math
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import aiohttp
from datetime import datetime
import os
from typing import Optional
import argparse

# ============================================================================
# üéØ –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–•
# ============================================================================
# data_source: "test" ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TEST_DATA; "api" ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ proxy
DATA_SOURCE = "test"  # "api" | "test"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API-—Ä–µ–∂–∏–º–∞
API_USERNAME = "instagram"  # –∫–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–∏ DATA_SOURCE="api"
PROXY_URL = ""  # –ø—Ä–∏–º–µ—Ä: "http://user:pass@ip:port" –∏–ª–∏ "http://ip:port"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ DATA_SOURCE="test"
TEST_DATA = {
    "username": "ukudarov",
    "full_name": "Umar",
    "posts": 0,
    "followers": 153,
    "following": 109,
    "is_verified": True,        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω?
    "is_private": False,        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç?
    "biography": "–≠–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–π—Ç–æ–≤",
    # –í—Å—Ç–∞–≤—å—Ç–µ URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º:
    "profile_pic_url": "https://scontent-mrs2-1.cdninstagram.com/v/t51.2885-19/464760996_1254146839119862_3605321457742435801_n.png?stp=dst-jpg_e0_s150x150_tt6&efg=eyJ2ZW5jb2RlX3RhZyI6InByb2ZpbGVfcGljLmRqYW5nby4xNTAuYzIifQ&_nc_ht=scontent-mrs2-1.cdninstagram.com&_nc_cat=1&_nc_oc=Q6cZ2QG7K4DSRkrpLAguLZAQKs28dy9P9CQHl4OmFm-SIacLYE2Z_aaodmsqdw7WahY-R955lUkPlOZPlpqP7J2Lbnoe&_nc_ohc=yiYqVz4MkooQ7kNvwF1Mz7D&_nc_gid=0cRTbEKurKyrTyahkYli2A&edm=ALlQn9MBAAAA&ccb=7-5&ig_cache_key=YW5vbnltb3VzX3Byb2ZpbGVfcGlj.3-ccb7-5&oh=00_AferQg2_du6xaXxC3JUueUPA2zkR9zXyPN5AuBxoe8jIpw&oe=690702A8&_nc_sid=e7f676"
}

# ============================================================================
# üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Instagram web_profile_info c proxy
# ============================================================================
async def fetch_profile_via_proxy(username: str, proxy: Optional[str] = None, timeout_sec: int = 20) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏: username, full_name, posts, followers, following,
    is_verified, is_private, biography, profile_pic_url. –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    url = f"https://www.instagram.com/api/v1/users/web_profile_info/?username={username}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.9",
        "X-IG-App-ID": "936619743392459",
    }
    try:
        timeout = aiohttp.ClientTimeout(total=timeout_sec)
        async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
            async with session.get(url, proxy=proxy) as resp:
                if resp.status != 200:
                    return {}
                data = await resp.json()
                user = data.get("data", {}).get("user", {})
                if not user:
                    return {}
                return {
                    "username": user.get("username") or username,
                    "full_name": user.get("full_name") or "",
                    "posts": (user.get("edge_owner_to_timeline_media", {}) or {}).get("count", 0),
                    "followers": (user.get("edge_followed_by", {}) or {}).get("count", 0),
                    "following": (user.get("edge_follow", {}) or {}).get("count", 0),
                    "is_verified": bool(user.get("is_verified")),
                    "is_private": bool(user.get("is_private")),
                    "biography": user.get("biography") or "",
                    "profile_pic_url": user.get("profile_pic_url_hd") or user.get("profile_pic_url") or "",
                }
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ proxy: {e}")
        return {}

# ============================================================================
# üìê –ü–ê–†–ê–ú–ï–¢–†–´ –î–ò–ó–ê–ô–ù–ê - –ó–î–ï–°–¨ –ú–ï–ù–Ø–ô–¢–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ò –†–ê–ó–ú–ï–†–´
# ============================================================================
DESIGN = {
    # === –†–ê–ó–ú–ï–† –•–û–õ–°–¢–ê ===
    "canvas_width": 1000,        # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    "canvas_height": 450,       # –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è
    "background": "#000000",    # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ (—á–µ—Ä–Ω—ã–π)
    
    # === –û–¢–°–¢–£–ü–´ ===
    "pad_left": 60,             # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
    "pad_top": 145,              # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
    "pad_right": 16,            # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
    
    # === –ê–í–ê–¢–ê–† ===
    "avatar_size": 180,          # –†–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞ ~90px
    "avatar_border": 0,         # –¢–æ–Ω–∫–∞—è –±–µ–ª–∞—è –æ–±–≤–æ–¥–∫–∞
    "avatar_x": 100,             # X –ø–æ–∑–∏—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    "avatar_y": 130,             # Y –ø–æ–∑–∏—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    
    # === USERNAME (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
    "username_x_offset": 40,    # –û—Ç—Å—Ç—É–ø username –æ—Ç –∞–≤–∞—Ç–∞—Ä–∞
    "username_y_offset": 0,     # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    "username_font_size": 35,   # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ username –∂–∏—Ä–Ω—ã–π 22-28px
    
    # === –ì–ê–õ–û–ß–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ===
    "verified_size": 30,         # –†–∞–∑–º–µ—Ä –≥–∞–ª–æ—á–∫–∏ (18x18px –∫–∞–∫ –≤ Instagram)
    "verified_offset_x": 8,      # –û—Ç—Å—Ç—É–ø –æ—Ç username
    "verified_offset_y": 4,      # –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y
    "verified_inner_padding": 3, # –û—Ç—Å—Ç—É–ø –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞–ª–æ—á–∫–∏ –æ—Ç –∫—Ä–∞—è
    "verified_line_width": 2,    # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –≥–∞–ª–æ—á–∫–∏
    "verified_spacing_after": 12, # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    # === –ó–ê–ú–û–ö (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö) ===
    "lock_offset_x": 22,        # –û—Ç—Å—Ç—É–ø –∑–∞–º–∫–∞ –æ—Ç –≥–∞–ª–æ—á–∫–∏
    
    # === –ö–ù–û–ü–ö–ê FOLLOW ===
    "button_width": 76,         # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏ Follow 88-100px
    "button_height": 34,        # –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏ 34px
    "button_radius": 8,         # –†–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
    "button_offset_right": 15,  # –û—Ç—Å—Ç—É–ø –∫–Ω–æ–ø–∫–∏ –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
    "button_offset_y": 5,       # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å username
    "button_font_size": 18,     # –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    # === –¢–†–ò –¢–û–ß–ö–ò ===
    "dots_width": 34,           # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ—á–∫–∞–º–∏
    "dots_offset_x": 8,         # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–Ω–æ–ø–∫–∏ Follow
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê (posts/followers/following) ===
    "stats_x": 320,               # X –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "stats_y": 0,               # Y –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "stats_y_offset": 60,       # Y –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞ (–µ—Å–ª–∏ stats_y = 0)
    "stats_spacing": 20,        # –†–∞–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    "stats_number_size": 20,    # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Ü–∏—Ñ—Ä –ñ–ò–†–ù–´–ô
    "stats_label_size": 20,     # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥–ø–∏—Å–µ–π
    "stats_line_gap": 5,        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é
    
    # === –ò–ú–Ø –ò –ë–ò–û–ì–†–ê–§–ò–Ø ===
    "name_x": 320,                # X –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–Ω–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "name_y": 0,                # Y –ø–æ–∑–∏—Ü–∏—è –∏–º–µ–Ω–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "name_y_offset": 40,        # Y –æ—Ç—Å—Ç—É–ø –∏–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ name_y = 0)
    "name_font_size": 20,       # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–º–µ–Ω–∏
    "bio_x": 320,                 # X –ø–æ–∑–∏—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (0 = –ø–æ–¥ username, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "bio_y": 0,                 # Y –ø–æ–∑–∏—Ü–∏—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ (0 = –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–Ω–∏, –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    "bio_y_offset": 30,         # Y –æ—Ç—Å—Ç—É–ø –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ bio_y = 0)
    "bio_line_gap": 18,         # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    "bio_font_size": 20,        # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    "bio_max_lines": 2,         # –ú–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
    
    # === –¶–í–ï–¢–ê ===
    "color_text_primary": "#ffffff",    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–±–µ–ª—ã–π)
    "color_text_secondary": "#a8a8a8",  # –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–µ—Ä—ã–π)
    "color_button": "#0095f6",          # –ö–Ω–æ–ø–∫–∞ Follow (—Å–∏–Ω–∏–π)
    "color_button_dark": "#262626",     # –°–µ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ (Requested/—Ç–æ—á–∫–∏)
    "color_verified": "#0095f6",        # –¶–≤–µ—Ç –≥–∞–ª–æ—á–∫–∏ (—Å–∏–Ω–∏–π)
    
    # === –ñ–ò–†–ù–û–°–¢–¨ –®–†–ò–§–¢–û–í ===
    "username_bold": False,             # Username –∂–∏—Ä–Ω—ã–π (True/False)
    "name_bold": False,                 # –ò–º—è –∂–∏—Ä–Ω–æ–µ (True/False)
    "stat_num_bold": False,             # –ß–∏—Å–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∏—Ä–Ω—ã–µ (True/False)
    "stat_label_bold": False,           # –ü–æ–¥–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∏—Ä–Ω—ã–µ (True/False)
    "bio_bold": False,                  # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –∂–∏—Ä–Ω–∞—è (True/False)
    "button_bold": True,               # –ö–Ω–æ–ø–∫–∞ –∂–∏—Ä–Ω–∞—è (True/False)
    
    # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –û–¢–°–¢–£–ü–´ –ö–ù–û–ü–ö–ò ===
    "button_padding_top": 4,            # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_bottom": 18,         # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_left": 16,          # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
    "button_padding_right": 16,         # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
}


# ============================================================================
# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def load_verified_badge_image(size: int) -> Optional[Image.Image]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        img = Image.new("RGBA", (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º —Å–∏–Ω–∏–π –∫—Ä—É–≥
        draw.ellipse([0, 0, size, size], fill="#0095f6")
        
        # –†–∏—Å—É–µ–º –±–µ–ª—É—é –≥–∞–ª–æ—á–∫—É
        check_size = size * 0.6
        check_x = (size - check_size) // 2
        check_y = (size - check_size) // 2
        
        # –ì–∞–ª–æ—á–∫–∞ –∏–∑ –ª–∏–Ω–∏–π
        line_width = max(2, size // 8)
        check_points = [
            (check_x + check_size * 0.2, check_y + check_size * 0.5),  # –ù–∞—á–∞–ª–æ
            (check_x + check_size * 0.45, check_y + check_size * 0.75), # –°–µ—Ä–µ–¥–∏–Ω–∞
            (check_x + check_size * 0.8, check_y + check_size * 0.25)   # –ö–æ–Ω–µ—Ü
        ]
        
        for i in range(len(check_points) - 1):
            draw.line([check_points[i], check_points[i + 1]], fill="#ffffff", width=line_width)
        
        return img
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞–ª–æ—á–∫–∏: {e}")
        return None

def draw_instagram_verified_badge(draw, x: int, y: int, size: int, color: str):
    """–†–∏—Å—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é –≥–∞–ª–æ—á–∫—É Instagram —Å –∑—É–±—á–∞—Ç—ã–º–∏ –∫—Ä–∞—è–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –∑—É–±—á–∞—Ç—ã–π –∫–æ–Ω—Ç—É—Ä –∫–∞–∫ –≤ Instagram
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∑—É–±—á–∞—Ç–æ–≥–æ –∫—Ä—É–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    center_x = x + size // 2
    center_y = y + size // 2
    radius = size // 2
    
    # –°–æ–∑–¥–∞–µ–º –∑—É–±—á–∞—Ç—ã–π –∫–æ–Ω—Ç—É—Ä
    points = []
    num_teeth = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—É–±—Ü–æ–≤
    
    for i in range(num_teeth * 2):
        angle = (i * 180) / (num_teeth * 2)  # 0 to 180 degrees
        if i % 2 == 0:
            # –í–Ω–µ—à–Ω–∏–π –∑—É–±
            r = radius
        else:
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑—É–±
            r = radius * 0.7
        
        px = center_x + r * math.cos(math.radians(angle))
        py = center_y + r * math.sin(math.radians(angle))
        points.append((px, py))
    
    # –†–∏—Å—É–µ–º –∑—É–±—á–∞—Ç—ã–π –∫—Ä—É–≥
    if len(points) > 2:
        draw.polygon(points, fill=color)
    
    # –†–∏—Å—É–µ–º –±–µ–ª—É—é –≥–∞–ª–æ—á–∫—É –≤–Ω—É—Ç—Ä–∏
    check_size = size * 0.4
    check_x = center_x - check_size // 2
    check_y = center_y - check_size // 2
    
    # –ì–∞–ª–æ—á–∫–∞ –∏–∑ –ª–∏–Ω–∏–π
    line_width = max(2, size // 10)
    check_points = [
        (check_x + check_size * 0.2, check_y + check_size * 0.5),  # –ù–∞—á–∞–ª–æ
        (check_x + check_size * 0.45, check_y + check_size * 0.75), # –°–µ—Ä–µ–¥–∏–Ω–∞
        (check_x + check_size * 0.8, check_y + check_size * 0.25)   # –ö–æ–Ω–µ—Ü
    ]
    
    for i in range(len(check_points) - 1):
        draw.line([check_points[i], check_points[i + 1]], fill="#ffffff", width=line_width)

def format_count_words(value: int) -> str:
    """667,223,696 -> '667M'; 25,430 -> '25K'; <1000 Í∑∏ÎåÄÎ°ú."""
    try:
        n = int(value)
    except Exception:
        return str(value)
    if n >= 1_000_000_000:
        return f"{n // 1_000_000_000}B"
    if n >= 1_000_000:
        return f"{n // 1_000_000}M"
    if n >= 1_000:
        return f"{n // 1_000}K"
    return str(n)

def format_int_spaced(value: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–æ–º –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á: 3959 -> '3 959'."""
    try:
        n = int(value)
    except Exception:
        return str(value)
    return f"{n:,}".replace(",", " ")

def load_fonts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∏–∑ DESIGN"""
    fonts = {}
    tries = [
        ("arialbd.ttf", "arial.ttf"),
        ("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
         "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"),
    ]
    
    for bold_path, reg_path in tries:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
            username_font = bold_path if DESIGN["username_bold"] else reg_path
            name_font = bold_path if DESIGN["name_bold"] else reg_path
            stat_num_font = bold_path if DESIGN["stat_num_bold"] else reg_path
            stat_label_font = bold_path if DESIGN["stat_label_bold"] else reg_path
            bio_font = bold_path if DESIGN["bio_bold"] else reg_path
            button_font = bold_path if DESIGN["button_bold"] else reg_path
            
            fonts["username"] = ImageFont.truetype(username_font, DESIGN["username_font_size"])
            fonts["name"] = ImageFont.truetype(name_font, DESIGN["name_font_size"])
            fonts["stat_num"] = ImageFont.truetype(stat_num_font, DESIGN["stats_number_size"])
            fonts["stat_label"] = ImageFont.truetype(stat_label_font, DESIGN["stats_label_size"])
            fonts["bio"] = ImageFont.truetype(bio_font, DESIGN["bio_font_size"])
            fonts["button"] = ImageFont.truetype(button_font, DESIGN["button_font_size"])
            return fonts
        except:
            continue
    
    # Fallback
    default = ImageFont.load_default()
    return {
        "username": default, "name": default, "stat_num": default,
        "stat_label": default, "bio": default, "button": default
    }


async def download_profile_image(url: str) -> Image.Image:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    if not url or "YOUR_IMAGE" in url:
        return None
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                if resp.status == 200:
                    content = await resp.read()
                    return Image.open(BytesIO(content)).convert("RGBA")
    except:
        pass
    return None


def make_circular_avatar(image: Image.Image, size: int, border_px: int = 4) -> Image.Image:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä —Å –æ–±–≤–æ–¥–∫–æ–π"""
    avatar = ImageOps.fit(image.convert("RGBA"), (size, size), centering=(0.5, 0.5))
    mask = Image.new("L", (size, size), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, size, size), fill=255)
    avatar.putalpha(mask)
    
    # –û–±–≤–æ–¥–∫–∞
    total = size + border_px * 2
    bg = Image.new("RGBA", (total, total), (0, 0, 0, 0))
    ImageDraw.Draw(bg).ellipse((0, 0, total, total), fill="#ffffff")
    bg.paste(avatar, (border_px, border_px), avatar)
    return bg


def format_count(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞: 38.5k, 1.2M"""
    if count >= 1_000_000:
        val = count / 1_000_000
        s = f"{val:.1f}M"
    elif count >= 1000:
        val = count / 1000
        s = f"{val:.1f}k"
        if s.endswith(".0k"):
            s = s.replace(".0k", "k")
    else:
        s = str(count)
    return s


# ============================================================================
# üé® –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò
# ============================================================================

async def generate_test_profile():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—ë—Ç—Å—è DATA_SOURCE."""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
    data = TEST_DATA
    if DATA_SOURCE == "api":
        print("üåê –†–µ–∂–∏–º API: –∑–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ proxy...")
        fetched = await fetch_profile_via_proxy(API_USERNAME, PROXY_URL or None)
        if fetched:
            data = {
                "username": fetched.get("username") or TEST_DATA["username"],
                "full_name": fetched.get("full_name", ""),
                "posts": fetched.get("posts", 0),
                "followers": fetched.get("followers", 0),
                "following": fetched.get("following", 0),
                "is_verified": fetched.get("is_verified", False),
                "is_private": fetched.get("is_private", False),
                "biography": fetched.get("biography", ""),
                "profile_pic_url": fetched.get("profile_pic_url", ""),
            }
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É—é TEST_DATA")
            data = TEST_DATA
    
    print("\n" + "="*70)
    print("üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–û–ì–û –ü–†–û–§–ò–õ–Ø")
    print("="*70)
    print(f"\nüìä –î–∞–Ω–Ω—ã–µ:")
    print(f"   Username: @{data['username']}")
    print(f"   –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {data['followers']:,}")
    print(f"   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if data['is_verified'] else '–ù–µ—Ç'}")
    print(f"\nüìê –†–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞: {DESIGN['canvas_width']}x{DESIGN['canvas_height']} px\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç
    W, H = DESIGN["canvas_width"], DESIGN["canvas_height"]
    canvas = Image.new("RGB", (W, H), color=DESIGN["background"])
    draw = ImageDraw.Draw(canvas)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    fonts = load_fonts()
    
    # –ü–æ–∑–∏—Ü–∏–∏
    avatar_x = DESIGN["avatar_x"]
    avatar_y = DESIGN["avatar_y"]
    avatar_size = DESIGN["avatar_size"]
    
    # === 1. –ê–í–ê–¢–ê–† ===
    print("üñºÔ∏è  –†–∏—Å—É–µ–º –∞–≤–∞—Ç–∞—Ä...")
    profile_img = await download_profile_image(data["profile_pic_url"])
    if profile_img:
        avatar = make_circular_avatar(profile_img, avatar_size, DESIGN["avatar_border"])
        canvas.paste(avatar, (avatar_x, avatar_y), avatar)
    else:
        # Placeholder
        tmp = Image.new("RGBA", (avatar_size, avatar_size), "#262626")
        mask = Image.new("L", (avatar_size, avatar_size), 0)
        ImageDraw.Draw(mask).ellipse((0, 0, avatar_size, avatar_size), fill=255)
        tmp.putalpha(mask)
        avatar = make_circular_avatar(tmp, avatar_size, DESIGN["avatar_border"])
        canvas.paste(avatar, (avatar_x, avatar_y), avatar)
    
    # === 2. USERNAME ===
    print("‚úçÔ∏è  –î–æ–±–∞–≤–ª—è–µ–º username...")
    text_x = avatar_x + avatar_size + DESIGN["username_x_offset"]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º username_y_offset –∏–∑ DESIGN
    bbox_temp = draw.textbbox((0, 0), data["username"], font=fonts["username"])
    username_h = bbox_temp[3] - bbox_temp[1]
    username_y = avatar_y + DESIGN["username_y_offset"]
    
    draw.text((text_x, username_y), data["username"], 
              fill=DESIGN["color_text_primary"], font=fonts["username"])
    
    # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É username
    bbox = draw.textbbox((text_x, username_y), data["username"], font=fonts["username"])
    username_width = bbox[2] - bbox[0]
    
    # === 3. –ì–ê–õ–û–ß–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ username) ===
    if data["is_verified"]:
        print("‚úì  –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # –ü–æ–∑–∏—Ü–∏—è –≥–∞–ª–æ—á–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ username
        check_x = text_x + username_width + DESIGN["verified_offset_x"]
        check_y = username_y + DESIGN["verified_offset_y"]
        
        # –†–∞–∑–º–µ—Ä –≥–∞–ª–æ—á–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        check_size = DESIGN["verified_size"]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
        verified_image = load_verified_badge_image(check_size)
        if verified_image:
            canvas.paste(verified_image, (check_x, check_y), verified_image)
        else:
            # Fallback - —Ä–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–∞–ª–æ—á–∫—É
            draw_instagram_verified_badge(draw, check_x, check_y, check_size, DESIGN["color_verified"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        badge_x = check_x + check_size + DESIGN["verified_spacing_after"]
    else:
        badge_x = text_x + username_width + DESIGN["verified_offset_x"]
    
    # === 4. –ó–ê–ú–û–ö ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ===
    if False:
        pass
    
    # === 5. –ö–ù–û–ü–ö–ê FOLLOW (–ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏/–∑–∞–º–∫–∞) ===
    print("üîò –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É Follow...")
    btn_w = DESIGN["button_width"]
    btn_h = DESIGN["button_height"]
    # –ü–æ–∑–∏—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏/–∑–∞–º–∫–∞
    btn_x = badge_x + DESIGN["button_offset_right"]  # –æ—Ç—Å—Ç—É–ø –æ—Ç –≥–∞–ª–æ—á–∫–∏/–∑–∞–º–∫–∞
    btn_y = username_y + DESIGN["button_offset_y"]  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç username
    
    # –í—Å–µ–≥–¥–∞ —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ Follow (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º is_private)
    btn_color = DESIGN["color_button"]
    draw.rounded_rectangle([btn_x, btn_y, btn_x + btn_w, btn_y + btn_h], 
                          radius=DESIGN["button_radius"], fill=btn_color)
    
    # –í—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç "Follow"
    button_text = "Follow"
    bt_bbox = draw.textbbox((0, 0), button_text, font=fonts["button"])
    bt_w = bt_bbox[2] - bt_bbox[0]
    bt_h = bt_bbox[3] - bt_bbox[1]
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
    text_x = btn_x + DESIGN["button_padding_left"]
    text_y = btn_y + DESIGN["button_padding_top"]
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
    available_w = btn_w - DESIGN["button_padding_left"] - DESIGN["button_padding_right"]
    available_h = btn_h - DESIGN["button_padding_top"] - DESIGN["button_padding_bottom"]
    
    if bt_w <= available_w and bt_h <= available_h:
        # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å—Ç—É–ø—ã
        draw.text((text_x, text_y), button_text, fill="#ffffff", font=fonts["button"])
    else:
        # –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        draw.text((btn_x + (btn_w - bt_w) / 2, btn_y + (btn_h - bt_h) / 2 - 2), 
                  button_text, fill="#ffffff", font=fonts["button"])
    
    # === 6. –¢–†–ò –¢–û–ß–ö–ò (–±–µ–∑ —Ñ–æ–Ω–∞) ===
    print("‚ãØ  –†–∏—Å—É–µ–º —Ç—Ä–∏ —Ç–æ—á–∫–∏...")
    dd_x = btn_x + btn_w + DESIGN["dots_offset_x"]
    
    # –†–∏—Å—É–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –±–µ–∑ —Ñ–æ–Ω–∞
    dot_radius = 2  # –ú–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä
    dot_spacing = 12  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ 15px –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    center_x = dd_x + 20  # –¶–µ–Ω—Ç—Ä –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–æ—á–µ–∫
    center_y = btn_y + btn_h // 2
    
    # –¢—Ä–∏ —Ç–æ—á–∫–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    for i in range(3):
        dot_x = center_x - dot_spacing + (i * dot_spacing)
        draw.ellipse([dot_x - dot_radius, center_y - dot_radius, 
                     dot_x + dot_radius, center_y + dot_radius], 
                    fill=DESIGN["color_text_primary"])
    
    # === 7. –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
    print("üìä –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X
    if DESIGN["stats_x"] == 0:
        stats_x = text_x  # –ü–æ–¥ username
    else:
        stats_x = DESIGN["stats_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y
    if DESIGN["stats_y"] == 0:
        stats_y = avatar_y + DESIGN["stats_y_offset"]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–≤–∞—Ç–∞—Ä–∞
    else:
        stats_y = DESIGN["stats_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_items = [
        (data['posts'], "posts"),
        (data['followers'], "followers"),
        (data['following'], "following")
    ]
    for i, (count, label) in enumerate(stats_items):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
        # - posts: –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (k/M)
        # - followers: –µ—Å–ª–∏ <= 9999 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å; –∏–Ω–∞—á–µ —Å–ª–æ–≤–∞ (million/thousand)
        # - following: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ (–∫–∞–∫ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —á–∏—Å–ª–∞)
        if label == "posts":
            count_str = format_int_spaced(count)
        elif label == "followers":
            count_str = format_int_spaced(count) if count <= 9_999 else format_count_words(count)
        else:
            # following: –µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ ‚Äî —Å –ø—Ä–æ–±–µ–ª–∞–º–∏; –∏–Ω–∞—á–µ K/M/B
            count_str = format_int_spaced(count) if count <= 9_999 else format_count_words(count)
        draw.text((stats_x, stats_y), count_str, 
                  fill=DESIGN["color_text_primary"], font=fonts["stat_num"])
        
        # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —á–∏—Å–ª–∞
        count_bbox = draw.textbbox((0, 0), count_str, font=fonts["stat_num"])
        count_w = count_bbox[2] - count_bbox[0]
        
        # –ü–æ–¥–ø–∏—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
        label_x = stats_x + count_w + 4
        draw.text((label_x, stats_y + 1), label, 
                  fill=DESIGN["color_text_secondary"], font=fonts["stat_label"])
        
        # –ò–∑–º–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        label_bbox = draw.textbbox((0, 0), label, font=fonts["stat_label"])
        label_w = label_bbox[2] - label_bbox[0]
        
        # –†–∞–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        stats_x = label_x + label_w + DESIGN["stats_spacing"]
    
    # === 8. –ò–ú–Ø (—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
    if data["full_name"]:
        print("üë§ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è –∏–º–µ–Ω–∏
        if DESIGN["name_x"] == 0:
            name_x = text_x  # –ü–æ–¥ username
        else:
            name_x = DESIGN["name_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è –∏–º–µ–Ω–∏
        if DESIGN["name_y"] == 0:
            name_y = stats_y + DESIGN["name_y_offset"]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        else:
            name_y = DESIGN["name_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        draw.text((name_x, name_y), data["full_name"], 
                  fill=DESIGN["color_text_primary"], font=fonts["name"])
    
    # === 9. –ë–ò–û–ì–†–ê–§–ò–Ø (—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏) ===
    if data["biography"]:
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
        if DESIGN["bio_x"] == 0:
            bio_x = text_x  # –ü–æ–¥ username
        else:
            bio_x = DESIGN["bio_x"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é Y –¥–ª—è –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
        if DESIGN["bio_y"] == 0:
            bio_y = name_y + DESIGN["bio_y_offset"]  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–Ω–∏
        else:
            bio_y = DESIGN["bio_y"]  # –¢–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        lines = data["biography"].split("\n")[:DESIGN["bio_max_lines"]]
        for line in lines:
            draw.text((bio_x, bio_y), line, 
                      fill=DESIGN["color_text_secondary"], font=fonts["bio"])
            bio_y += DESIGN["bio_line_gap"]
    
    # === –°–û–•–†–ê–ù–ï–ù–ò–ï ===
    os.makedirs("design_tests", exist_ok=True)
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_path = f"design_tests/test_{ts}.png"
    canvas.save(output_path, format="PNG", optimize=True)
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {W}x{H} px")
    print("="*70 + "\n")
    
    return output_path


# ============================================================================
# üöÄ –ó–ê–ü–£–°–ö
# ============================================================================

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Instagram profile header generator")
    parser.add_argument("--username", dest="username", help="Username to fetch via API")
    parser.add_argument("--proxy", dest="proxy", help="Proxy string like http://user:pass@host:port")
    parser.add_argument("--api", dest="api", action="store_true", help="Force API data source")
    args = parser.parse_args()

    # Configure from CLI
    if args.username:
        API_USERNAME = args.username
        DATA_SOURCE = "api"
    if args.proxy:
        PROXY_URL = args.proxy
    if args.api:
        DATA_SOURCE = "api"

    print("\n" + "üé®"*35)
    print(" "*15 + "–î–ò–ó–ê–ô–ù –¢–ï–°–¢–ï–†")
    print("üé®"*35)
    if DATA_SOURCE == "api":
        masked = PROXY_URL
        if masked and "@" in masked:
            creds, host = masked.split("@", 1)
            if ":" in creds:
                u, p = creds.split(":", 1)
                masked = f"http://{u}:******@{host}"
        print(f"\nüåê –ò—Å—Ç–æ—á–Ω–∏–∫: API | username={API_USERNAME} | proxy={masked or 'none'}")
    else:
        print("\nüîß –ò—Å—Ç–æ—á–Ω–∏–∫: TEST_DATA")

    asyncio.run(generate_test_profile())

