#!/usr/bin/env python3
"""Quick proxy checker - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –±–æ—Ç."""

import asyncio
import sys
from aiohttp import ClientSession, ClientTimeout
from aiohttp_socks import ProxyConnector


async def check_proxy(proxy_url: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    
    Args:
        proxy_url: URL –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ scheme://[user:pass@]host:port
        
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    result = {
        'url': proxy_url,
        'works': False,
        'ip': None,
        'response_time': None,
        'error': None
    }
    
    print(f"\n{'='*60}")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_url}")
    print(f"{'='*60}")
    
    try:
        # Create connector
        connector = ProxyConnector.from_url(proxy_url)
        print(f"‚úÖ Connector —Å–æ–∑–¥–∞–Ω")
        
        # Test connection
        timeout = ClientTimeout(total=15)
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
        
        import time
        start_time = time.time()
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ http://httpbin.org/ip...")
        
        async with ClientSession(connector=connector, timeout=timeout, headers=headers) as sess:
            async with sess.get("http://httpbin.org/ip") as resp:
                response_time = time.time() - start_time
                result['response_time'] = response_time
                
                print(f"üìä HTTP Status: {resp.status}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}s")
                
                if resp.status == 200:
                    data = await resp.json()
                    proxy_ip = data.get('origin', 'Unknown')
                    result['ip'] = proxy_ip
                    result['works'] = True
                    
                    print(f"‚úÖ –ü–†–û–ö–°–ò –†–ê–ë–û–¢–ê–ï–¢!")
                    print(f"üåê IP –ø—Ä–æ–∫—Å–∏: {proxy_ip}")
                    return result
                elif resp.status == 407:
                    result['error'] = "407 Proxy Authentication Required"
                    print(f"‚ùå –û—à–∏–±–∫–∞ 407: –ù–µ–≤–µ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
                else:
                    result['error'] = f"HTTP {resp.status}"
                    print(f"‚ùå –û—à–∏–±–∫–∞: HTTP {resp.status}")
                
    except asyncio.TimeoutError:
        result['error'] = "Timeout"
        print(f"‚ùå Timeout: –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        print(f"üí° –ü—Ä–æ–∫—Å–∏ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        result['error'] = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        if "407" in str(e):
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏")
        elif "Connection refused" in str(e):
            print(f"üí° –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        elif "getaddrinfo failed" in str(e):
            print(f"üí° –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä (–Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å)")
        elif "Connection timeout" in str(e):
            print(f"üí° –ü—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
    
    return result


async def check_multiple_proxies(proxy_list: list) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏."""
    results = []
    
    for i, proxy_url in enumerate(proxy_list, 1):
        print(f"\n\nüìã –ü—Ä–æ–∫—Å–∏ {i}/{len(proxy_list)}")
        result = await check_proxy(proxy_url)
        results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        if i < len(proxy_list):
            await asyncio.sleep(1)
    
    return results


def print_summary(results: list):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–∫—Å–∏."""
    print(f"\n\n{'='*60}")
    print(f"üìä –°–í–û–î–ö–ê")
    print(f"{'='*60}\n")
    
    working = [r for r in results if r['works']]
    failed = [r for r in results if not r['works']]
    
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö: {len(working)}/{len(results)}")
    print(f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {len(failed)}/{len(results)}")
    
    if working:
        print(f"\nüéâ –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏:")
        for r in working:
            print(f"  ‚úÖ {r['url']}")
            print(f"     IP: {r['ip']}")
            print(f"     –í—Ä–µ–º—è: {r['response_time']:.2f}s")
    
    if failed:
        print(f"\n‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç:")
        for r in failed:
            print(f"  ‚ùå {r['url']}")
            print(f"     –ü—Ä–∏—á–∏–Ω–∞: {r['error']}")
    
    print(f"\n{'='*60}")


async def main():
    """Main function."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è InstaChecker Bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ü—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        proxies = sys.argv[1:]
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("\n–í–≤–µ–¥–∏—Ç–µ proxy URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ: scheme://[user:pass@]host:port")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  http://proxy.com:8080")
        print("  http://user:pass@proxy.com:8080")
        print("  socks5://user:pass@1.2.3.4:1080")
        print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.")
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –Ω–∞ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.\n")
        
        proxies = []
        while True:
            proxy = input(f"–ü—Ä–æ–∫—Å–∏ {len(proxies)+1} (–∏–ª–∏ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞): ").strip()
            if not proxy:
                break
            proxies.append(proxy)
        
        if not proxies:
            print("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
    results = await check_multiple_proxies(proxies)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    if len(results) > 1:
        print_summary(results)
    
    # –°–æ–≤–µ—Ç—ã
    print("\nüí° –°–û–í–ï–¢–´:")
    print("  1. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –≤ –±–æ—Ç")
    print("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
    print("  3. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏")
    print("  4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –±–æ—Ç")
    print("\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: PROXY_TEST_REPORT.md")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
