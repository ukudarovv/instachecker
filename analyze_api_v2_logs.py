#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ä–µ–∂–∏–º–∞ api-v2 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'project'))

from project.services.api_v2_proxy_checker import check_account_via_api_v2_proxy
from project.models import User, Account
from project.config import get_settings
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

async def analyze_api_v2_logs():
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ä–µ–∂–∏–º–∞ api-v2"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    settings = get_settings()
    engine = create_engine(settings.db_url)
    SessionLocal = sessionmaker(bind=engine)
    
    with SessionLocal() as session:
        print("üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Ä–µ–∂–∏–º–∞ api-v2")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user = session.query(User).filter(User.id == 1).first()
        if not test_user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.id}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        test_cases = [
            ("ukudarov", "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç"),
            ("instagram", "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Instagram"),
            ("nonexistent123456789", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç"),
            ("zuck", "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç (Mark Zuckerberg)"),
            ("invalid_user_12345", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç")
        ]
        
        for username, description in test_cases:
            print(f"\nüìä –¢–µ—Å—Ç: @{username} ({description})")
            print("-" * 40)
            
            try:
                result = await check_account_via_api_v2_proxy(
                    session=session,
                    user_id=test_user.id,
                    username=username
                )
                
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {result.get('exists')}")
                print(f"   üìõ –ò–º—è: {result.get('full_name', 'N/A')}")
                print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {result.get('followers', 'N/A')}")
                print(f"   üë• –ü–æ–¥–ø–∏—Å–∫–∏: {result.get('following', 'N/A')}")
                print(f"   üì∏ –ü–æ—Å—Ç—ã: {result.get('posts', 'N/A')}")
                print(f"   ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {result.get('is_verified', 'N/A')}")
                print(f"   üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {result.get('is_private', 'N/A')}")
                print(f"   üîó –ü—Ä–æ–∫—Å–∏: {result.get('proxy_used', 'N/A')}")
                print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {result.get('screenshot_path', 'N/A')}")
                print(f"   ‚ùó –û—à–∏–±–∫–∞: {result.get('error', 'N/A')}")
                print(f"   üîç –ú–µ—Ç–æ–¥: {result.get('checked_via', 'N/A')}")
                
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
                if result.get('exists') is True and username in ["nonexistent123456789", "invalid_user_12345"]:
                    print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API –Ω–∞—à–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç!")
                elif result.get('exists') is False and username in ["ukudarov", "instagram", "zuck"]:
                    print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API –Ω–µ –Ω–∞—à–µ–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç!")
                
                if result.get('error') and '403' in str(result.get('error')):
                    print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: 403 Forbidden - –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
                elif result.get('error') and 'screenshot' in str(result.get('error')):
                    print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞!")
                
            except Exception as e:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
        
        print(f"\n" + "=" * 60)
        print("üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º:")
        print("   - API –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
        print("   - 403 Forbidden –æ—à–∏–±–∫–∏")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(analyze_api_v2_logs())
