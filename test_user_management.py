"""Test user management functionality."""

import os
import sys
from pathlib import Path

# Add project to path
sys.path.insert(0, str(Path(__file__).parent / "project"))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from project.database import Base
from project.models import User, Account, APIKey, Proxy, InstagramSession

def test_user_management():
    """Test user management functionality."""
    
    # Create test database
    engine = create_engine("sqlite:///test_user_mgmt.db")
    Base.metadata.create_all(engine)
    SessionLocal = sessionmaker(bind=engine)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n")
    
    with SessionLocal() as session:
        # Create test users
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # Active user
        user1 = User(
            id=111,
            username="active_user",
            is_active=True,
            role="user"
        )
        session.add(user1)
        
        # Inactive user
        user2 = User(
            id=222,
            username="inactive_user",
            is_active=False,
            role="user"
        )
        session.add(user2)
        
        # Admin user
        user3 = User(
            id=333,
            username="admin_user",
            is_active=True,
            role="admin"
        )
        session.add(user3)
        
        session.commit()
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # Add test accounts to user1
        print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        account1 = Account(
            user_id=user1.id,
            account="test_account_1",
            done=True
        )
        account2 = Account(
            user_id=user1.id,
            account="test_account_2",
            done=False
        )
        session.add(account1)
        session.add(account2)
        session.commit()
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 2 –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ active_user")
        
        # Test queries
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # All users
        all_users = session.query(User).all()
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}")
        
        # Active users
        active_users = session.query(User).filter(User.is_active == True).all()
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}")
        
        # Inactive users
        inactive_users = session.query(User).filter(User.is_active == False).all()
        print(f"   ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_users)}")
        
        # Admins
        admins = session.query(User).filter(User.role.in_(["admin", "superuser"])).all()
        print(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")
        
        # Test user details
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_detail = session.query(User).filter(User.id == 111).first()
        if user_detail:
            accounts_count = session.query(Account).filter(Account.user_id == user_detail.id).count()
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_detail.username}")
            print(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}")
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user_detail.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            print(f"   üëë –†–æ–ª—å: {user_detail.role}")
        
        # Test activation/deactivation
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
        user2.is_active = True
        session.commit()
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user2.username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        user2.is_active = False
        session.commit()
        print(f"   üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user2.username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # Test role change
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏...")
        user1.role = "admin"
        session.commit()
        print(f"   üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user1.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        user1.role = "user"
        session.commit()
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user1.username} —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        # Test cascade delete
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è...")
        accounts_before = session.query(Account).count()
        print(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {accounts_before}")
        
        # Delete user with accounts
        session.delete(user1)
        session.commit()
        
        accounts_after = session.query(Account).count()
        print(f"   üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {accounts_after}")
        print(f"   ‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {accounts_before > accounts_after}")
        
        # Test mass delete inactive
        print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö...")
        inactive_count = session.query(User).filter(User.is_active == False).count()
        print(f"   ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {inactive_count}")
        
        # Delete all inactive
        inactive_users = session.query(User).filter(User.is_active == False).all()
        for u in inactive_users:
            session.delete(u)
        session.commit()
        
        inactive_after = session.query(User).filter(User.is_active == False).count()
        print(f"   ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {inactive_after}")
        print(f"   ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {inactive_after == 0}")
        
        # Final stats
        print("\n9Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        total = session.query(User).count()
        active = session.query(User).filter(User.is_active == True).count()
        admins = session.query(User).filter(User.role.in_(["admin", "superuser"])).count()
        
        print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}")
        print(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # Cleanup
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    # Close engine first
    engine.dispose()
    
    import time
    time.sleep(0.5)  # Give time for connections to close
    
    if os.path.exists("test_user_mgmt.db"):
        try:
            os.remove("test_user_mgmt.db")
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
        except PermissionError:
            print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É (—Ñ–∞–π–ª –∑–∞–Ω—è—Ç)")

if __name__ == "__main__":
    test_user_management()

