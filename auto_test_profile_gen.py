"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º API.
"""

import asyncio
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from project.database import get_engine, get_session_factory
from project.models import Proxy
from project.config import get_settings
from project.services.api_v2_proxy_checker import InstagramCheckerWithProxy
from test_api_with_profile_gen import generate_instagram_profile_image_improved


async def check_and_generate(username: str, session_db, use_proxy: bool = True):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ä–µ–∑ API –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
    print(f"\n{'='*60}")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: @{username}")
    print(f"{'='*60}\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    proxy_list = []
    if use_proxy:
        proxies = session_db.query(Proxy).filter(Proxy.is_active == True).order_by(Proxy.priority.asc()).limit(3).all()
        if proxies:
            for p in proxies:
                proxy_list.append(f"{p.host}:{p.username}:{p.password}")
                print(f"üîó –ü—Ä–æ–∫—Å–∏: {p.host}")
    
    # API –∑–∞–ø—Ä–æ—Å
    checker = InstagramCheckerWithProxy(proxy_list=proxy_list)
    print(f"üì° API –∑–∞–ø—Ä–æ—Å...")
    
    try:
        api_result = await checker.check_account(username=username, max_attempts=3, use_proxy=use_proxy)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç API:")
        print(f"   {'‚úÖ' if api_result.get('exists') else '‚ùå'} –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {api_result.get('exists')}")
        print(f"   {'üîí' if api_result.get('is_private') else 'üîì'} –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {api_result.get('is_private')}")
        print(f"   {'‚úì' if api_result.get('is_verified') else ' '} –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {api_result.get('is_verified')}")
        print(f"   üìõ –ò–º—è: {api_result.get('full_name', '–ù–µ—Ç')}")
        print(f"   üì∏ –ü–æ—Å—Ç—ã: {api_result.get('posts', 0):,}")
        print(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {api_result.get('followers', 0):,}")
        print(f"   ‚ûï –ü–æ–¥–ø–∏—Å–∫–∏: {api_result.get('following', 0):,}")
        
        if not api_result.get('exists'):
            print(f"\n‚ùå @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        print(f"\nüé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
        img_result = await generate_instagram_profile_image_improved(
            username=api_result.get('username', username),
            full_name=api_result.get('full_name', ''),
            posts=api_result.get('posts', 0),
            followers=api_result.get('followers', 0),
            following=api_result.get('following', 0),
            is_private=api_result.get('is_private', False),
            is_verified=api_result.get('is_verified', False),
            biography=api_result.get('biography', ''),
            profile_pic_url=api_result.get('profile_pic_url', '')
        )
        
        if img_result.get('success'):
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ: {img_result.get('image_path')}")
            return img_result.get('image_path')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


async def auto_test():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    print("\n" + "="*60)
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: API + –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print("="*60 + "\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    test_accounts = [
        "instagram",
        "cristiano",
        "nonexistent_test_user_12345"
    ]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        settings = get_settings()
        engine = get_engine(settings.db_url)
        SessionFactory = get_session_factory(engine)
        session = SessionFactory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
        proxy_count = session.query(Proxy).filter(Proxy.is_active == True).count()
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {proxy_count}")
        use_proxy = proxy_count > 0
        
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n")
        
        results = []
        
        for idx, username in enumerate(test_accounts, 1):
            print(f"\n[{idx}/{len(test_accounts)}]")
            
            try:
                result = await check_and_generate(username, session, use_proxy)
                
                if result:
                    results.append((username, "‚úÖ –£—Å–ø–µ—Ö", result))
                    print(f"‚úÖ @{username} - –£–°–ü–ï–•")
                else:
                    results.append((username, "‚ùå –û—à–∏–±–∫–∞", None))
                    print(f"‚ùå @{username} - –û–®–ò–ë–ö–ê")
                
            except Exception as e:
                results.append((username, f"‚ùå Exception: {str(e)[:50]}", None))
                print(f"‚ùå @{username} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if idx < len(test_accounts):
                print("\n‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*60}\n")
        
        success_count = sum(1 for _, status, _ in results if "‚úÖ" in status)
        error_count = len(results) - success_count
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(results)*100):.1f}%")
        
        print(f"\nüìã –î–µ—Ç–∞–ª–∏:\n")
        for username, status, path in results:
            print(f"  @{username:30s} {status}")
            if path:
                print(f"    ‚îî‚îÄ {path}")
        
        print(f"\n{'='*60}\n")
        
        session.close()
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    try:
        asyncio.run(auto_test())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

