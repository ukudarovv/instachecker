"""Instagram menu handlers."""

import json
from sqlalchemy.orm import sessionmaker
try:
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from ..models import InstagramSession
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from ..services.ig_sessions import save_session
except ImportError:
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from models import InstagramSession
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.ig_sessions import save_session


def register_ig_menu_handlers(bot, session_factory) -> None:
    """Register Instagram menu handlers."""

    def process_message(message: dict, session_factory) -> None:
        """Process Instagram menu messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        # Handle "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG" by delegating to ig_simple_check
        if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG":
            if hasattr(bot, 'ig_simple_check_process_message'):
                bot.ig_simple_check_process_message(message, session_factory)
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return
        
        # Handle cancel button
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            if chat_id in bot.fsm_states:
                del bot.fsm_states[chat_id]
            bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=instagram_menu_kb())
            return
        
        if text == "Instagram":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                bot.send_message(chat_id, "–†–∞–∑–¥–µ–ª ¬´Instagram¬ª", reply_markup=instagram_menu_kb())

        elif text == "–ú–æ–∏ IG-—Å–µ—Å—Å–∏–∏":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                
                sessions = session.query(InstagramSession).filter(
                    InstagramSession.user_id == user.id
                ).order_by(InstagramSession.created_at.desc()).all()
                
                if not sessions:
                    bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö IG-—Å–µ—Å—Å–∏–π.", reply_markup=instagram_menu_kb())
                    return
                
                # Create inline keyboard with sessions list
                keyboard = []
                for s in sessions:
                    status_icon = "‚úÖ" if s.is_active else "‚ùå"
                    date_str = s.created_at.strftime("%d.%m.%Y %H:%M") if s.created_at else "N/A"
                    keyboard.append([{
                        "text": f"{status_icon} @{s.username} ({date_str})",
                        "callback_data": f"ig_session:{s.id}"
                    }])
                
                # Add back button
                keyboard.append([{"text": "‚¨Ö –ù–∞–∑–∞–¥", "callback_data": "ig_back"}])
                
                bot.send_message(
                    chat_id, 
                    f"üìã –í–∞—à–∏ IG-—Å–µ—Å—Å–∏–∏ ({len(sessions)}):",
                    reply_markup={"inline_keyboard": keyboard}
                )

        elif text == "–î–æ–±–∞–≤–∏—Ç—å IG-—Å–µ—Å—Å–∏—é":
            bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:\n"
                "‚Ä¢ –õ–æ–≥–∏–Ω (Playwright, –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –≤–æ–∑–º–æ–∂–µ–Ω 2FA)"
            )
            bot.send_message(chat_id, "–†–µ–∂–∏–º:", reply_markup=ig_add_mode_kb())

        elif text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                is_admin = user.role in ["admin", "superuser"]
                bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))

    def process_callback_query(callback_query: dict, session_factory) -> None:
        """Process Instagram menu callback queries."""
        data = callback_query.get("data", "")
        chat_id = callback_query["message"]["chat"]["id"]
        message_id = callback_query["message"]["message_id"]
        
        if data.startswith("ig_mode:"):
            mode = data.split(":")[1]
            
            if mode == "cancel":
                # Clear FSM state if any
                if chat_id in bot.fsm_states:
                    del bot.fsm_states[chat_id]
                bot.send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=instagram_menu_kb())
                bot.answer_callback_query(callback_query["id"])
                return
            
            elif mode == "login":
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ IG username (–ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ: /cancel")
                bot.fsm_states[chat_id] = {"state": "waiting_username", "mode": "login"}
            
            bot.answer_callback_query(callback_query["id"])
        
        elif data == "ig_back":
            # Return to Instagram menu
            bot.send_message(chat_id, "–†–∞–∑–¥–µ–ª ¬´Instagram¬ª", reply_markup=instagram_menu_kb())
            bot.answer_callback_query(callback_query["id"])
        
        elif data.startswith("ig_session:"):
            session_id = int(data.split(":")[1])
            # Show session details with delete option
            with session_factory() as session:
                user = get_or_create_user(session, callback_query["from"])
                ig_session = session.query(InstagramSession).filter(
                    InstagramSession.id == session_id,
                    InstagramSession.user_id == user.id
                ).first()
                
                if not ig_session:
                    bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    bot.answer_callback_query(callback_query["id"])
                    return
                
                status_icon = "‚úÖ" if ig_session.is_active else "‚ùå"
                date_str = ig_session.created_at.strftime("%d.%m.%Y %H:%M") if ig_session.created_at else "N/A"
                
                message_text = (
                    f"üìã –î–µ—Ç–∞–ª–∏ IG-—Å–µ—Å—Å–∏–∏:\n\n"
                    f"‚Ä¢ ID: {ig_session.id}\n"
                    f"‚Ä¢ Username: @{ig_session.username}\n"
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_icon} {'–ê–∫—Ç–∏–≤–Ω–∞' if ig_session.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                    f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {date_str}"
                )
                
                keyboard = [
                    [{"text": "üóë –£–¥–∞–ª–∏—Ç—å", "callback_data": f"ig_delete:{session_id}"}],
                    [{"text": "‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "callback_data": "ig_sessions"}]
                ]
                
                bot.send_message(
                    chat_id,
                    message_text,
                    reply_markup={"inline_keyboard": keyboard}
                )
                bot.answer_callback_query(callback_query["id"])
        
        elif data == "ig_sessions":
            # Show sessions list again
            with session_factory() as session:
                user = get_or_create_user(session, callback_query["from"])
                sessions = session.query(InstagramSession).filter(
                    InstagramSession.user_id == user.id
                ).order_by(InstagramSession.created_at.desc()).all()
                
                if not sessions:
                    bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö IG-—Å–µ—Å—Å–∏–π.", reply_markup=instagram_menu_kb())
                    bot.answer_callback_query(callback_query["id"])
                    return
                
                # Create inline keyboard with sessions list
                keyboard = []
                for s in sessions:
                    status_icon = "‚úÖ" if s.is_active else "‚ùå"
                    date_str = s.created_at.strftime("%d.%m.%Y %H:%M") if s.created_at else "N/A"
                    keyboard.append([{
                        "text": f"{status_icon} @{s.username} ({date_str})",
                        "callback_data": f"ig_session:{s.id}"
                    }])
                
                # Add back button
                keyboard.append([{"text": "‚¨Ö –ù–∞–∑–∞–¥", "callback_data": "ig_back"}])
                
                bot.send_message(
                    chat_id, 
                    f"üìã –í–∞—à–∏ IG-—Å–µ—Å—Å–∏–∏ ({len(sessions)}):",
                    reply_markup={"inline_keyboard": keyboard}
                )
                bot.answer_callback_query(callback_query["id"])
        
        elif data.startswith("ig_delete:"):
            session_id = int(data.split(":")[1])
            with session_factory() as session:
                user = get_or_create_user(session, callback_query["from"])
                ig_session = session.query(InstagramSession).filter(
                    InstagramSession.id == session_id,
                    InstagramSession.user_id == user.id
                ).first()
                
                if ig_session:
                    username = ig_session.username
                    session.delete(ig_session)
                    session.commit()
                    bot.send_message(chat_id, f"‚úÖ IG-—Å–µ—Å—Å–∏—è @{username} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=instagram_menu_kb())
                else:
                    bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                
                bot.answer_callback_query(callback_query["id"])

    def process_instagram_flow(message: dict, session_factory) -> None:
        """Process Instagram session flow messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        # Handle cancel command
        if text and text.strip().lower() == "/cancel":
            if chat_id in bot.fsm_states:
                del bot.fsm_states[chat_id]
            bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=instagram_menu_kb())
            return
        
        if chat_id not in bot.fsm_states:
            return
            
        state_data = bot.fsm_states[chat_id]
        state = state_data.get("state")
        mode = state_data.get("mode")
        
        settings = get_settings()
        fernet = OptionalFernet(settings.encryption_key)

        if state == "waiting_username":
            ig_username = (text or "").strip().lstrip("@")
            bot.fsm_states[chat_id]["ig_username"] = ig_username
            
            if mode == "login":
                bot.fsm_states[chat_id]["state"] = "waiting_password"
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å IG:")
                return

        elif state == "waiting_password":
            ig_password = text or ""
            ig_username = bot.fsm_states[chat_id].get("ig_username")
            
            # –í—ã–ø–æ–ª–Ω–∏–º headless-–ª–æ–≥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º cookies
            try:
                from ..services.ig_login import playwright_login_and_get_cookies
            except ImportError:
                from services.ig_login import playwright_login_and_get_cookies
            
            bot.send_message(chat_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥ –≤ IG (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è 2FA/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)...")
            
            try:
                import asyncio
                cookies = asyncio.run(playwright_login_and_get_cookies(
                    ig_username=ig_username,
                    ig_password=ig_password,
                    headless=settings.ig_headless,
                    login_timeout_ms=settings.ig_login_timeout_ms,
                    twofa_timeout_ms=settings.ig_2fa_timeout_ms,
                    proxy_url=None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
                ))
            except Exception as e:
                del bot.fsm_states[chat_id]
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥: {str(e)}")
                return
            
            with session_factory() as s:
                user = get_or_create_user(s, message["from"])
                obj = save_session(
                    session=s,
                    user_id=user.id,
                    ig_username=ig_username,
                    cookies_json=cookies,
                    fernet=fernet,
                )
            
            del bot.fsm_states[chat_id]
            bot.send_message(chat_id, f"‚úÖ –°–µ—Å—Å–∏—è @{ig_username} —Å–æ–∑–¥–∞–Ω–∞ (id={obj.id}).", reply_markup=instagram_menu_kb())

    # Register handlers
    bot.ig_menu_process_message = process_message
    bot.ig_menu_process_callback_query = process_callback_query
    bot.ig_menu_process_instagram_flow = process_instagram_flow
