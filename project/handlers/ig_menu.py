"""Instagram menu handlers."""

import json
from sqlalchemy.orm import sessionmaker
try:
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from ..models import InstagramSession
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from ..services.ig_sessions import save_session
except ImportError:
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from models import InstagramSession
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.ig_sessions import save_session


def register_ig_menu_handlers(bot, session_factory) -> None:
    """Register Instagram menu handlers."""

    def process_message(message: dict, session_factory) -> None:
        """Process Instagram menu messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        if text == "Instagram":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                bot.send_message(chat_id, "–†–∞–∑–¥–µ–ª ¬´Instagram¬ª", reply_markup=instagram_menu_kb())

        elif text == "–ú–æ–∏ IG-—Å–µ—Å—Å–∏–∏":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                
                sessions = session.query(InstagramSession).filter(
                    InstagramSession.user_id == user.id
                ).order_by(InstagramSession.created_at.desc()).all()
                
                if not sessions:
                    bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö IG-—Å–µ—Å—Å–∏–π.", reply_markup=instagram_menu_kb())
                    return
                
                lines = []
                for s in sessions:
                    lines.append(f"‚Ä¢ id={s.id}, @{s.username}, active={s.is_active}, created={s.created_at}")
                bot.send_message(chat_id, "\n".join(lines), reply_markup=instagram_menu_kb())

        elif text == "–î–æ–±–∞–≤–∏—Ç—å IG-—Å–µ—Å—Å–∏—é":
            bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:\n"
                "‚Ä¢ –ò–º–ø–æ—Ä—Ç cookies (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ –õ–æ–≥–∏–Ω (Playwright, –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –≤–æ–∑–º–æ–∂–µ–Ω 2FA)",
                reply_markup=instagram_menu_kb()
            )
            bot.send_message(chat_id, "–†–µ–∂–∏–º:", reply_markup=ig_add_mode_kb())

        elif text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                is_admin = user.role in ["admin", "superuser"]
                bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))

    def process_callback_query(callback_query: dict, session_factory) -> None:
        """Process Instagram menu callback queries."""
        data = callback_query.get("data", "")
        chat_id = callback_query["message"]["chat"]["id"]
        message_id = callback_query["message"]["message_id"]
        
        if data.startswith("ig_mode:"):
            mode = data.split(":")[1]
            
            if mode == "cookies":
                bot.send_message(
                    chat_id,
                    "–ü—Ä–∏—à–ª–∏—Ç–µ cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–∞–∫ –≤—ã–¥–∞—ë—Ç DevTools/Extension).\n"
                    "–ú–∏–Ω–∏–º—É–º: name, value, domain, path."
                )
                # Set FSM state
                bot.fsm_states[chat_id] = {"state": "waiting_cookies", "mode": "cookies"}
                
            elif mode == "login":
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ IG username (–ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è):")
                bot.fsm_states[chat_id] = {"state": "waiting_username", "mode": "login"}
            
            bot.answer_callback_query(callback_query["id"])

    def process_instagram_flow(message: dict, session_factory) -> None:
        """Process Instagram session flow messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        if chat_id not in bot.fsm_states:
            return
            
        state_data = bot.fsm_states[chat_id]
        state = state_data.get("state")
        mode = state_data.get("mode")
        
        settings = get_settings()
        fernet = OptionalFernet(settings.encryption_key)

        if state == "waiting_cookies":
            # JSON —Å cookie-list
            try:
                cookies = json.loads(text)
                if not isinstance(cookies, list):
                    raise ValueError
            except Exception:
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π JSON. –ü—Ä–∏—à–ª–∏—Ç–µ **—Å–ø–∏—Å–æ–∫** cookie-–æ–±—ä–µ–∫—Ç–æ–≤.")
                return
            
            # —Å–ø—Ä–æ—Å–∏–º IG username, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–µ—Å—Å–∏—é
            bot.fsm_states[chat_id] = {"state": "waiting_username", "mode": "cookies", "cookies": cookies}
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ IG username –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏):")

        elif state == "waiting_username":
            ig_username = (text or "").strip().lstrip("@")
            bot.fsm_states[chat_id]["ig_username"] = ig_username
            
            if mode == "cookies":
                cookies = bot.fsm_states[chat_id].get("cookies")
                with session_factory() as s:
                    user = get_or_create_user(s, message["from"])
                    obj = save_session(
                        session=s,
                        user_id=user.id,
                        ig_username=ig_username,
                        cookies_json=cookies,
                        fernet=fernet,
                    )
                del bot.fsm_states[chat_id]
                bot.send_message(chat_id, f"‚úÖ –°–µ—Å—Å–∏—è @{ig_username} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (id={obj.id}).", reply_markup=instagram_menu_kb())
                return
            else:
                bot.fsm_states[chat_id]["state"] = "waiting_password"
                bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å IG:")
                return

        elif state == "waiting_password":
            ig_password = text or ""
            ig_username = bot.fsm_states[chat_id].get("ig_username")
            
            # –í—ã–ø–æ–ª–Ω–∏–º headless-–ª–æ–≥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º cookies
            try:
                from ..services.ig_login import playwright_login_and_get_cookies
            except ImportError:
                from services.ig_login import playwright_login_and_get_cookies
            
            bot.send_message(chat_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥ –≤ IG (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è 2FA/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)...")
            
            try:
                import asyncio
                cookies = asyncio.run(playwright_login_and_get_cookies(
                    ig_username=ig_username,
                    ig_password=ig_password,
                    headless=settings.ig_headless,
                    login_timeout_ms=settings.ig_login_timeout_ms,
                    twofa_timeout_ms=settings.ig_2fa_timeout_ms,
                    proxy_url=None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
                ))
            except Exception as e:
                del bot.fsm_states[chat_id]
                bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥: {str(e)}")
                return
            
            with session_factory() as s:
                user = get_or_create_user(s, message["from"])
                obj = save_session(
                    session=s,
                    user_id=user.id,
                    ig_username=ig_username,
                    cookies_json=cookies,
                    fernet=fernet,
                )
            
            del bot.fsm_states[chat_id]
            bot.send_message(chat_id, f"‚úÖ –°–µ—Å—Å–∏—è @{ig_username} —Å–æ–∑–¥–∞–Ω–∞ (id={obj.id}).", reply_markup=instagram_menu_kb())

    # Register handlers
    bot.ig_menu_process_message = process_message
    bot.ig_menu_process_callback_query = process_callback_query
    bot.ig_menu_process_instagram_flow = process_instagram_flow
