"""Admin handlers for managing user auto-check settings."""

try:
    from ..models import User
    from ..utils.access import ensure_admin
except ImportError:
    from models import User
    from utils.access import ensure_admin


def get_checker_scheduler():
    """Get the global checker scheduler instance."""
    try:
        # Try to import from bot.py's global variable
        import sys
        import importlib
        
        # Check if bot module is loaded
        if 'project.bot' in sys.modules:
            bot_module = sys.modules['project.bot']
            if hasattr(bot_module, '_checker_scheduler'):
                return bot_module._checker_scheduler
        
        # Fallback: try direct import
        try:
            from project.bot import _checker_scheduler
            return _checker_scheduler
        except:
            pass
    except:
        pass
    return None


def register_admin_auto_check_handlers(bot, session_factory):
    """
    Register admin handlers for managing user auto-check settings.
    
    Returns:
        dict: Text handlers mapping
    """
    
    text_handlers = {}
    
    def handle_auto_check_users_list(message, user):
        """Show list of all users with auto-check settings."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with session_factory() as session:
            users = session.query(User).filter(User.is_active == True).all()
            
            if not users:
                bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            response = "üë• <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            
            scheduler = get_checker_scheduler()
            
            for u in users:
                status_emoji = "‚úÖ" if u.auto_check_enabled else "‚ùå"
                running_emoji = "üîÑ" if scheduler and scheduler.is_running() else "‚è∏Ô∏è"
                
                response += f"{status_emoji} <b>@{u.username}</b> (ID: {u.id})\n"
                response += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {u.auto_check_interval} –º–∏–Ω\n"
                response += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {running_emoji} {'–†–∞–±–æ—Ç–∞–µ—Ç' if scheduler and scheduler.is_running() else '–ù–µ –∑–∞–ø—É—â–µ–Ω'}\n"
                
                # Get next run time if scheduler is available
                if scheduler:
                    next_run = scheduler.get_next_run_time(user_id=u.id)
                    if next_run:
                        response += f"   ‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_run.strftime('%H:%M:%S')}\n"
                
                response += "\n"
            
            response += "\n<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            response += "/user_autocheck_set {user_id} {interval} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            response += "/user_autocheck_enable {user_id} - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É\n"
            response += "/user_autocheck_disable {user_id} - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É\n"
            response += "/user_autocheck_status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            response += "/user_autocheck_trigger {user_id} - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é"
            
            bot.send_message(message["chat"]["id"], response)
    
    def handle_set_user_interval_cmd(message, user):
        """Handle /user_autocheck_set {user_id} {interval}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 3:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_set {user_id} {interval}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_set 123 10"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            new_interval = int(parts[2])
            
            if new_interval < 1 or new_interval > 1440:
                bot.send_message(message["chat"]["id"], "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç")
                return
            
            # Update database
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                old_interval = target_user.auto_check_interval
                target_user.auto_check_interval = new_interval
                session.commit()
                
                username = target_user.username
            
            # Reload scheduler to update user intervals
            scheduler = get_checker_scheduler()
            if scheduler:
                scheduler.reload_users()
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è @{username} (ID: {target_user_id}) –∏–∑–º–µ–Ω–µ–Ω:\n"
                f"‚Ä¢ –ë—ã–ª–æ: {old_interval} –º–∏–Ω\n"
                f"‚Ä¢ –°—Ç–∞–ª–æ: {new_interval} –º–∏–Ω"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_enable_user_autocheck_cmd(message, user):
        """Handle /user_autocheck_enable {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_enable {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_enable 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
                interval = target_user.auto_check_interval
                
                # Enable autocheck for user
                target_user.auto_check_enabled = True
                session.commit()
            
            # Reload scheduler to update user settings
            scheduler = get_checker_scheduler()
            if scheduler:
                scheduler.reload_users()
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è @{username} (ID: {target_user_id})\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_disable_user_autocheck_cmd(message, user):
        """Handle /user_autocheck_disable {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_disable {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_disable 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
                
                # Disable autocheck for user
                target_user.auto_check_enabled = False
                session.commit()
            
            # Reload scheduler to update user settings
            scheduler = get_checker_scheduler()
            if scheduler:
                scheduler.reload_users()
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è @{username} (ID: {target_user_id})"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_autocheck_status_cmd(message, user):
        """Handle /user_autocheck_status"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        scheduler = get_checker_scheduler()
        if not scheduler:
            bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        if not scheduler.is_running():
            bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        with session_factory() as session:
            users = session.query(User).filter(
                User.is_active == True,
                User.auto_check_enabled == True
            ).all()
        
        if not users:
            bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–æ–π")
            return
        
        response = f"üìä <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        response += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        
        for u in users:
            status_emoji = "‚úÖ" if u.auto_check_enabled else "‚ùå"
            
            response += f"{status_emoji} <b>@{u.username}</b> (ID: {u.id})\n"
            response += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {u.auto_check_interval} –º–∏–Ω\n"
            
            # Get next run time
            next_run = scheduler.get_next_run_time(user_id=u.id)
            if next_run:
                response += f"   ‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_run.strftime('%d.%m %H:%M:%S')}\n"
            
            response += "\n"
        
        bot.send_message(message["chat"]["id"], response)
    
    def handle_trigger_user_check_cmd(message, user):
        """Handle /user_autocheck_trigger {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_trigger {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_trigger 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
            
            # Trigger check manually
            scheduler = get_checker_scheduler()
            if scheduler:
                import asyncio
                bot.send_message(message["chat"]["id"], f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è @{username}...")
                
                # Trigger user check manually
                async def trigger_check():
                    try:
                        from ..cron.auto_checker import check_user_pending_accounts
                        from ..utils.async_bot_wrapper import AsyncBotWrapper
                    except ImportError:
                        from cron.auto_checker import check_user_pending_accounts
                        from utils.async_bot_wrapper import AsyncBotWrapper
                    
                    with session_factory() as session:
                        bot_token = session.query(User).first()  # Get bot token somehow
                        # This is a simplified trigger - in production you'd get bot_token properly
                        async_bot = None  # Would need bot token here
                        await check_user_pending_accounts(
                            user_id=target_user_id,
                            SessionLocal=session_factory,
                            bot=async_bot,
                            max_accounts=999999
                        )
                
                # Run check in background
                try:
                    loop = asyncio.get_event_loop()
                    loop.create_task(trigger_check())
                    bot.send_message(message["chat"]["id"], f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è @{username}")
                except Exception as e:
                    bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            else:
                bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Register handlers
    text_handlers["/user_autocheck_list"] = handle_auto_check_users_list
    text_handlers["/user_autocheck_set"] = handle_set_user_interval_cmd
    text_handlers["/user_autocheck_enable"] = handle_enable_user_autocheck_cmd
    text_handlers["/user_autocheck_disable"] = handle_disable_user_autocheck_cmd
    text_handlers["/user_autocheck_status"] = handle_autocheck_status_cmd
    text_handlers["/user_autocheck_trigger"] = handle_trigger_user_check_cmd
    
    return text_handlers

