"""Admin handlers for managing user auto-check settings."""

try:
    from ..models import User
    from ..utils.access import ensure_admin
    from ..cron.auto_checker_manager import get_auto_checker_manager
except ImportError:
    from models import User
    from utils.access import ensure_admin
    from cron.auto_checker_manager import get_auto_checker_manager


def register_admin_auto_check_handlers(bot, session_factory):
    """
    Register admin handlers for managing user auto-check settings.
    
    Returns:
        dict: Text handlers mapping
    """
    
    text_handlers = {}
    
    def handle_auto_check_users_list(message, user):
        """Show list of all users with auto-check settings."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with session_factory() as session:
            users = session.query(User).filter(User.is_active == True).all()
            
            if not users:
                bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            # Get manager stats
            manager = get_auto_checker_manager()
            stats = manager.get_all_stats() if manager else {"checkers": []}
            
            # Create stats dict for quick lookup
            stats_dict = {stat["user_id"]: stat for stat in stats["checkers"]}
            
            response = "üë• <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            
            for u in users:
                status_emoji = "‚úÖ" if u.auto_check_enabled else "‚ùå"
                running_emoji = "üîÑ" if u.id in stats_dict and stats_dict[u.id]["is_running"] else "‚è∏Ô∏è"
                
                response += f"{status_emoji} <b>@{u.username}</b> (ID: {u.id})\n"
                response += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {u.auto_check_interval} –º–∏–Ω\n"
                response += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {running_emoji} {'–†–∞–±–æ—Ç–∞–µ—Ç' if u.id in stats_dict else '–ù–µ –∑–∞–ø—É—â–µ–Ω'}\n"
                
                if u.id in stats_dict:
                    stat = stats_dict[u.id]
                    response += f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {stat['total_checks']}\n"
                    response += f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {stat['total_found']}\n"
                    if stat['last_check_time']:
                        response += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stat['last_check_time'].strftime('%H:%M:%S')}\n"
                
                response += "\n"
            
            response += "\n<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            response += "/user_autocheck_set {user_id} {interval} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª\n"
            response += "/user_autocheck_enable {user_id} - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É\n"
            response += "/user_autocheck_disable {user_id} - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É\n"
            response += "/user_autocheck_status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            response += "/user_autocheck_trigger {user_id} - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä—É—á–Ω—É—é"
            
            bot.send_message(message["chat"]["id"], response)
    
    def handle_set_user_interval_cmd(message, user):
        """Handle /user_autocheck_set {user_id} {interval}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 3:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_set {user_id} {interval}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_set 123 10"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            new_interval = int(parts[2])
            
            if new_interval < 1 or new_interval > 1440:
                bot.send_message(message["chat"]["id"], "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç")
                return
            
            # Update database
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                old_interval = target_user.auto_check_interval
                target_user.auto_check_interval = new_interval
                session.commit()
                
                username = target_user.username
            
            # Update scheduler
            manager = get_auto_checker_manager()
            if manager:
                manager.update_user_interval(target_user_id, new_interval)
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è @{username} (ID: {target_user_id}) –∏–∑–º–µ–Ω–µ–Ω:\n"
                f"‚Ä¢ –ë—ã–ª–æ: {old_interval} –º–∏–Ω\n"
                f"‚Ä¢ –°—Ç–∞–ª–æ: {new_interval} –º–∏–Ω"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_enable_user_autocheck_cmd(message, user):
        """Handle /user_autocheck_enable {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_enable {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_enable 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
                interval = target_user.auto_check_interval
            
            # Enable in manager
            manager = get_auto_checker_manager()
            if manager:
                manager.enable_user_checker(target_user_id, interval)
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è @{username} (ID: {target_user_id})\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_disable_user_autocheck_cmd(message, user):
        """Handle /user_autocheck_disable {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_disable {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_disable 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
            
            # Disable in manager
            manager = get_auto_checker_manager()
            if manager:
                manager.disable_user_checker(target_user_id)
            
            bot.send_message(
                message["chat"]["id"],
                f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è @{username} (ID: {target_user_id})"
            )
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def handle_autocheck_status_cmd(message, user):
        """Handle /user_autocheck_status"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        manager = get_auto_checker_manager()
        if not manager:
            bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        stats = manager.get_all_stats()
        
        if stats["total_checkers"] == 0:
            bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤")
            return
        
        response = f"üìä <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        response += f"–í—Å–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤: {stats['total_checkers']}\n\n"
        
        for stat in stats["checkers"]:
            username = stat.get("username", "Unknown")
            user_id = stat["user_id"]
            interval = stat.get("interval_minutes", "?")
            is_running = "‚úÖ" if stat["is_running"] else "‚ùå"
            is_checking = "üîÑ" if stat["is_checking"] else "‚è∏Ô∏è"
            
            response += f"{is_running} <b>@{username}</b> (ID: {user_id})\n"
            response += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω {is_checking}\n"
            response += f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫: {stat['total_checks']}\n"
            response += f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {stat['total_found']}\n"
            response += f"   ‚Ä¢ –û—à–∏–±–æ–∫: {stat['total_errors']}\n"
            
            if stat['last_check_time']:
                response += f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {stat['last_check_time'].strftime('%d.%m %H:%M:%S')}\n"
            
            response += "\n"
        
        bot.send_message(message["chat"]["id"], response)
    
    def handle_trigger_user_check_cmd(message, user):
        """Handle /user_autocheck_trigger {user_id}"""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        text = message.get("text", "").strip()
        parts = text.split()
        
        if len(parts) != 2:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_autocheck_trigger {user_id}\n"
                "–ü—Ä–∏–º–µ—Ä: /user_autocheck_trigger 123"
            )
            return
        
        try:
            target_user_id = int(parts[1])
            
            with session_factory() as session:
                target_user = session.query(User).filter(User.id == target_user_id).first()
                if not target_user:
                    bot.send_message(message["chat"]["id"], f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                username = target_user.username
            
            # Trigger check
            manager = get_auto_checker_manager()
            if manager:
                import asyncio
                bot.send_message(message["chat"]["id"], f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è @{username}...")
                asyncio.create_task(manager.trigger_user_check(target_user_id))
                bot.send_message(message["chat"]["id"], f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è @{username}")
            else:
                bot.send_message(message["chat"]["id"], "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ValueError:
            bot.send_message(message["chat"]["id"], "‚ùå User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            bot.send_message(message["chat"]["id"], f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # Register handlers
    text_handlers["/user_autocheck_list"] = handle_auto_check_users_list
    text_handlers["/user_autocheck_set"] = handle_set_user_interval_cmd
    text_handlers["/user_autocheck_enable"] = handle_enable_user_autocheck_cmd
    text_handlers["/user_autocheck_disable"] = handle_disable_user_autocheck_cmd
    text_handlers["/user_autocheck_status"] = handle_autocheck_status_cmd
    text_handlers["/user_autocheck_trigger"] = handle_trigger_user_check_cmd
    
    return text_handlers

