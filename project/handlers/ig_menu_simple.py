"""Simple Instagram menu handlers."""

import json
from sqlalchemy.orm import sessionmaker
try:
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from ..models import InstagramSession
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from ..services.ig_sessions import save_session
except ImportError:
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from keyboards import instagram_menu_kb, main_menu, ig_add_mode_kb
    from models import InstagramSession
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.ig_sessions import save_session


def get_ig_menu_kb():
    """Get Instagram menu keyboard with Mini App URL if configured."""
    settings = get_settings()
    return instagram_menu_kb(mini_app_url=settings.ig_mini_app_url if settings.ig_mini_app_url else None)


async def process_message(message: dict, session_factory, bot) -> None:
    """Process Instagram menu messages."""
    text = message.get("text", "")
    chat_id = message["chat"]["id"]
    
    # Handle "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG" by delegating to ig_simple_check
    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG":
        if hasattr(bot, 'ig_simple_check_process_message'):
            bot.ig_simple_check_process_message(message, session_factory)
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # Handle cancel button
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        if chat_id in bot.fsm_states:
            del bot.fsm_states[chat_id]
        bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_ig_menu_kb())
        return
    
    if text == "Instagram":
        with session_factory() as session:
            user = get_or_create_user(session, message["from"])
            if not ensure_active(user):
                bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            
            bot.send_message(chat_id, "–†–∞–∑–¥–µ–ª ¬´Instagram¬ª", reply_markup=get_ig_menu_kb())

    elif text == "–ú–æ–∏ IG-—Å–µ—Å—Å–∏–∏":
        with session_factory() as session:
            user = get_or_create_user(session, message["from"])
            if not ensure_active(user):
                bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            
            sessions = session.query(InstagramSession).filter(InstagramSession.user_id == user.id).all()
            
            if not sessions:
                bot.send_message(chat_id, "üìã –£ –≤–∞—Å –Ω–µ—Ç IG-—Å–µ—Å—Å–∏–π.", reply_markup=get_ig_menu_kb())
                return
            
            keyboard = []
            for session_obj in sessions:
                keyboard.append([{
                    "text": f"@{session_obj.ig_username}",
                    "callback_data": f"ig_session:{session_obj.id}"
                }])
            
            bot.send_message(
                chat_id, 
                f"üìã –í–∞—à–∏ IG-—Å–µ—Å—Å–∏–∏ ({len(sessions)}):",
                reply_markup={"inline_keyboard": keyboard}
            )

    elif text == "–î–æ–±–∞–≤–∏—Ç—å IG-—Å–µ—Å—Å–∏—é":
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:\n\n"
            "üìã **–ò–º–ø–æ—Ä—Ç cookies** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å 2FA\n"
            "  ‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ Instagram —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
            "  ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cookies\n"
            "  ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n\n"
            "üîê **–õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Playwright** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥\n"
            "  ‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç username –∏ password\n"
            "  ‚Ä¢ –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å 2FA\n"
            "  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )
        bot.send_message(chat_id, "–†–µ–∂–∏–º:", reply_markup=ig_add_mode_kb())

    elif text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        with session_factory() as session:
            try:
                from ..services.system_settings import get_global_verify_mode
            except ImportError:
                from services.system_settings import get_global_verify_mode
            
            user = get_or_create_user(session, message["from"])
            is_admin = user.role in ["admin", "superuser"]
            verify_mode = get_global_verify_mode(session)
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin, verify_mode=verify_mode))


def process_callback_query(callback_query: dict, session_factory, bot) -> None:
    """Process Instagram menu callback queries."""
    data = callback_query.get("data", "")
    chat_id = callback_query["message"]["chat"]["id"]
    message_id = callback_query["message"]["message_id"]
    
    if data.startswith("ig_mode:"):
        mode = data.split(":")[1]
        
        if mode == "cookies":
            bot.fsm_states[chat_id] = {"state": "waiting_cookies"}
            bot.send_message(chat_id, "üìã –í—Å—Ç–∞–≤—å—Ç–µ cookies –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
        elif mode == "login":
            bot.fsm_states[chat_id] = {"state": "waiting_username"}
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ IG username (–ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è):\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ: /cancel")
        elif mode == "complete":
            bot.fsm_states[chat_id] = {"state": "waiting_complete"}
            bot.send_message(chat_id, "üìã –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nusername: your_username\npassword: your_password\ncookies: [paste cookies here]")
        elif mode == "cancel":
            if chat_id in bot.fsm_states:
                del bot.fsm_states[chat_id]
            bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_ig_menu_kb())
    
    elif data.startswith("ig_session:"):
        session_id = int(data.split(":")[1])
        
        with session_factory() as session:
            session_obj = session.query(InstagramSession).filter(InstagramSession.id == session_id).first()
            if session_obj:
                bot.send_message(
                    chat_id,
                    f"üìã **–°–µ—Å—Å–∏—è @{session_obj.ig_username}**\n\n"
                    f"üÜî ID: {session_obj.id}\n"
                    f"üë§ Username: @{session_obj.ig_username}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {session_obj.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {session_obj.last_used_at.strftime('%d.%m.%Y %H:%M') if session_obj.last_used_at else '–ù–∏–∫–æ–≥–¥–∞'}"
                )
            else:
                bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    bot.answer_callback_query(callback_query["id"])


def process_instagram_flow(message: dict, session_factory, bot) -> None:
    """Process Instagram session flow messages."""
    text = message.get("text", "")
    chat_id = message["chat"]["id"]
    
    # Handle cancel command
    if text == "/cancel":
        if chat_id in bot.fsm_states:
            del bot.fsm_states[chat_id]
        bot.send_message(chat_id, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_ig_menu_kb())
        return
    
    # Get current state
    state = bot.fsm_states.get(chat_id, {}).get("state")
    
    if state == "waiting_cookies":
        # Parse cookies
        try:
            cookies = json.loads(text)
            if not isinstance(cookies, list):
                bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        except json.JSONDecodeError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # Save session
        with session_factory() as session:
            user = get_or_create_user(session, message["from"])
            settings = get_settings()
            fernet = OptionalFernet(settings.fernet_key)
            
            obj = save_session(
                session=session,
                user_id=user.id,
                ig_username="unknown",  # Will be updated from cookies
                cookies_json=cookies,
                fernet=fernet,
                ig_password=None
            )
        
        del bot.fsm_states[chat_id]
        bot.send_message(chat_id, f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ (id={obj.id}).", reply_markup=get_ig_menu_kb())
    
    elif state == "waiting_username":
        ig_username = text.strip()
        if not ig_username:
            bot.send_message(chat_id, "‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        bot.fsm_states[chat_id]["ig_username"] = ig_username
        bot.fsm_states[chat_id]["state"] = "waiting_password"
        bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å IG:")
    
    elif state == "waiting_password":
        ig_password = text or ""
        ig_username = bot.fsm_states[chat_id].get("ig_username")
        
        # –í—ã–ø–æ–ª–Ω–∏–º headless-–ª–æ–≥–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º cookies
        try:
            from ..services.ig_login import playwright_login_and_get_cookies
        except ImportError:
            from services.ig_login import playwright_login_and_get_cookies
        
        bot.send_message(chat_id, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥ –≤ IG (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è 2FA/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)...")
        
        try:
            import asyncio
            result = asyncio.run(playwright_login_and_get_cookies(
                ig_username=ig_username,
                ig_password=ig_password,
                headless=settings.ig_headless,
                login_timeout_ms=settings.ig_login_timeout_ms,
                twofa_timeout_ms=settings.ig_2fa_timeout_ms,
                proxy_url=None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
                bot=bot,
                chat_id=chat_id,
            ))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
            if isinstance(result, dict) and result.get("status") == "waiting_2fa":
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
                return
            
            cookies = result
        except Exception as e:
            del bot.fsm_states[chat_id]
            error_msg = str(e)
            
            # Provide user-friendly error messages
            if "TimeoutError" in error_msg or "Timeout" in error_msg:
                bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Instagram.\n\n"
                    "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                    "‚Ä¢ Instagram –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥\n"
                    "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n"
                    "üëâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **üìã –ò–º–ø–æ—Ä—Ç cookies** –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞.\n\n"
                    "–≠—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏!"
                )
            elif "2FA" in error_msg or "two_factor" in error_msg:
                bot.send_message(
                    chat_id,
                    "üîê –£ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA).\n\n"
                    "‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —Å 2FA –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n\n"
                    "üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **üìã –ò–º–ø–æ—Ä—Ç cookies**:\n"
                    "1. –í–æ–π–¥–∏—Ç–µ –≤ Instagram —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
                    "2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12)\n"
                    "3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ cookies\n"
                    "4. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–æ—Ç"
                )
            else:
                bot.send_message(
                    chat_id, 
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥.\n\n"
                    f"–û—à–∏–±–∫–∞: {error_msg}\n\n"
                    f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**\n"
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.\n\n"
                    f"üëâ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **üìã –ò–º–ø–æ—Ä—Ç cookies** (100% –Ω–∞–¥–µ–∂–Ω–æ):\n"
                    f"‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ Instagram —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä\n"
                    f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ cookies (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)\n"
                    f"‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –≤ –±–æ—Ç"
                )
            return
        
        with session_factory() as s:
            user = get_or_create_user(s, message["from"])
            obj = save_session(
                session=s,
                user_id=user.id,
                ig_username=ig_username,
                cookies_json=cookies,
                fernet=fernet,
                ig_password=ig_password,  # Save encrypted password for re-login
            )
        
        del bot.fsm_states[chat_id]
        bot.send_message(chat_id, f"‚úÖ –°–µ—Å—Å–∏—è @{ig_username} —Å–æ–∑–¥–∞–Ω–∞ (id={obj.id}).", reply_markup=get_ig_menu_kb())
    
    elif state == "waiting_complete":
        # Parse complete session data (username, password, cookies)
        try:
            lines = text.strip().split('\n')
            data = {}
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip().lower()
                    value = value.strip()
                    data[key] = value
            
            # Validate required fields
            if 'username' not in data:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            if 'password' not in data:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω password. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # Parse cookies if provided
            cookies = []
            if 'cookies' in data and data['cookies'].strip():
                try:
                    cookies = json.loads(data['cookies'])
                except json.JSONDecodeError:
                    bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
            
            # Save session
            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                settings = get_settings()
                fernet = OptionalFernet(settings.fernet_key)
                
                obj = save_session(
                    session=session,
                    user_id=user.id,
                    ig_username=data['username'],
                    cookies_json=cookies,
                    fernet=fernet,
                    ig_password=data['password']
                )
            
            del bot.fsm_states[chat_id]
            
            success_msg = f"‚úÖ **–ü–æ–ª–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            success_msg += f"üë§ **Username:** @{data['username']}\n"
            success_msg += f"üîê **Password:** {'*' * len(data['password'])}\n"
            success_msg += f"üç™ **Cookies:** {len(cookies)} —à—Ç.\n"
            success_msg += f"üÜî **ID —Å–µ—Å—Å–∏–∏:** {obj.id}\n\n"
            success_msg += f"üéØ **–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**"
            
            bot.send_message(chat_id, success_msg, reply_markup=get_ig_menu_kb())
            
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return


def register_ig_menu_handlers(bot, session_factory) -> None:
    """Register Instagram menu handlers."""
    print(f"[IG-MENU] üöÄ Starting registration for bot {id(bot)}")
    
    # Create wrapper functions that pass bot parameter
    async def wrapped_process_message(message, session_factory):
        return await process_message(message, session_factory, bot)
    
    def wrapped_process_callback_query(callback_query, session_factory):
        return process_callback_query(callback_query, session_factory, bot)
    
    def wrapped_process_instagram_flow(message, session_factory):
        return process_instagram_flow(message, session_factory, bot)
    
    # Register handlers
    bot.ig_menu_process_message = wrapped_process_message
    bot.ig_menu_process_callback_query = wrapped_process_callback_query
    bot.ig_menu_process_instagram_flow = wrapped_process_instagram_flow
    print(f"[IG-MENU] ‚úÖ Handlers registered: {hasattr(bot, 'ig_menu_process_message')}")
