"""Admin menu handlers."""

import os

try:
    from ..keyboards import admin_menu_kb, main_menu, admin_verify_mode_selection_kb
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..services.system_settings import get_auto_check_interval, set_auto_check_interval, get_global_verify_mode, set_global_verify_mode
    from ..models import Account, User, APIKey, Proxy, InstagramSession
    from .user_management import register_user_management_handlers
except ImportError:
    from keyboards import admin_menu_kb, main_menu, admin_verify_mode_selection_kb
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from services.system_settings import get_auto_check_interval, set_auto_check_interval, get_global_verify_mode, set_global_verify_mode
    from models import Account, User, APIKey, Proxy, InstagramSession
    from handlers.user_management import register_user_management_handlers


def register_admin_menu_handlers(bot, session_factory):
    """
    Register admin menu handlers.
    
    Args:
        bot: TelegramBot instance
        session_factory: SQLAlchemy session factory
    """
    
    def handle_admin_menu(message, user):
        """Handle –ê–¥–º–∏–Ω–∫–∞ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        with session_factory() as session:
            interval = get_auto_check_interval(session)
            current_mode = get_global_verify_mode(session)
        
        bot.send_message(
            message["chat"]["id"],
            f"‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏: **{interval} –º–∏–Ω**\n"
            f"‚Ä¢ –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: **{current_mode}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            admin_menu_kb()
        )
    
    def handle_interval_menu(message, user):
        """Handle –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            interval = get_auto_check_interval(session)
        
        bot.send_message(
            message["chat"]["id"],
            f"‚è± **–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: **{interval} –º–∏–Ω—É—Ç**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö):\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 –º–∏–Ω—É—Ç–∞\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: 5, 10, 15, 30\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    
    def handle_verify_mode_menu(message, user):
        """Handle –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            current_mode = get_global_verify_mode(session)
        
        try:
            from ..keyboards import admin_verify_mode_selection_kb
        except ImportError:
            from keyboards import admin_verify_mode_selection_kb
        
        bot.send_message(
            message["chat"]["id"],
            f"üîß **–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: **{current_mode}**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            admin_verify_mode_selection_kb(current_mode)
        )
        
    
    def handle_interval_input(message, user):
        """Handle interval input."""
        text = message.get("text", "").strip()
        
        if not text.isdigit():
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1440."
            )
            return
        
        interval = int(text)
        
        if interval < 1 or interval > 1440:
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
            )
            return
        
        # Save to database
        with session_factory() as session:
            set_auto_check_interval(session, interval)
        
        # Clear FSM state
        user_id = message["from"]["id"]
        if user_id in bot.fsm_states:
            del bot.fsm_states[user_id]
        
        # Calculate stats
        checks_per_hour = 60 // interval
        checks_per_day = checks_per_hour * 24
        
        # Get verify_mode for keyboard
        with session_factory() as session:
            verify_mode = get_global_verify_mode(session)
        
        keyboard = main_menu(is_admin=ensure_admin(user), verify_mode=verify_mode)
        bot.send_message(
            message["chat"]["id"],
            f"‚úÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: **{interval} –º–∏–Ω—É—Ç**\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ —á–∞—Å: ~{checks_per_hour}\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: ~{checks_per_day}\n\n"
            f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!\n"
            f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.",
            keyboard
        )
    
    def handle_statistics(message, user):
        """Handle –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            # Get statistics
            total_users = session.query(User).count()
            active_users = session.query(User).filter(User.is_active == True).count()
            
            total_accounts = session.query(Account).count()
            active_accounts = session.query(Account).filter(Account.done == True).count()
            pending_accounts = session.query(Account).filter(Account.done == False).count()
            
            total_api_keys = session.query(APIKey).count()
            working_api_keys = session.query(APIKey).filter(APIKey.is_work == True).count()
            
            total_proxies = session.query(Proxy).count()
            active_proxies = session.query(Proxy).filter(Proxy.is_active == True).count()
            
            total_ig_sessions = session.query(InstagramSession).count()
            active_ig_sessions = session.query(InstagramSession).filter(InstagramSession.is_active == True).count()
            
            interval = get_auto_check_interval(session)
        
        # Calculate auto-check stats
        checks_per_hour = 60 // interval
        checks_per_day = checks_per_hour * 24
        
        # Format message
        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
            f"üì± **–ê–∫–∫–∞—É–Ω—Ç—ã:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_accounts}\n"
            f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {active_accounts}\n"
            f"‚Ä¢ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {pending_accounts}\n\n"
            f"üîë **API –∫–ª—é—á–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_api_keys}\n"
            f"‚Ä¢ –†–∞–±–æ—á–∏—Ö: {working_api_keys}\n\n"
            f"üåê **–ü—Ä–æ–∫—Å–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_proxies}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_proxies}\n\n"
            f"üì∏ **IG-—Å–µ—Å—Å–∏–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_ig_sessions}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_ig_sessions}\n\n"
            f"‚è± **–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞:**\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫/—á–∞—Å: ~{checks_per_hour}\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫/–¥–µ–Ω—å: ~{checks_per_day}"
        )
        
        bot.send_message(message["chat"]["id"], stats_text)
    
    def handle_restart_bot(message, user):
        """Handle –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        bot.send_message(
            message["chat"]["id"],
            "üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –±–æ—Ç–∞.\n"
            "–í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "‚Ä¢ `–î–ê` - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç - –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        
        # Set FSM state
        user_id = message["from"]["id"]
        bot.fsm_states[user_id] = {"state": "waiting_for_restart_confirm", "data": {}}
    
    def handle_restart_confirm(message, user):
        """Handle restart confirmation."""
        text = message.get("text", "").strip().upper()
        
        # Clear FSM state
        user_id = message["from"]["id"]
        if user_id in bot.fsm_states:
            del bot.fsm_states[user_id]
        
        if text != "–î–ê":
            keyboard = admin_menu_kb()
            bot.send_message(
                message["chat"]["id"],
                "‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.",
                keyboard
            )
            return
        
        # Send final message
        with session_factory() as session:
            verify_mode = get_global_verify_mode(session)
        keyboard = main_menu(is_admin=ensure_admin(user), verify_mode=verify_mode)
        bot.send_message(
            message["chat"]["id"],
            "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å–Ω–æ–≤–∞.",
            keyboard
        )
        
        # Graceful shutdown with restart (exit code 0)
        import sys
        print("\n[ADMIN] Bot restart requested by admin")
        print("[ADMIN] Shutting down gracefully for restart...")
        sys.exit(0)  # Exit code 0 = auto-restart
    
    # Register user management handlers
    user_mgmt_handlers, user_mgmt_callbacks = register_user_management_handlers(bot, session_factory)
    
    # Combine all handlers
    message_handlers = {
        "–ê–¥–º–∏–Ω–∫–∞": handle_admin_menu,
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏": handle_interval_menu,
        "–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏": handle_verify_mode_menu,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã": handle_statistics,
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞": handle_restart_bot,
    }
    
    # Add user management handlers
    message_handlers.update(user_mgmt_handlers)
    
    fsm_handlers = {
        "waiting_for_interval": handle_interval_input,
        "waiting_for_restart_confirm": handle_restart_confirm,
    }
    
    # Register message handlers
    return message_handlers, fsm_handlers, user_mgmt_callbacks

