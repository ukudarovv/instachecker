"""Instagram session-based checking handlers."""

from sqlalchemy.orm import sessionmaker
try:
    from ..utils.access import get_or_create_user, ensure_active
    from ..models import Account
    from ..services.ig_sessions import get_priority_valid_session
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from ..services.checker_ig_session import check_username_via_ig_session
except ImportError:
    from utils.access import get_or_create_user, ensure_active
    from models import Account
    from services.ig_sessions import get_priority_valid_session
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.checker_ig_session import check_username_via_ig_session


def _fmt_result(d, account=None) -> str:
    """Format check result for display in old bot format."""
    result = f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href=\"https://www.instagram.com/{d['username']}/\">{d['username']}</a>"
    
    # Add dates and period if account data is available
    if account:
        from datetime import datetime, date
        
        # Calculate time completed
        completed_text = "1 –¥–Ω–µ–π"  # Default fallback
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º from_date_time –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ from_date
        if hasattr(account, 'from_date_time') and account.from_date_time:
            start_datetime = account.from_date_time
        elif account.from_date:
            if isinstance(account.from_date, datetime):
                start_datetime = account.from_date
            else:
                start_datetime = datetime.combine(account.from_date, datetime.min.time())
        else:
            start_datetime = None
        
        if start_datetime:
            current_datetime = datetime.now()
            time_diff = current_datetime - start_datetime
            
            # If less than 24 hours, show hours
            if time_diff.total_seconds() < 86400:  # 24 hours = 86400 seconds
                hours = int(time_diff.total_seconds() / 3600)
                if hours < 1:
                    hours = 1
                completed_text = f"{hours} —á–∞—Å–æ–≤" if hours > 1 else "1 —á–∞—Å"
            else:
                # Show days
                completed_days = time_diff.days + 1  # +1 to include start day
                completed_days = max(1, completed_days)
                completed_text = f"{completed_days} –¥–Ω–µ–π"
        
        result += f"""
–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç: {account.from_date.strftime("%d.%m.%Y") if account.from_date else "N/A"}
–ó–∞—è–≤–ª–µ–Ω–æ: {account.period} –¥–Ω–µ–π
–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞: {completed_text}
–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç: {account.to_date.strftime("%d.%m.%Y") if account.to_date else "N/A"}"""
    
    # Status in old bot format
    if d.get("exists") is True:
        if d.get("is_private"):
            result += "\n–°—Ç–∞—Ç—É—Å: –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω‚úÖ"
        else:
            result += "\n–°—Ç–∞—Ç—É—Å: –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω‚úÖ"
    elif d.get("exists") is False:
        result += "\n–°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω‚ùå"
    else:
        result += "\n–°—Ç–∞—Ç—É—Å: ‚ùì –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    
    if d.get("error"):
        result += f"\n–û—à–∏–±–∫–∞: {d['error']}"
    
    return result


def register_check_via_ig_handlers(bot, session_factory) -> None:
    """Register Instagram session checking handlers."""

    def process_message(message: dict, session_factory) -> None:
        """Process Instagram checking messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG":
            settings = get_settings()
            fernet = OptionalFernet(settings.encryption_key)

            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                
                ig_session = get_priority_valid_session(session, user.id, fernet)
                if not ig_session:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π IG-—Å–µ—Å—Å–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë.")
                    return
                
                pending = session.query(Account).filter(
                    Account.user_id == user.id, 
                    Account.done == False
                ).all()

            if not pending:
                bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
                return

            ok = nf = unk = 0
            bot.send_message(chat_id, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ IG-—Å–µ—Å—Å–∏—é...")
            
            for acc in pending:
                with session_factory() as s2:
                    igs2 = s2.query(type(ig_session)).get(ig_session.id)
                    try:
                        import asyncio
                        info = asyncio.run(check_username_via_ig_session(
                            db=s2,
                            ig_session=igs2,
                            fernet=fernet,
                            username=acc.account,
                            timeout_sec=12,
                        ))
                        bot.send_message(chat_id, _fmt_result(info, acc))
                        
                        if info.get("exists") is True:
                            a = s2.query(Account).get(acc.id)
                            if a:
                                a.done = True
                                s2.commit()
                            ok += 1
                        elif info.get("exists") is False:
                            nf += 1
                        else:
                            unk += 1
                    except Exception as e:
                        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ <a href=\"https://www.instagram.com/{acc.account}/\">@{acc.account}</a>: {str(e)}")
                        unk += 1
            
            bot.send_message(chat_id, f"–ì–æ—Ç–æ–≤–æ: –Ω–∞–π–¥–µ–Ω–æ ‚Äî {ok}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî {nf}, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî {unk}.")

    # Register handlers
    bot.check_via_ig_process_message = process_message
