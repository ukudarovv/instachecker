"""Account addition FSM handlers."""

try:
    from aiogram import types
    from aiogram.dispatcher import Dispatcher, FSMContext
    from aiogram.dispatcher.filters import Text
except ImportError:
    # Fallback for direct API usage
    types = None
    Dispatcher = None
    FSMContext = None
    Text = None

from sqlalchemy.orm import sessionmaker

try:
    from ..states import AddAccountStates
    from ..keyboards import cancel_kb, main_menu
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..services.accounts import normalize_username, find_duplicate, create_account
    from ..services.checker import is_valid_instagram_username, check_account_exists_placeholder
except ImportError:
    from states import AddAccountStates
    from keyboards import cancel_kb, main_menu
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from services.accounts import normalize_username, find_duplicate, create_account
    from services.checker import is_valid_instagram_username, check_account_exists_placeholder


def register_add_account_handlers(dp, SessionLocal):
    """Register add account FSM handlers."""
    
    @dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    async def start_add_account(message):
        """Start add account FSM - simplified without days input."""
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        
        await message.answer(
            "üÜî –í–≤–µ–¥–∏—Ç–µ Instagram username (–º–æ–∂–Ω–æ —Å @):\n\n"
            "üìÖ –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: 30 –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            "‚ÑπÔ∏è –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è",
            reply_markup=cancel_kb()
        )
        # Set state for username input
        # Note: In direct API mode, we'll handle state in bot.py
    
    @dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞")
    async def cancel_any(message):
        """Cancel any FSM operation."""
        # Reset state and show main menu
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(is_admin=ensure_admin(user)))
    
    # These handlers will be integrated into the main bot logic
    # since we're using direct API calls
