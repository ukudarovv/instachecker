"""Common message handlers."""

try:
    from aiogram import types
    from aiogram.dispatcher import FSMContext
except ImportError:
    # Fallback for direct API usage
    types = None
    FSMContext = None

from sqlalchemy.orm import Session

try:
    from ..database import get_session_factory, get_engine
    from ..models import User
    from ..keyboards import main_menu
    from ..utils.access import get_or_create_user, ensure_active, ensure_admin
    from ..config import get_settings
except ImportError:
    from database import get_session_factory, get_engine
    from models import User
    from keyboards import main_menu
    from utils.access import get_or_create_user, ensure_active, ensure_admin
    from config import get_settings


def register_common_handlers(dp, SessionLocal):
    """Register all common handlers."""
    
    @dp.message_handler(commands=["start"])
    async def cmd_start(message):
        """Handle /start command."""
        with SessionLocal() as session:
            try:
                from ..services.system_settings import get_global_verify_mode
            except ImportError:
                from services.system_settings import get_global_verify_mode
            
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞.\n"
                    "–ü–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é."
                )
                return
            verify_mode = get_global_verify_mode(session)
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu(is_admin=ensure_admin(user), verify_mode=verify_mode)
            )

    @dp.message_handler(lambda m: m.text and m.text.lower() in {"–º–µ–Ω—é", "menu"})
    async def show_menu(message):
        """Handle Menu button."""
        with SessionLocal() as session:
            try:
                from ..services.system_settings import get_global_verify_mode
            except ImportError:
                from services.system_settings import get_global_verify_mode
            
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            verify_mode = get_global_verify_mode(session)
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu(is_admin=ensure_admin(user), verify_mode=verify_mode)
            )

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞)
    @dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    async def add_account_entry(message):
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            await message.answer("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∞—Å—Ç–µ—Ä (–≠—Ç–∞–ø 2).")

    @dp.message_handler(lambda m: m.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
    async def active_accounts(message):
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –≠—Ç–∞–ø–µ 3.")

    @dp.message_handler(lambda m: m.text == "–ê–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
    async def pending_accounts(message):
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            await message.answer("üïí –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚Äî –≠—Ç–∞–ø 3.")

    @dp.message_handler(lambda m: m.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã")
    async def check_accounts(message):
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            await message.answer("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ‚Äî –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –≠—Ç–∞–ø–µ 4.")
    
    @dp.message_handler(commands=["traffic_stats"])
    async def traffic_stats(message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞."""
        try:
            from ..services.traffic_monitor import get_traffic_monitor
        except ImportError:
            from services.traffic_monitor import get_traffic_monitor
        
        monitor = get_traffic_monitor()
        total_stats = monitor.get_total_stats()
        
        if total_stats['total_requests'] == 0:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å.")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–§–ò–ö–ê**

üìä **–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:** {monitor._format_bytes(total_stats['total_traffic'])}
üî¢ **–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {total_stats['total_requests']}
‚úÖ **–£—Å–ø–µ—à–Ω—ã—Ö:** {total_stats['successful_requests']}
‚ùå **–ù–µ—É–¥–∞—á–Ω—ã—Ö:** {total_stats['failed_requests']}
üìà **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {total_stats['success_rate']}%
üìä **–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å:** {monitor._format_bytes(total_stats['average_traffic_per_request'])}
üåê **–ü—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {total_stats['proxies_used']}

üìä **–ü–û –ü–†–û–ö–°–ò:**"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–∫—Å–∏
        for proxy_ip, proxy_stats in monitor.proxy_traffic.items():
            proxy_stats_detailed = monitor.get_proxy_stats(proxy_ip)
            stats_text += f"""
üåê **{proxy_ip}:**
  üìä –¢—Ä–∞—Ñ–∏–∫: {monitor._format_bytes(proxy_stats['total_traffic'])}
  üî¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {proxy_stats['total_requests']}
  ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {proxy_stats_detailed['success_rate']}%"""
        
        await message.answer(stats_text, parse_mode="Markdown")

    @dp.message_handler(lambda m: m.text == "API")
    async def api_menu(message):
        with SessionLocal() as session:
            user = get_or_create_user(session, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            await message.answer("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API-–∫–ª—é—á–∞–º–∏ ‚Äî –≠—Ç–∞–ø 5.")


# Legacy function for backward compatibility
def register_handlers(dp):
    """Legacy function for backward compatibility."""
    settings = get_settings()
    engine = get_engine(settings.db_url)
    session_factory = get_session_factory(engine)
    register_common_handlers(dp, session_factory)
