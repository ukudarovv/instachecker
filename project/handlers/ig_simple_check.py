"""Simple Instagram checking handlers with screenshots."""

import os
from sqlalchemy.orm import sessionmaker
try:
    from ..utils.access import get_or_create_user, ensure_active
    from ..models import Account
    from ..services.ig_sessions import get_active_session, decode_cookies
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from ..services.ig_simple_checker import check_account_with_screenshot
except ImportError:
    from utils.access import get_or_create_user, ensure_active
    from models import Account
    from services.ig_sessions import get_active_session, decode_cookies
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.ig_simple_checker import check_account_with_screenshot


def _format_result(result: dict) -> str:
    """Format check result for display."""
    lines = [f"@{result['username']}"]
    
    if result.get("full_name"):
        lines.append(f"–ò–º—è: {result['full_name']}")
    
    if result.get("followers") is not None:
        lines.append(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {result['followers']:,}")
    
    if result.get("following") is not None:
        lines.append(f"–ü–æ–¥–ø–∏—Å–∫–∏: {result['following']:,}")
    
    if result.get("posts") is not None:
        lines.append(f"–ü–æ—Å—Ç—ã: {result['posts']:,}")
    
    # Status
    if result.get("exists") is True:
        lines.append("–°—Ç–∞—Ç—É—Å: ‚úÖ –Ω–∞–π–¥–µ–Ω")
    elif result.get("exists") is False:
        lines.append("–°—Ç–∞—Ç—É—Å: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        lines.append("–°—Ç–∞—Ç—É—Å: ‚ùì –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
    
    if result.get("error"):
        lines.append(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    return "\n".join(lines)


def register_ig_simple_check_handlers(bot, session_factory) -> None:
    """Register simple Instagram checking handlers."""

    def process_message(message: dict, session_factory) -> None:
        """Process simple Instagram checking messages."""
        text = message.get("text", "")
        chat_id = message["chat"]["id"]
        
        if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ IG":
            settings = get_settings()
            fernet = OptionalFernet(settings.encryption_key)

            with session_factory() as session:
                user = get_or_create_user(session, message["from"])
                if not ensure_active(user):
                    bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                    return
                
                ig_session = get_active_session(session, user.id)
                if not ig_session:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π IG-—Å–µ—Å—Å–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é 'Instagram'.")
                    return
                
                pending = session.query(Account).filter(
                    Account.user_id == user.id, 
                    Account.done == False
                ).all()

            if not pending:
                bot.send_message(chat_id, "üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
                return

            # Decode cookies
            try:
                cookies = decode_cookies(fernet, ig_session.cookies)
            except Exception as e:
                bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ cookies: {e}")
                return

            bot.send_message(chat_id, f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é {len(pending)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Instagram —Å —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏...")
            
            ok = nf = unk = 0
            
            for acc in pending:
                try:
                    import asyncio
                    result = asyncio.run(check_account_with_screenshot(
                        username=acc.account,
                        cookies=cookies,
                        headless=settings.ig_headless,
                        timeout_ms=30000
                    ))
                    
                    # Send result text
                    result_text = _format_result(result)
                    bot.send_message(chat_id, result_text)
                    
                    # Send screenshot if available
                    if result.get("screenshot_path") and os.path.exists(result["screenshot_path"]):
                        try:
                            screenshot_path = result["screenshot_path"]
                            bot.send_photo(chat_id, screenshot_path, caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç @{acc.account}")
                            # Delete screenshot after sending to save disk space
                            try:
                                os.remove(screenshot_path)
                                print(f"üóëÔ∏è Screenshot deleted: {screenshot_path}")
                            except Exception as del_err:
                                print(f"Warning: Failed to delete screenshot: {del_err}")
                        except Exception as e:
                            print(f"Failed to send photo: {e}")
                    
                    # Update account status
                    if result.get("exists") is True:
                        with session_factory() as s2:
                            account = s2.query(Account).get(acc.id)
                            if account:
                                account.done = True
                                s2.commit()
                        ok += 1
                    elif result.get("exists") is False:
                        nf += 1
                    else:
                        unk += 1
                        
                except Exception as e:
                    bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ @{acc.account}: {str(e)}")
                    unk += 1
            
            # Final summary
            summary = f"üéØ –ì–æ—Ç–æ–≤–æ!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {ok}\n‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {nf}\n‚Ä¢ –û—à–∏–±–∫–∏: {unk}"
            bot.send_message(chat_id, summary)

    # Register handlers
    bot.ig_simple_check_process_message = process_message
