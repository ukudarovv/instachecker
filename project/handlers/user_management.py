"""User management handlers for admin panel."""

import math
from sqlalchemy import func

try:
    from ..keyboards import (
        user_management_kb, 
        users_list_kb, 
        user_card_kb,
        confirm_user_delete_kb,
        confirm_delete_inactive_kb,
        admin_menu_kb,
        user_accounts_kb
    )
    from ..utils.access import ensure_admin
    from ..models import User, Account, APIKey, Proxy, InstagramSession
    from ..services.system_settings import get_auto_check_interval
except ImportError:
    from keyboards import (
        user_management_kb, 
        users_list_kb, 
        user_card_kb,
        confirm_user_delete_kb,
        confirm_delete_inactive_kb,
        admin_menu_kb,
        user_accounts_kb
    )
    from utils.access import ensure_admin
    from models import User, Account, APIKey, Proxy, InstagramSession
    from services.system_settings import get_auto_check_interval


# Constants
USERS_PER_PAGE = 10
ACCOUNTS_PER_PAGE = 10


def register_user_management_handlers(bot, session_factory):
    """
    Register user management handlers.
    
    Args:
        bot: TelegramBot instance
        session_factory: SQLAlchemy session factory
    """
    
    def get_users_page(session, filter_type: str, page: int = 1):
        """Get paginated users list based on filter."""
        query = session.query(User)
        
        if filter_type == "active":
            query = query.filter(User.is_active == True)
        elif filter_type == "inactive":
            query = query.filter(User.is_active == False)
        elif filter_type == "admin":
            query = query.filter(User.role.in_(["admin", "superuser"]))
        
        # Get total count
        total_count = query.count()
        total_pages = math.ceil(total_count / USERS_PER_PAGE) if total_count > 0 else 1
        
        # Get paginated results
        offset = (page - 1) * USERS_PER_PAGE
        users = query.order_by(User.id).offset(offset).limit(USERS_PER_PAGE).all()
        
        return users, total_pages, total_count
    
    def get_accounts_page(session, user_id: int, show_active: bool, page: int = 1):
        """Get paginated accounts list for user."""
        query = session.query(Account).filter(Account.user_id == user_id)
        
        # Filter by status
        if show_active:
            query = query.filter(Account.done == True)
        else:
            query = query.filter(Account.done == False)
        
        # Get total count
        total_count = query.count()
        total_pages = math.ceil(total_count / ACCOUNTS_PER_PAGE) if total_count > 0 else 1
        
        # Get paginated results
        offset = (page - 1) * ACCOUNTS_PER_PAGE
        accounts = query.order_by(Account.id).offset(offset).limit(ACCOUNTS_PER_PAGE).all()
        
        return accounts, total_pages, total_count
    
    def handle_user_management_menu(message, user):
        """Handle –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            total_users = session.query(User).count()
            active_users = session.query(User).filter(User.is_active == True).count()
            inactive_users = session.query(User).filter(User.is_active == False).count()
            admins = session.query(User).filter(
                User.role.in_(["admin", "superuser"])
            ).count()
        
        bot.send_message(
            message["chat"]["id"],
            f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            user_management_kb()
        )
    
    def show_users_list(message, filter_type: str, page: int = 1):
        """Show users list with pagination."""
        with session_factory() as session:
            users, total_pages, total_count = get_users_page(session, filter_type, page)
            
            if not users:
                filter_names = {
                    "all": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "active": "–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "inactive": "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    "admin": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
                }
                bot.send_message(
                    message["chat"]["id"],
                    f"üì≠ –ù–µ—Ç {filter_names.get(filter_type, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}."
                )
                return
            
            # Prepare title
            filter_titles = {
                "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
            }
            filter_icons = {
                "all": "üë•",
                "active": "‚úÖ",
                "inactive": "‚ùå",
                "admin": "üëë"
            }
            
            icon = filter_icons.get(filter_type, "üë•")
            title = filter_titles.get(filter_type, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            
            user_list_text = (
                f"{icon} <b>{title}</b>\n\n"
                f"üìä –í—Å–µ–≥–æ: {total_count} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            
            bot.send_message(
                message["chat"]["id"],
                user_list_text,
                users_list_kb(users, page, total_pages, filter_type)
            )
    
    def handle_all_users(message, user):
        """Handle –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        show_users_list(message, "all", 1)
    
    def handle_active_users(message, user):
        """Handle –ê–∫—Ç–∏–≤–Ω—ã–µ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        show_users_list(message, "active", 1)
    
    def handle_inactive_users(message, user):
        """Handle –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        show_users_list(message, "inactive", 1)
    
    def handle_admin_users(message, user):
        """Handle –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        show_users_list(message, "admin", 1)
    
    def handle_delete_inactive(message, user):
        """Handle –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            inactive_count = session.query(User).filter(
                User.is_active == False
            ).count()
            
            if inactive_count == 0:
                bot.send_message(
                    message["chat"]["id"],
                    "üì≠ –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                )
                return
            
            bot.send_message(
                message["chat"]["id"],
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å <b>{inactive_count}</b> –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n"
                f"‚Ä¢ –í—Å–µ –∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ã\n"
                f"‚Ä¢ –í—Å–µ –∏—Ö API –∫–ª—é—á–∏\n"
                f"‚Ä¢ –í—Å–µ –∏—Ö –ø—Ä–æ–∫—Å–∏\n"
                f"‚Ä¢ –í—Å–µ –∏—Ö Instagram —Å–µ—Å—Å–∏–∏\n\n"
                f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                confirm_delete_inactive_kb()
            )
    
    def handle_back_to_admin(message, user):
        """Handle –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É button."""
        if not ensure_admin(user):
            bot.send_message(message["chat"]["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        with session_factory() as session:
            interval = get_auto_check_interval(session)
        
        bot.send_message(
            message["chat"]["id"],
            f"‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{interval} –º–∏–Ω</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            admin_menu_kb()
        )
    
    # Register callback handlers
    def handle_callback_usr_page(callback_query, user, filter_type, page):
        """Handle pagination callback."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page)
        
        with session_factory() as session:
            users, total_pages, total_count = get_users_page(session, filter_type, page)
            
            if not users:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                )
                return
            
            # Prepare title
            filter_titles = {
                "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
            }
            filter_icons = {
                "all": "üë•",
                "active": "‚úÖ",
                "inactive": "‚ùå",
                "admin": "üëë"
            }
            
            icon = filter_icons.get(filter_type, "üë•")
            title = filter_titles.get(filter_type, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
            
            user_list_text = (
                f"{icon} <b>{title}</b>\n\n"
                f"üìä –í—Å–µ–≥–æ: {total_count} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                user_list_text,
                users_list_kb(users, page, total_pages, filter_type)
            )
            
            bot.answer_callback_query(callback_query["id"])
    
    def handle_callback_usr_view(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_view callback - show user details."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            # Get user statistics
            accounts_count = session.query(Account).filter(
                Account.user_id == user_id
            ).count()
            
            api_keys_count = session.query(APIKey).filter(
                APIKey.user_id == user_id
            ).count()
            
            proxies_count = session.query(Proxy).filter(
                Proxy.user_id == user_id
            ).count()
            
            ig_sessions_count = session.query(InstagramSession).filter(
                InstagramSession.user_id == user_id
            ).count()
            
            # Format role
            role_text = {
                "user": "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "superuser": "üëë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            }.get(target_user.role, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # Format status
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if target_user.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            # Format verify mode
            verify_mode_text = {
                "api": "üîë API",
                "proxy": "üåê –ü—Ä–æ–∫—Å–∏",
                "instagram": "üì∏ Instagram"
            }.get(target_user.verify_mode, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            user_info = (
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
                f"<b>ID:</b> <code>{target_user.id}</code>\n"
                f"<b>Username:</b> @{target_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"<b>–†–æ–ª—å:</b> {role_text}\n"
                f"<b>–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {verify_mode_text}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {accounts_count}\n"
                f"‚Ä¢ API –∫–ª—é—á–µ–π: {api_keys_count}\n"
                f"‚Ä¢ –ü—Ä–æ–∫—Å–∏: {proxies_count}\n"
                f"‚Ä¢ IG-—Å–µ—Å—Å–∏–π: {ig_sessions_count}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                user_info,
                user_card_kb(target_user.id, target_user.is_active, target_user.role, page, filter_type)
            )
            
            bot.answer_callback_query(callback_query["id"])
    
    def handle_callback_usr_activate(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_activate callback - grant access to user."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            target_user.is_active = True
            session.commit()
            
            bot.answer_callback_query(
                callback_query["id"],
                f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è {target_user.username}"
            )
            
            # Refresh user card
            handle_callback_usr_view(callback_query, user, user_id, page, filter_type)
    
    def handle_callback_usr_deactivate(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_deactivate callback - revoke access from user."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        # Prevent deactivating yourself
        if user.id == int(user_id):
            bot.answer_callback_query(
                callback_query["id"],
                "‚õî –ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É —Å–∞–º–æ–≥–æ —Å–µ–±—è!"
            )
            return
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            target_user.is_active = False
            session.commit()
            
            bot.answer_callback_query(
                callback_query["id"],
                f"üö´ –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω –¥–ª—è {target_user.username}"
            )
            
            # Refresh user card
            handle_callback_usr_view(callback_query, user, user_id, page, filter_type)
    
    def handle_callback_usr_promote(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_promote callback - make user admin."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            target_user.role = "admin"
            # Also activate if not active
            if not target_user.is_active:
                target_user.is_active = True
            session.commit()
            
            bot.answer_callback_query(
                callback_query["id"],
                f"üëë {target_user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            )
            
            # Refresh user card
            handle_callback_usr_view(callback_query, user, user_id, page, filter_type)
    
    def handle_callback_usr_demote(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_demote callback - remove admin role."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        # Prevent demoting yourself
        if user.id == int(user_id):
            bot.answer_callback_query(
                callback_query["id"],
                "‚õî –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è!"
            )
            return
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            target_user.role = "user"
            session.commit()
            
            bot.answer_callback_query(
                callback_query["id"],
                f"üë§ {target_user.username} —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            # Refresh user card
            handle_callback_usr_view(callback_query, user, user_id, page, filter_type)
    
    def handle_callback_usr_accounts(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_accounts callback - show user's Instagram accounts (default: active)."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # Show active accounts by default
        show_user_accounts(callback_query, user, user_id, page, filter_type, acc_page=1, show_active=True)
    
    def show_user_accounts(callback_query, user, user_id, user_page=1, user_filter="all", acc_page=1, show_active=True):
        """Show paginated accounts list."""
        user_id = int(user_id)
        user_page = int(user_page) if user_page else 1
        acc_page = int(acc_page) if acc_page else 1
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == user_id).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            # Get paginated accounts
            accounts, total_pages, total_count = get_accounts_page(session, user_id, show_active, acc_page)
            
            # Get counts for both types
            active_count = session.query(Account).filter(
                Account.user_id == user_id,
                Account.done == True
            ).count()
            
            inactive_count = session.query(Account).filter(
                Account.user_id == user_id,
                Account.done == False
            ).count()
            
            if total_count == 0:
                status_text = "–∞–∫—Ç–∏–≤–Ω—ã—Ö" if show_active else "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö"
                bot.answer_callback_query(
                    callback_query["id"],
                    f"üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç {status_text} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                )
                return
            
            # Build accounts list
            status_icon = "‚úÖ" if show_active else "‚è≥"
            status_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ)" if show_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)"
            
            accounts_text = (
                f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> @{target_user.username}\n\n"
                f"{status_icon} <b>{status_text}</b>\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(accounts)} –∏–∑ {total_count} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {acc_page}/{total_pages}\n\n"
            )
            
            # Calculate starting number
            start_num = (acc_page - 1) * ACCOUNTS_PER_PAGE + 1
            
            for idx, acc in enumerate(accounts, start_num):
                accounts_text += f"{idx}. <b><a href=\"https://www.instagram.com/{acc.account}/\">@{acc.account}</a></b>\n"
                
                if acc.from_date:
                    accounts_text += f"   üìÖ –°: {acc.from_date}"
                    if acc.to_date:
                        accounts_text += f" ‚Üí –î–æ: {acc.to_date}"
                    accounts_text += "\n"
                elif acc.to_date:
                    accounts_text += f"   üìÖ –î–æ: {acc.to_date}\n"
                
                if acc.period:
                    accounts_text += f"   ‚è± –ü–µ—Ä–∏–æ–¥: {acc.period} –¥–Ω–µ–π\n"
                if acc.date_of_finish:
                    accounts_text += f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {acc.date_of_finish}\n"
                
                accounts_text += "\n"
            
            # Summary
            accounts_text += (
                f"üìä <b>–ò—Ç–æ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {active_count + inactive_count}"
            )
            
            # Send/edit message
            keyboard = user_accounts_kb(user_id, acc_page, total_pages, show_active, user_page, user_filter)
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                accounts_text,
                keyboard
            )
            
            bot.answer_callback_query(callback_query["id"])
    
    def handle_callback_usr_acc_page(callback_query, user, user_id, acc_page, show_active, user_page, user_filter):
        """Handle accounts pagination callback."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        show_active = bool(int(show_active))
        show_user_accounts(callback_query, user, user_id, user_page, user_filter, acc_page, show_active)
    
    def handle_callback_usr_acc_toggle(callback_query, user, user_id, acc_page, show_active, user_page, user_filter):
        """Handle toggle between active/inactive accounts."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        show_active = bool(int(show_active))
        show_user_accounts(callback_query, user, user_id, user_page, user_filter, acc_page, show_active)
    
    def handle_callback_usr_delete_confirm(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_delete_confirm callback - ask for confirmation."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        # Prevent deleting yourself
        if user.id == int(user_id):
            bot.answer_callback_query(
                callback_query["id"],
                "‚õî –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!"
            )
            return
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            # Get counts for confirmation
            accounts_count = session.query(Account).filter(
                Account.user_id == user_id
            ).count()
            
            warning_text = (
                f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"<b>@{target_user.username}</b> (ID: {target_user.id})\n\n"
                f"–≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n"
                f"‚Ä¢ {accounts_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                f"‚Ä¢ –í—Å–µ API –∫–ª—é—á–∏\n"
                f"‚Ä¢ –í—Å–µ –ø—Ä–æ–∫—Å–∏\n"
                f"‚Ä¢ –í—Å–µ IG-—Å–µ—Å—Å–∏–∏\n\n"
                f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
            )
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                warning_text,
                confirm_user_delete_kb(user_id, page, filter_type)
            )
            
            bot.answer_callback_query(callback_query["id"])
    
    def handle_callback_usr_delete_ok(callback_query, user, user_id, page=1, filter_type="all"):
        """Handle usr_delete_ok callback - actually delete user."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        page = int(page) if page else 1
        
        # Prevent deleting yourself
        if user.id == int(user_id):
            bot.answer_callback_query(
                callback_query["id"],
                "‚õî –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!"
            )
            return
        
        with session_factory() as session:
            target_user = session.query(User).filter(User.id == int(user_id)).first()
            
            if not target_user:
                bot.answer_callback_query(
                    callback_query["id"],
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            username = target_user.username
            session.delete(target_user)
            session.commit()
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n"
                f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã."
            )
            
            bot.answer_callback_query(
                callback_query["id"],
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω"
            )
    
    def handle_callback_usr_back(callback_query, user):
        """Handle usr_back callback - go back to user management menu."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        with session_factory() as session:
            total_users = session.query(User).count()
            active_users = session.query(User).filter(User.is_active == True).count()
            inactive_users = session.query(User).filter(User.is_active == False).count()
            admins = session.query(User).filter(
                User.role.in_(["admin", "superuser"])
            ).count()
        
        bot.edit_message_text(
            callback_query["message"]["chat"]["id"],
            callback_query["message"]["message_id"],
            f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."
        )
        
        bot.answer_callback_query(callback_query["id"])
    
    def handle_callback_delete_inactive_ok(callback_query, user):
        """Handle usr_delete_inactive_ok callback - delete all inactive users."""
        if not ensure_admin(user):
            bot.answer_callback_query(callback_query["id"], "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        with session_factory() as session:
            # Get all inactive users
            inactive_users = session.query(User).filter(
                User.is_active == False
            ).all()
            
            if not inactive_users:
                bot.answer_callback_query(
                    callback_query["id"],
                    "üì≠ –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                return
            
            # Prevent deleting yourself (safety check)
            inactive_users = [u for u in inactive_users if u.id != user.id]
            
            count = len(inactive_users)
            
            # Delete all inactive users
            for inactive_user in inactive_users:
                session.delete(inactive_user)
            
            session.commit()
            
            bot.edit_message_text(
                callback_query["message"]["chat"]["id"],
                callback_query["message"]["message_id"],
                f"‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>\n"
                f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã."
            )
            
            bot.answer_callback_query(
                callback_query["id"],
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
    
    # Register message handlers
    return {
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏": handle_user_management_menu,
        "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": handle_all_users,
        "–ê–∫—Ç–∏–≤–Ω—ã–µ": handle_active_users,
        "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ": handle_inactive_users,
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": handle_admin_users,
        "–£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö": handle_delete_inactive,
        "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É": handle_back_to_admin,
    }, {
        # Callback handlers with pattern matching
        "usr_page": handle_callback_usr_page,
        "usr_view": handle_callback_usr_view,
        "usr_activate": handle_callback_usr_activate,
        "usr_deactivate": handle_callback_usr_deactivate,
        "usr_promote": handle_callback_usr_promote,
        "usr_demote": handle_callback_usr_demote,
        "usr_accounts": handle_callback_usr_accounts,
        "usr_acc_page": handle_callback_usr_acc_page,
        "usr_acc_toggle": handle_callback_usr_acc_toggle,
        "usr_delete_confirm": handle_callback_usr_delete_confirm,
        "usr_delete_ok": handle_callback_usr_delete_ok,
        "usr_back": handle_callback_usr_back,
        "usr_delete_inactive_ok": handle_callback_delete_inactive_ok,
    }
