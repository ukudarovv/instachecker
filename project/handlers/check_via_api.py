"""Check accounts via API handlers."""

try:
    from aiogram import types
    from aiogram.dispatcher import Dispatcher
except ImportError:
    types = None
    Dispatcher = None

from sqlalchemy.orm import sessionmaker

try:
    from ..utils.access import get_or_create_user, ensure_active
    from ..models import Account
    from ..services.check_via_api import check_account_exists_via_api
except ImportError:
    from utils.access import get_or_create_user, ensure_active
    from models import Account
    from services.check_via_api import check_account_exists_via_api


def register_check_via_api_handlers(dp: Dispatcher, SessionLocal: sessionmaker) -> None:
    """
    Register check via API handlers.
    
    Args:
        dp: Aiogram dispatcher
        SessionLocal: SQLAlchemy session factory
    """

    @dp.message_handler(lambda m: m.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API (–≤—Å–µ)")
    async def check_all(message: types.Message):
        """Check all pending accounts via RapidAPI."""
        await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ RapidAPI...")
        
        with SessionLocal() as s:
            user = get_or_create_user(s, message.from_user)
            if not ensure_active(user):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            accs = s.query(Account).filter(
                Account.user_id == user.id,
                Account.done == False
            ).all()
        
        if not accs:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
            return

        ok_count = 0
        not_found_count = 0
        unknown_count = 0
        
        for a in accs:
            with SessionLocal() as s2:
                info = await check_account_exists_via_api(s2, user.id, a.account)
            
            if info["exists"] is True:
                ok_count += 1
            elif info["exists"] is False:
                not_found_count += 1
            else:
                unknown_count += 1
            
            mark = "‚úÖ" if info["exists"] is True else ("‚ùå" if info["exists"] is False else "‚ùì")
            error_msg = f" ‚Äî {info.get('error')}" if info.get('error') else " ‚Äî ok"
            await message.answer(f"{mark} @{info['username']}{error_msg}")
        
        await message.answer(
            f"–ì–æ—Ç–æ–≤–æ: –Ω–∞–π–¥–µ–Ω–æ ‚Äî {ok_count}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî {not_found_count}, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî {unknown_count}."
        )

