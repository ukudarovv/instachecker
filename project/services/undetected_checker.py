"""Instagram account checker using undetected-chromedriver for maximum stealth."""

import asyncio
import random
import time
import os
import sys
from typing import Dict, Any, Optional

# –ü–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å distutils –≤ Python 3.12
def patch_distutils():
    """–°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ç—á –¥–ª—è distutils"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å distutils
        import types
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å distutils
        distutils = types.ModuleType('distutils')
        distutils.__path__ = []
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å version
        version = types.ModuleType('version')
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è LooseVersion
        class LooseVersion:
            def __init__(self, vstring=None):
                self.vstring = str(vstring) if vstring else ""
                self.version = self.vstring
            
            def __str__(self):
                return self.vstring
            
            def __repr__(self):
                return f"LooseVersion('{self.vstring}')"
            
            def __lt__(self, other):
                return str(self) < str(other)
            
            def __le__(self, other):
                return str(self) <= str(other)
            
            def __gt__(self, other):
                return str(self) > str(other)
            
            def __ge__(self, other):
                return str(self) >= str(other)
            
            def __eq__(self, other):
                return str(self) == str(other)
            
            def __ne__(self, other):
                return str(self) != str(other)
        
        version.LooseVersion = LooseVersion
        distutils.version = version
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ sys.modules
        sys.modules['distutils'] = distutils
        sys.modules['distutils.version'] = version
        
        return True
    except Exception as e:
        print(f"[UNDETECTED-CHECKER] ‚ö†Ô∏è Failed to patch distutils: {e}")
        return False

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
patch_distutils()

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º undetected_chromedriver
try:
    import undetected_chromedriver as uc
    print("[UNDETECTED-CHECKER] ‚úÖ undetected-chromedriver imported successfully")
except ImportError as e:
    print(f"[UNDETECTED-CHECKER] ‚ùå Failed to import undetected-chromedriver: {e}")
    uc = None

async def check_via_json_endpoint(username: str) -> Optional[bool]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ JSON endpoint Instagram –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞.
    
    Args:
        username: Instagram username to check
    
    Returns:
        True if exists, False if not found, None if error/uncertain
    """
    try:
        import requests
        
        headers = {
            'User-Agent': random.choice([
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]),
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'Referer': 'https://www.instagram.com/',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
        }
        
        # –ü—Ä–æ–±—É–µ–º JSON endpoint
        print(f"[JSON-ENDPOINT] üîç Checking @{username} via JSON API...")
        response = requests.get(
            f'https://www.instagram.com/api/v1/users/web_profile_info/?username={username}',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'user' in data['data']:
                print(f"[JSON-ENDPOINT] ‚úÖ Account @{username} found via JSON API")
                return True
            else:
                print(f"[JSON-ENDPOINT] ‚ùå Account @{username} not found via JSON API")
                return False
        elif response.status_code == 404:
            print(f"[JSON-ENDPOINT] ‚ùå Account @{username} not found (404)")
            return False
        else:
            print(f"[JSON-ENDPOINT] ‚ö†Ô∏è Unexpected status code: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"[JSON-ENDPOINT] ‚ö†Ô∏è Error checking via JSON endpoint: {e}")
        return None

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
def get_random_browser_params():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    return {
        "user_agent": random.choice([
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0'
        ]),
        "viewport": random.choice([
            (1920, 1080), (1366, 768), (1536, 864), (1440, 900), (1280, 720),
            (1600, 900), (1024, 768), (1280, 1024), (1680, 1050), (2560, 1440)
        ]),
        "locale": random.choice([
            "en-US", "en-GB", "de-DE", "fr-FR", "es-ES", "it-IT", "pt-BR", "ru-RU",
            "ja-JP", "ko-KR", "zh-CN", "ar-SA", "hi-IN", "th-TH", "vi-VN"
        ]),
        "timezone": random.choice([
            "America/New_York", "America/Los_Angeles", "America/Chicago", "America/Denver",
            "Europe/London", "Europe/Berlin", "Europe/Paris", "Europe/Rome", "Europe/Madrid",
            "Asia/Tokyo", "Asia/Shanghai", "Asia/Seoul", "Asia/Dubai", "Asia/Kolkata",
            "Australia/Sydney", "Australia/Melbourne", "Africa/Cairo", "Africa/Johannesburg"
        ])
    }

async def check_account_undetected_chrome(
    username: str,
    proxy: Optional[Dict] = None,
    screenshot_path: Optional[str] = None,
    headless: bool = True
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram —Å –ø–æ–º–æ—â—å—é undetected-chromedriver
    """
    result = {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "error": None,
        "checked_via": "undetected_chrome",
        "screenshot_path": None
    }
    
    if uc is None:
        result["error"] = "undetected-chromedriver not available"
        return result
    
    print(f"[UNDETECTED-CHROME] üîç Checking @{username}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        browser_params = get_random_browser_params()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ Chrome
        options = uc.ChromeOptions()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-web-security')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_argument('--disable-background-timer-throttling')
        options.add_argument('--disable-backgrounding-occluded-windows')
        options.add_argument('--disable-renderer-backgrounding')
        options.add_argument('--disable-field-trial-config')
        options.add_argument('--disable-ipc-flooding-protection')
        options.add_argument('--no-first-run')
        options.add_argument('--no-default-browser-check')
        options.add_argument('--disable-default-apps')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-translate')
        options.add_argument('--disable-background-networking')
        options.add_argument('--disable-sync')
        options.add_argument('--metrics-recording-only')
        options.add_argument('--no-report-upload')
        options.add_argument('--disable-logging')
        options.add_argument('--disable-gpu-logging')
        options.add_argument('--silent')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        options.add_argument('--disable-features=TranslateUI')
        options.add_argument('--disable-ipc-flooding-protection')
        options.add_argument('--exclude-switches=enable-automation')
        options.add_argument('--disable-infobars')
        options.add_argument('--disable-features=IsolateOrigins,site-per-process')
        options.add_argument('--disable-site-isolation-trials')
        options.add_argument('--disable-features=BlockInsecurePrivateNetworkRequests')
        options.add_argument('--disable-client-side-phishing-detection')
        options.add_argument('--disable-component-extensions-with-background-pages')
        options.add_argument('--disable-default-apps')
        options.add_argument('--disable-domain-reliability')
        options.add_argument('--disable-features=AudioServiceOutOfProcess')
        options.add_argument('--disable-hang-monitor')
        options.add_argument('--disable-prompt-on-repost')
        options.add_argument('--disable-renderer-backgrounding')
        options.add_argument('--disable-sync-preferences')
        options.add_argument('--disable-web-resources')
        options.add_argument('--no-service-autorun')
        options.add_argument('--password-store=basic')
        options.add_argument('--use-mock-keychain')
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        additional_args = [
            '--disable-features=VizDisplayCompositor',
            '--disable-features=TranslateUI',
            '--disable-features=MediaRouter',
            '--disable-features=WebRTC',
            '--disable-features=WebRtcHideLocalIpsWithMdns',
            '--disable-features=WebRtcUseMinMaxVEADimensions',
            '--disable-features=WebRtcUseEchoCanceller3',
            '--disable-features=WebRtcUseMinMaxVEADimensions'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        for arg in random.sample(additional_args, random.randint(2, 4)):
            options.add_argument(arg)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        options.add_argument(f'--window-size={browser_params["viewport"][0]},{browser_params["viewport"][1]}')
        options.add_argument(f'--user-agent={browser_params["user_agent"]}')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if proxy:
            proxy_url = f"{proxy['scheme']}://{proxy['host']}"
            if proxy.get('username') and proxy.get('password'):
                proxy_url = f"{proxy['scheme']}://{proxy['username']}:{proxy['password']}@{proxy['host']}"
            options.add_argument(f'--proxy-server={proxy_url}')
            print(f"[UNDETECTED-CHROME] üîó Using proxy: {proxy['scheme']}://{proxy['host']}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # Headless —Ä–µ–∂–∏–º
        if headless:
            options.add_argument('--headless')
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver = uc.Chrome(options=options, version_main=None)
        
        try:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ç–∞
            driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                "userAgent": browser_params["user_agent"]
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º WebDriver –ø—Ä–∏–∑–Ω–∞–∫–∏ —á–µ—Ä–µ–∑ CDP –∏ JavaScript
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})")
            driver.execute_script("Object.defineProperty(navigator, 'hardwareConcurrency', {get: () => 8})")
            driver.execute_script("Object.defineProperty(navigator, 'deviceMemory', {get: () => 8})")
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            driver.set_window_size(
                random.randint(1200, 1600),
                random.randint(800, 1200)
            )
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Instagram –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
            print(f"[UNDETECTED-CHROME] üè† Preloading Instagram homepage...")
            driver.get('https://www.instagram.com/')
            time.sleep(random.uniform(2, 4))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            driver.execute_script("window.scrollTo(0, 500)")
            time.sleep(random.uniform(0.5, 1.5))
            driver.execute_script("window.scrollTo(500, 1000)")
            time.sleep(random.uniform(0.5, 1.5))
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à—å—é
            driver.execute_script("""
                function moveMouseRandomly() {
                    const x = Math.random() * window.innerWidth;
                    const y = Math.random() * window.innerHeight;
                    const event = new MouseEvent('mousemove', {
                        clientX: x,
                        clientY: y,
                        bubbles: true
                    });
                    document.dispatchEvent(event);
                }
                for(let i = 0; i < 3; i++) {
                    setTimeout(moveMouseRandomly, i * 300);
                }
            """)
            time.sleep(random.uniform(1, 2))
            
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URL-—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
            urls_to_try = [
                f"https://www.instagram.com/{username}/",
                f"https://www.instagram.com/{username}/?__a=1&__d=dis",
                f"https://www.instagram.com/{username}/channel/",
            ]
            
            profile_loaded = False
            for attempt, url in enumerate(urls_to_try):
                print(f"[UNDETECTED-CHROME] üåê Attempt {attempt + 1}: Navigating to: {url}")
                
                driver.get(url)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
                time.sleep(random.uniform(3, 7))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—â–∏—Ç—ã –∏–ª–∏ –ª–æ–≥–∏–Ω–∞
                page_source = driver.page_source
                current_url = driver.current_url
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
                if "instagram.com/accounts/login" in current_url or "Accedi" in page_source or "Log in" in page_source:
                    print(f"[UNDETECTED-CHROME] üîÑ Attempt {attempt + 1}: Redirected to login page")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ URL
                    continue
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if "Sorry, this page isn't available" not in page_source and username.lower() in page_source.lower():
                    profile_loaded = True
                    print(f"[UNDETECTED-CHROME] ‚úÖ Profile loaded successfully on attempt {attempt + 1}")
                    break
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
            if not profile_loaded:
                print(f"[UNDETECTED-CHROME] üîÑ All attempts redirected to login - trying different browser config")
                result["exists"] = True
                result["note"] = "Redirected to login page"
                result["error"] = "Need different browser configuration"
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if screenshot_path:
                    try:
                        driver.save_screenshot(screenshot_path)
                        result["screenshot_path"] = screenshot_path
                        print(f"[UNDETECTED-CHROME] üì∏ Login page screenshot saved: {screenshot_path}")
                    except Exception as e:
                        print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Failed to take login page screenshot: {e}")
                
                return result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º page_source –∏ current_url –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            page_source = driver.page_source
            current_url = driver.current_url
            page_title = driver.title.lower()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 403 –æ—à–∏–±–∫—É –ü–ï–†–ï–î –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
            if ("403" in page_source or "403" in page_title or 
                "forbidden" in page_source.lower() or "forbidden" in page_title or
                "access denied" in page_source.lower() or 
                "–Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø" in page_source.lower()):
                print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Detected 403 Forbidden error")
                result["error"] = "403_forbidden"
                result["exists"] = None
                return result
            
            if "Take a quick pause" in page_source:
                print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Detected 'Take a quick pause' protection")
                result["error"] = "Instagram protection detected"
                return result
            
            if "We're seeing more requests" in page_source:
                print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Detected rate limiting")
                result["error"] = "Rate limited by Instagram"
                return result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
            if "Sorry, this page isn't available" in page_source:
                print(f"[UNDETECTED-CHROME] ‚ùå Account @{username} not found")
                result["exists"] = False
                return result
            
            if "This account is private" in page_source:
                print(f"[UNDETECTED-CHROME] üîí Account @{username} is private")
                result["exists"] = True
                result["is_private"] = True
            else:
                print(f"[UNDETECTED-CHROME] ‚úÖ Account @{username} found and public")
                result["exists"] = True
                result["is_private"] = False
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                try:
                    # –ü–æ–ª–Ω–æ–µ –∏–º—è
                    full_name_elements = driver.find_elements("css selector", "h2")
                    if full_name_elements:
                        result["full_name"] = full_name_elements[0].text.strip()
                        print(f"[UNDETECTED-CHROME] üë§ Full name: {result['full_name']}")
                    
                    # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
                    followers_elements = driver.find_elements("css selector", "a[href*='/followers/'] span")
                    if followers_elements:
                        result["followers"] = followers_elements[0].text.strip()
                        print(f"[UNDETECTED-CHROME] üë• Followers: {result['followers']}")
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∏
                    following_elements = driver.find_elements("css selector", "a[href*='/following/'] span")
                    if following_elements:
                        result["following"] = following_elements[0].text.strip()
                        print(f"[UNDETECTED-CHROME] üë• Following: {result['following']}")
                    
                    # –ü–æ—Å—Ç—ã
                    posts_elements = driver.find_elements("css selector", "a[href*='/p/'] span")
                    if posts_elements:
                        result["posts"] = posts_elements[0].text.strip()
                        print(f"[UNDETECTED-CHROME] üì∏ Posts: {result['posts']}")
                        
                except Exception as e:
                    print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Could not extract account info: {e}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if screenshot_path:
                try:
                    driver.save_screenshot(screenshot_path)
                    result["screenshot_path"] = screenshot_path
                    print(f"[UNDETECTED-CHROME] üì∏ Screenshot saved: {screenshot_path}")
                except Exception as e:
                    print(f"[UNDETECTED-CHROME] ‚ö†Ô∏è Failed to take screenshot: {e}")
            
        finally:
            driver.quit()
            
    except Exception as e:
        print(f"[UNDETECTED-CHROME] ‚ùå Error: {e}")
        result["error"] = str(e)
    
    return result

async def check_account_undetected_with_fallback(
    session,
    user_id: int,
    username: str,
    max_attempts: int = None,
    headless: bool = True,
    screenshot_path: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å fallback —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    """
    result = {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "error": None,
        "checked_via": "undetected_chrome",
        "screenshot_path": None,
        "proxy_used": None,
        "attempts": 0
    }
    
    if max_attempts is None:
        max_attempts = 999  # Effectively unlimited
        print(f"[UNDETECTED-FALLBACK] üîÑ Starting undetected check for @{username} (unlimited attempts)")
    else:
        print(f"[UNDETECTED-FALLBACK] üîÑ Starting undetected check for @{username} (max {max_attempts} attempts)")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ JSON endpoint
    json_result = await check_via_json_endpoint(username)
    if json_result is True:
        print(f"[UNDETECTED-FALLBACK] ‚úÖ Account @{username} confirmed via JSON endpoint - proceeding to browser check for screenshot")
        result["exists"] = True
    elif json_result is False:
        print(f"[UNDETECTED-FALLBACK] ‚ùå Account @{username} not found via JSON endpoint")
        result["exists"] = False
        return result
    else:
        print(f"[UNDETECTED-FALLBACK] ‚ö†Ô∏è JSON endpoint failed or uncertain - falling back to browser check")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        from ..models import Proxy
        proxies = session.query(Proxy).filter(
            Proxy.user_id == user_id,
            Proxy.is_active == True
        ).order_by(Proxy.priority.asc()).all()
    except ImportError:
        from models import Proxy
        proxies = session.query(Proxy).filter(
            Proxy.user_id == user_id,
            Proxy.is_active == True
        ).order_by(Proxy.priority.asc()).all()
    
    if not proxies:
        print(f"[UNDETECTED-FALLBACK] ‚ö†Ô∏è No proxies available for user {user_id}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        return await check_account_undetected_chrome(
            username=username,
            proxy=None,
            screenshot_path=screenshot_path,
            headless=headless
        )
    
    current_proxy_id = None
    attempt = 0
    
    while attempt < max_attempts:
        attempt += 1
        result["attempts"] = attempt
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
        if not current_proxy_id:
            proxy = proxies[0]
        else:
            current_index = None
            for i, p in enumerate(proxies):
                if p.id == current_proxy_id:
                    current_index = i
                    break
            
            if current_index is None:
                proxy = proxies[0]
            else:
                next_index = (current_index + 1) % len(proxies)
                proxy = proxies[next_index]
        
        current_proxy_id = proxy.id
        
        if max_attempts == 999:
            print(f"[UNDETECTED-FALLBACK] üîó Attempt {attempt} - Using proxy: {proxy.scheme}://{proxy.host}")
        else:
            print(f"[UNDETECTED-FALLBACK] üîó Attempt {attempt}/{max_attempts} - Using proxy: {proxy.scheme}://{proxy.host}")
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            proxy_dict = {
                "scheme": proxy.scheme,
                "host": proxy.host,
                "username": proxy.username,
                "password": proxy.password
            }
            
            check_result = await check_account_undetected_chrome(
                username=username,
                proxy=proxy_dict,
                screenshot_path=screenshot_path,
                headless=headless
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 403 –æ—à–∏–±–∫—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º bypass –º–µ—Ç–æ–¥—ã
            if check_result.get("error") == "403_forbidden":
                print(f"[UNDETECTED-FALLBACK] ‚ö†Ô∏è 403 Forbidden detected - switching to bypass methods")
                try:
                    # Import and use instagram bypass
                    from .instagram_bypass import check_account_with_bypass
                    print(f"[UNDETECTED-FALLBACK] üõ°Ô∏è Using Instagram 403 Bypass for @{username}")
                    
                    bypass_result = await check_account_with_bypass(
                        username=username,
                        screenshot_path=screenshot_path,
                        headless=headless,
                        max_retries=1  # Quick bypass attempt
                    )
                    
                    if bypass_result.get("exists") is not None:
                        result.update(bypass_result)
                        result["proxy_used"] = f"bypass_methods"
                        result["checked_via"] = "undetected_fallback_with_bypass"
                        print(f"[UNDETECTED-FALLBACK] ‚úÖ Success with bypass methods")
                        break
                except Exception as bypass_error:
                    print(f"[UNDETECTED-FALLBACK] ‚ùå Bypass methods failed: {bypass_error}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            elif check_result.get("exists") is not None:
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω - –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä
                if (check_result.get("exists") is True and 
                    check_result.get("error") == "Need different browser configuration"):
                    print(f"[UNDETECTED-FALLBACK] üîÑ Account exists but redirected to login - trying different browser config...")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–∫—Å–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                    continue
                else:
                    result.update(check_result)
                    result["proxy_used"] = f"{proxy.scheme}://{proxy.host}"
                    print(f"[UNDETECTED-FALLBACK] ‚úÖ Success with proxy {proxy.host}")
                    break
            else:
                print(f"[UNDETECTED-FALLBACK] ‚ö†Ô∏è Proxy {proxy.host} failed - trying next proxy...")
                continue
                
        except Exception as e:
            print(f"[UNDETECTED-FALLBACK] ‚ùå Proxy {proxy.host} error: {e}")
            print(f"[UNDETECTED-FALLBACK] üîÑ Switching to next proxy...")
            continue
    
    if result["exists"] is None and not result.get("error"):
        result["error"] = f"All {max_attempts} proxies failed"
        print(f"[UNDETECTED-FALLBACK] ‚ùå All proxies failed for @{username}")
    
    return result


async def check_account_with_full_bypass(
    session,
    user_id: int,
    username: str,
    headless: bool = True,
    screenshot_path: Optional[str] = None
) -> Dict[str, Any]:
    """
    Check Instagram account using full bypass system with all methods.
    
    Args:
        session: Database session
        user_id: User ID
        username: Instagram username
        headless: Run in headless mode
        screenshot_path: Path to save screenshot (optional)
        
    Returns:
        dict with check results
    """
    print(f"[FULL-BYPASS] üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–ª—è @{username}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ö–æ–¥–∞
        from .instagram_bypass import check_account_with_bypass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        result = await check_account_with_bypass(
            username=username,
            screenshot_path=screenshot_path,
            headless=headless
        )
        
        print(f"[FULL-BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è @{username}: {result.get('exists')}")
        return result
        
    except Exception as e:
        print(f"[FULL-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
        return {
            "username": username,
            "exists": None,
            "is_private": None,
            "full_name": None,
            "followers": None,
            "following": None,
            "posts": None,
            "error": str(e),
            "checked_via": "full_bypass_error",
            "screenshot_path": None
        }