"""
üî• –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Instagram —Å –ø—Ä–æ–∫—Å–∏
API –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ + Firefox —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import aiohttp
import time
import random
import os
from typing import Optional, Dict, Any
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.common.by import By


class InstagramHybridProxyChecker:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Instagram: API —Å –ø—Ä–æ–∫—Å–∏ + Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self):
        self.mobile_user_agents = [
            'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Linux; Android 13; SM-S908B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36',
            'Mozilla/5.0 (Linux; Android 12; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Mobile Safari/537.36'
        ]
    
    async def check_via_api_with_proxy(self, username: str, proxy: str) -> dict:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∫—Å–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        print(f"[API-PROXY] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∫—Å–∏...")
        
        headers = {
            'User-Agent': random.choice(self.mobile_user_agents),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
        }
        
        urls_to_try = [
            f'https://www.instagram.com/{username}/?__a=1&__d=dis',
            f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}',
            f'https://www.instagram.com/{username}/',
        ]
        
        for url in urls_to_try:
            try:
                print(f"[API-PROXY] üåê –ó–∞–ø—Ä–æ—Å: {url[:60]}...")
                
                timeout = aiohttp.ClientTimeout(total=30)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(url, headers=headers, proxy=proxy) as response:
                        status = response.status
                        print(f"[API-PROXY] üìä –°—Ç–∞—Ç—É—Å: {status}")
                        
                        if status == 200:
                            text = await response.text()
                            text_lower = text.lower()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 404
                            if '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in text_lower or 'sorry, this page' in text_lower or 'not found' in text_lower:
                                print(f"[API-PROXY] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                                return {"exists": False, "method": "api_proxy", "status_code": status}
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username –≤ —Ç–µ–∫—Å—Ç–µ
                            if username.lower() in text_lower:
                                print(f"[API-PROXY] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∫—Å–∏")
                                return {"exists": True, "method": "api_proxy", "status_code": status}
                        
                        elif status == 404:
                            print(f"[API-PROXY] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                            return {"exists": False, "method": "api_proxy", "status_code": status}
                        
                        elif status in [200, 201]:
                            print(f"[API-PROXY] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–∞–π–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å {status})")
                            return {"exists": True, "method": "api_proxy", "status_code": status}
                            
            except Exception as e:
                print(f"[API-PROXY] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {url[:60]}...: {e}")
                continue
        
        print(f"[API-PROXY] ‚ö†Ô∏è –í—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return {"exists": None, "error": "api_failed", "method": "api_proxy"}
    
    async def take_screenshot_with_playwright(self, username: str, screenshot_path: str, headless: bool = True, proxy: str = None) -> bool:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ Playwright (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)"""
        print(f"[PLAYWRIGHT-SCREENSHOT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è @{username}...")
        if proxy:
            print(f"[PLAYWRIGHT-SCREENSHOT] üîó –° –ø—Ä–æ–∫—Å–∏ (–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)")
        else:
            print(f"[PLAYWRIGHT-SCREENSHOT] üîó –ë–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        try:
            from project.services.instagram_playwright import InstagramPlaywrightChecker
            
            checker = InstagramPlaywrightChecker()
            result = await checker.check_profile_existence(
                username=username,
                screenshot_path=screenshot_path,
                headless=headless,
                proxy=proxy
            )
            
            if result.get("screenshot_path") and os.path.exists(result["screenshot_path"]):
                file_size = os.path.getsize(result["screenshot_path"])
                print(f"[PLAYWRIGHT-SCREENSHOT] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {file_size} –±–∞–π—Ç")
                return True
            else:
                print(f"[PLAYWRIGHT-SCREENSHOT] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
                
        except ImportError:
            print(f"[PLAYWRIGHT-SCREENSHOT] ‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Firefox fallback")
            print(f"[PLAYWRIGHT-SCREENSHOT] üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright && playwright install chromium")
            return self.take_screenshot_with_firefox(username, screenshot_path, headless, proxy)
        except Exception as e:
            print(f"[PLAYWRIGHT-SCREENSHOT] ‚ùå –û—à–∏–±–∫–∞ Playwright: {e}")
            print(f"[PLAYWRIGHT-SCREENSHOT] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Firefox fallback")
            return self.take_screenshot_with_firefox(username, screenshot_path, headless, proxy)
    
    def take_screenshot_with_firefox(self, username: str, screenshot_path: str, headless: bool = True, proxy: str = None) -> bool:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ Firefox —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        print(f"[FIREFOX-SCREENSHOT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è @{username}...")
        if proxy:
            print(f"[FIREFOX-SCREENSHOT] üîó –° –ø—Ä–æ–∫—Å–∏: {proxy.split('@')[0].split(':')[0]}:***@{proxy.split('@')[1] if '@' in proxy else proxy}")
        else:
            print(f"[FIREFOX-SCREENSHOT] üîó –ë–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        driver = None
        try:
            options = FirefoxOptions()
            
            # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è
            mobile_user_agent = random.choice(self.mobile_user_agents)
            options.set_preference("general.useragent.override", mobile_user_agent)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.set_preference("dom.webdriver.enabled", False)
            options.set_preference("useAutomationExtension", False)
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--width=390")
            options.add_argument("--height=844")
            
            if headless:
                options.add_argument("--headless")
            
            # üî• –ü–û–î–î–ï–†–ñ–ö–ê –ü–†–û–ö–°–ò –ß–ï–†–ï–ó SELENIUM WIRE
            if proxy:
                try:
                    from seleniumwire import webdriver as seleniumwire_webdriver
                    print(f"[FIREFOX-SCREENSHOT] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox —Å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Selenium Wire...")
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Selenium Wire
                    seleniumwire_options = {
                        'proxy': {
                            'http': proxy,
                            'https': proxy,
                            'no_proxy': 'localhost,127.0.0.1'
                        }
                    }
                    
                    driver = seleniumwire_webdriver.Firefox(
                        options=options,
                        seleniumwire_options=seleniumwire_options
                    )
                    print(f"[FIREFOX-SCREENSHOT] ‚úÖ Firefox —Å –ø—Ä–æ–∫—Å–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                except ImportError:
                    print(f"[FIREFOX-SCREENSHOT] ‚ö†Ô∏è Selenium Wire –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    print(f"[FIREFOX-SCREENSHOT] üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium-wire")
                    driver = webdriver.Firefox(options=options)
                except Exception as e:
                    print(f"[FIREFOX-SCREENSHOT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Selenium Wire: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    driver = webdriver.Firefox(options=options)
            else:
                print(f"[FIREFOX-SCREENSHOT] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                driver = webdriver.Firefox(options=options)
            
            driver.set_window_size(390, 844)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            url = f'https://www.instagram.com/{username}/'
            print(f"[FIREFOX-SCREENSHOT] üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            driver.get(url)
            time.sleep(5)
            
            # üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            self.close_instagram_modals_aggressive(driver)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            print(f"[FIREFOX-SCREENSHOT] üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot_path}")
            driver.save_screenshot(screenshot_path)
            
            if os.path.exists(screenshot_path):
                size = os.path.getsize(screenshot_path)
                print(f"[FIREFOX-SCREENSHOT] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path} ({size} –±–∞–π—Ç)")
                return True
            else:
                print(f"[FIREFOX-SCREENSHOT] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {screenshot_path}")
                return False
                
        except Exception as e:
            print(f"[FIREFOX-SCREENSHOT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            if driver:
                try:
                    driver.quit()
                    print(f"[FIREFOX-SCREENSHOT] üîí Firefox –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
    
    def close_instagram_modals_aggressive(self, driver):
        """üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω Instagram"""
        print("[FIREFOX-SCREENSHOT] üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...")
        
        # –ú–µ—Ç–æ–¥ 1: JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        try:
            js_code = """
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò OVERLAY
            var allElements = document.querySelectorAll('*');
            for (var i = 0; i < allElements.length; i++) {
                var element = allElements[i];
                var className = element.className || '';
                var style = element.style || {};
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ overlay
                if (className.includes('x7r02ix') || 
                    className.includes('x1vjfegm') || 
                    className.includes('_abcm') ||
                    className.includes('modal') ||
                    className.includes('overlay') ||
                    className.includes('backdrop') ||
                    element.getAttribute('role') === 'dialog' ||
                    style.position === 'fixed' ||
                    style.zIndex > 1000) {
                    
                    element.style.display = 'none !important';
                    element.style.visibility = 'hidden !important';
                    element.style.opacity = '0 !important';
                    element.style.pointerEvents = 'none !important';
                    element.remove();
                }
            }
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –í–´–°–û–ö–ò–ú Z-INDEX
            var highZElements = document.querySelectorAll('[style*="z-index"]');
            for (var i = 0; i < highZElements.length; i++) {
                var zIndex = parseInt(highZElements[i].style.zIndex) || 0;
                if (zIndex > 100) {
                    highZElements[i].style.display = 'none !important';
                    highZElements[i].remove();
                }
            }
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï FIXED –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
            var fixedElements = document.querySelectorAll('[style*="position: fixed"]');
            for (var i = 0; i < fixedElements.length; i++) {
                fixedElements[i].style.display = 'none !important';
                fixedElements[i].remove();
            }
            
            // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú BODY –ò HTML
            document.body.classList.remove('modal-open', 'overflow-hidden');
            document.body.style.overflow = 'auto !important';
            document.body.style.position = 'static !important';
            document.body.style.background = 'transparent !important';
            document.documentElement.style.overflow = 'auto !important';
            document.documentElement.style.background = 'transparent !important';
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï OVERLAY –ö–õ–ê–°–°–´
            var bodyClasses = document.body.className;
            var newClasses = bodyClasses.replace(/modal-open|overflow-hidden|backdrop|overlay/g, '');
            document.body.className = newClasses.trim();
            
            // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –°–¢–ò–õ–ò
            document.body.removeAttribute('style');
            document.documentElement.removeAttribute('style');
            
            // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ö–†–û–õ–õ–ò–ù–ì
            document.body.style.overflow = 'auto';
            document.documentElement.style.overflow = 'auto';
            """
            driver.execute_script(js_code)
            print("[FIREFOX-SCREENSHOT] üßπ JavaScript –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –º–æ–¥–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            time.sleep(3)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        except Exception as e:
            print(f"[FIREFOX-SCREENSHOT] ‚ö†Ô∏è JavaScript —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
        modal_selectors = [
            "button[aria-label='Close']",
            "svg[aria-label='Close']",
            "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
            "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
            "//button[contains(text(), 'Not Now')]",
            "//button[contains(text(), 'Close')]",
            "//button[contains(text(), '–ó–∞–∫—Ä—ã—Ç—å')]",
            "//button[contains(text(), '–ù–µ —Å–µ–π—á–∞—Å')]",
        ]
        
        for selector in modal_selectors:
            try:
                if selector.startswith('//'):
                    elements = driver.find_elements(By.XPATH, selector)
                else:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                
                for element in elements:
                    try:
                        if element.is_displayed():
                            element.click()
                            print(f"[FIREFOX-SCREENSHOT] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ: {selector}")
                            time.sleep(1)
                            return True
                    except:
                        continue
            except:
                continue
        
        print("[FIREFOX-SCREENSHOT] ‚úÖ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return True
    
    async def hybrid_check(self, username: str, proxy: str = None, screenshot_path: str = None, headless: bool = True) -> dict:
        """üî• –ì–∏–±—Ä–∏–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: API —Å –ø—Ä–æ–∫—Å–∏ + Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        print(f"[HYBRID-PROXY] üöÄ –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username}")
        print(f"[HYBRID-PROXY] üîó –ü—Ä–æ–∫—Å–∏ –¥–ª—è API: {'–î–∞' if proxy else '–ù–µ—Ç'}")
        print(f"[HYBRID-PROXY] üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {'–î–∞' if screenshot_path else '–ù–µ—Ç'}")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∫—Å–∏
        api_result = {"exists": None, "error": "not_checked"}
        if proxy:
            api_result = await self.check_via_api_with_proxy(username, proxy)
        else:
            print("[HYBRID-PROXY] ‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API –ø—Ä–æ–≤–µ—Ä–∫—É")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ Playwright (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –Ω–∞ Firefox)
        screenshot_success = False
        if screenshot_path:
            screenshot_success = await self.take_screenshot_with_playwright(username, screenshot_path, headless, proxy)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            "username": username,
            "exists": api_result.get("exists"),
            "checked_via": "hybrid_proxy_system",
            "api_method": api_result.get("method"),
            "api_status_code": api_result.get("status_code"),
            "screenshot_created": screenshot_success,
            "screenshot_path": screenshot_path if screenshot_success else None,
            "proxy_used": bool(proxy),
            "error": api_result.get("error")
        }
        
        print(f"[HYBRID-PROXY] üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"[HYBRID-PROXY]   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result['exists']}")
        print(f"[HYBRID-PROXY]   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {result['screenshot_created']}")
        print(f"[HYBRID-PROXY]   üîó –ü—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result['proxy_used']}")
        
        return result


async def check_account_with_hybrid_proxy(
    username: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    max_retries: int = 2,
    proxy: Optional[str] = None
) -> Dict[str, Any]:
    """
    üî• –ì–ò–ë–†–ò–î–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –° –ü–†–û–ö–°–ò
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - API –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
    - Firefox –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
    
    Args:
        username: Instagram username
        screenshot_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        headless: –ó–∞–ø—É—Å–∫–∞—Ç—å Firefox –≤ headless —Ä–µ–∂–∏–º–µ
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        proxy: –ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "http://user:pass@host:port" (–¥–ª—è API)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    
    print(f"[HYBRID-PROXY-CHECK] üöÄ –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è @{username}")
    print(f"[HYBRID-PROXY-CHECK] üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {max_retries}")
    
    checker = InstagramHybridProxyChecker()
    
    for attempt in range(max_retries):
        print(f"[HYBRID-PROXY-CHECK] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
        
        try:
            result = await checker.hybrid_check(
                username=username,
                proxy=proxy,  # üî• –ü—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è API
                screenshot_path=screenshot_path,
                headless=headless
            )
            
            if result["exists"] is not None:
                print(f"[HYBRID-PROXY-CHECK] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {
                    "username": username,
                    "exists": result["exists"],
                    "is_private": None,
                    "full_name": None,
                    "followers": None,
                    "following": None,
                    "posts": None,
                    "error": result.get("error"),
                    "checked_via": result["checked_via"],
                    "screenshot_path": result["screenshot_path"],
                    "proxy_used": result["proxy_used"],
                    "api_method": result.get("api_method"),
                    "api_status_code": result.get("api_status_code"),
                    "screenshot_created": result["screenshot_created"]
                }
            else:
                print(f"[HYBRID-PROXY-CHECK] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è @{username}")
                if attempt < max_retries - 1:
                    delay = random.uniform(5, 10)
                    print(f"[HYBRID-PROXY-CHECK] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(delay)
                    continue
                
        except Exception as e:
            print(f"[HYBRID-PROXY-CHECK] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            import traceback
            traceback.print_exc()
            if attempt < max_retries - 1:
                delay = random.uniform(5, 10)
                print(f"[HYBRID-PROXY-CHECK] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)
                continue
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    print(f"[HYBRID-PROXY-CHECK] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "error": "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å",
        "checked_via": "hybrid_proxy_system",
        "screenshot_path": None,
        "proxy_used": bool(proxy),
        "screenshot_created": False
    }

