"""API v2 checker with proxy support for Instagram account verification."""

import aiohttp
import json
import random
import asyncio
import re
from typing import Dict, List, Optional, Any
from sqlalchemy.orm import Session
from datetime import date

try:
    from ..models import Account, Proxy
    from ..config import get_settings
    from .ig_screenshot import check_account_with_header_screenshot
    from .proxy_utils import select_best_proxy
except ImportError:
    from models import Account, Proxy
    from config import get_settings
    from services.ig_screenshot import check_account_with_header_screenshot
    from services.proxy_utils import select_best_proxy


class InstagramCheckerWithProxy:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, proxy_list: List[str] = None):
        """
        Args:
            proxy_list: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ['ip:port:user:pass', ...]
        """
        self.proxy_list = proxy_list or []
        self.current_proxy_index = 0
        self.session = None
        
        # User Agents –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Mobile Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
            "Mozilla/5.0 (iPad; CPU OS 17_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.2903.51",
        ]
    
    def parse_proxy(self, proxy_str: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ip:port:username:password"""
        try:
            ip, port, username, password = proxy_str.split(':')
            return {
                'ip': ip,
                'port': port,
                'username': username,
                'password': password,
                'http': f'http://{username}:{password}@{ip}:{port}',
                'https': f'http://{username}:{password}@{ip}:{port}'
            }
        except ValueError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_str}. –û–∂–∏–¥–∞–µ—Ç—Å—è: ip:port:username:password")
    
    def get_next_proxy(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if not self.proxy_list:
            return None
            
        if self.current_proxy_index >= len(self.proxy_list):
            self.current_proxy_index = 0  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è
            
        proxy_str = self.proxy_list[self.current_proxy_index]
        self.current_proxy_index += 1
        
        return self.parse_proxy(proxy_str)
    
    def clean_username(self, username: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ username –æ—Ç @ –∏ URL"""
        url_pattern = r"(?:https?://)?(?:www\.)?instagram\.com/([A-Za-z0-9_.]+)/?"
        match = re.match(url_pattern, username)
        if match:
            username = match.group(1).lower()
        else:
            username = username.lower()
            
        if username.startswith('@'):
            username = username[1:].lower()
        
        return username
    
    @staticmethod
    def close_instagram_modals_firefox(driver):
        """üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω Instagram –≤ Firefox"""
        print("[API-V2-FIREFOX] üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...")
        
        try:
            # JavaScript –∫–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–∏–∑ –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
            js_code = """
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò OVERLAY
            var allElements = document.querySelectorAll('*');
            for (var i = 0; i < allElements.length; i++) {
                var element = allElements[i];
                var className = element.className || '';
                var style = element.style || {};
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ overlay
                var classStr = String(className || '');
                if (classStr.indexOf('x7r02ix') !== -1 || 
                    classStr.indexOf('x1vjfegm') !== -1 || 
                    classStr.indexOf('_abcm') !== -1 ||
                    classStr.indexOf('modal') !== -1 ||
                    classStr.indexOf('overlay') !== -1 ||
                    classStr.indexOf('backdrop') !== -1 ||
                    element.getAttribute('role') === 'dialog' ||
                    style.position === 'fixed' ||
                    style.zIndex > 1000) {
                    
                    element.style.display = 'none !important';
                    element.style.visibility = 'hidden !important';
                    element.style.opacity = '0 !important';
                    element.style.pointerEvents = 'none !important';
                    element.remove();
                }
            }
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –í–´–°–û–ö–ò–ú Z-INDEX
            var highZElements = document.querySelectorAll('[style*="z-index"]');
            for (var i = 0; i < highZElements.length; i++) {
                var zIndex = parseInt(highZElements[i].style.zIndex) || 0;
                if (zIndex > 100) {
                    highZElements[i].style.display = 'none !important';
                    highZElements[i].remove();
                }
            }
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï FIXED –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
            var fixedElements = document.querySelectorAll('[style*="position: fixed"]');
            for (var i = 0; i < fixedElements.length; i++) {
                fixedElements[i].style.display = 'none !important';
                fixedElements[i].remove();
            }
            
            // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú BODY –ò HTML
            document.body.classList.remove('modal-open', 'overflow-hidden');
            document.body.style.overflow = 'auto !important';
            document.body.style.position = 'static !important';
            document.body.style.background = 'transparent !important';
            document.documentElement.style.overflow = 'auto !important';
            document.documentElement.style.background = 'transparent !important';
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï OVERLAY –ö–õ–ê–°–°–´
            var bodyClasses = document.body.className;
            var newClasses = bodyClasses.replace(/modal-open|overflow-hidden|backdrop|overlay/g, '');
            document.body.className = newClasses.trim();
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –¢–ï–ú–ù–´–ú –§–û–ù–û–ú
            var darkElements = document.querySelectorAll('[style*="background"]');
            for (var i = 0; i < darkElements.length; i++) {
                var bg = darkElements[i].style.background || '';
                if (bg.indexOf('rgba(0,0,0') !== -1 || bg.indexOf('rgba(0, 0, 0') !== -1 || 
                    bg.indexOf('black') !== -1 || bg.indexOf('#000') !== -1) {
                    darkElements[i].style.display = 'none !important';
                    darkElements[i].remove();
                }
            }
            
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –í–´–°–û–ö–ò–ú Z-INDEX –ò –¢–ï–ú–ù–´–ú –§–û–ù–û–ú
            var allElements2 = document.querySelectorAll('*');
            for (var i = 0; i < allElements2.length; i++) {
                var element = allElements2[i];
                var style = element.style || {};
                var zIndex = parseInt(style.zIndex) || 0;
                var bg = style.background || '';
                
                if (zIndex > 50 && (bg.indexOf('rgba(0,0,0') !== -1 || bg.indexOf('rgba(0, 0, 0') !== -1 || 
                    bg.indexOf('black') !== -1 || bg.indexOf('#000') !== -1)) {
                    element.style.display = 'none !important';
                    element.remove();
                }
            }
            
            // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –°–¢–ò–õ–ò
            document.body.removeAttribute('style');
            document.documentElement.removeAttribute('style');
            
            // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ö–†–û–õ–õ–ò–ù–ì –ò –£–ë–ò–†–ê–ï–ú –¢–ï–ú–ù–´–ô –§–û–ù
            document.body.style.overflow = 'auto';
            document.body.style.background = 'white';
            document.documentElement.style.overflow = 'auto';
            document.documentElement.style.background = 'white';
            """
            
            driver.execute_script(js_code)
            print("[API-V2-FIREFOX] ‚úÖ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")
            
            # –£–±–∏—Ä–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            try:
                js_remove_overlay = """
                // üî• –ê–ì–†–ï–°–°–ò–í–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –≠–õ–ï–ú–ï–ù–¢–û–í –ó–ê–¢–ï–ú–ù–ï–ù–ò–Ø
                var allElements = document.querySelectorAll('*');
                for (var i = 0; i < allElements.length; i++) {
                    var element = allElements[i];
                    var className = element.className || '';
                    var style = element.style || {};
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ overlay
                    if (className.indexOf('x7r02ix') !== -1 || 
                        className.indexOf('x1vjfegm') !== -1 || 
                        className.indexOf('_abcm') !== -1 ||
                        className.indexOf('modal') !== -1 ||
                        className.indexOf('overlay') !== -1 ||
                        className.indexOf('backdrop') !== -1 ||
                        element.getAttribute('role') === 'dialog' ||
                        style.position === 'fixed' ||
                        style.zIndex > 1000) {
                        
                        element.style.display = 'none !important';
                        element.style.visibility = 'hidden !important';
                        element.style.opacity = '0 !important';
                        element.style.pointerEvents = 'none !important';
                        element.remove();
                    }
                }
                
                // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –° –í–´–°–û–ö–ò–ú Z-INDEX
                var highZElements = document.querySelectorAll('[style*="z-index"]');
                for (var i = 0; i < highZElements.length; i++) {
                    var zIndex = parseInt(highZElements[i].style.zIndex) || 0;
                    if (zIndex > 100) {
                        highZElements[i].style.display = 'none !important';
                        highZElements[i].remove();
                    }
                }
                
                // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï FIXED –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
                var fixedElements = document.querySelectorAll('[style*="position: fixed"]');
                for (var i = 0; i < fixedElements.length; i++) {
                    fixedElements[i].style.display = 'none !important';
                    fixedElements[i].remove();
                }
                
                // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú BODY –ò HTML
                document.body.classList.remove('modal-open', 'overflow-hidden');
                document.body.style.overflow = 'auto !important';
                document.body.style.position = 'static !important';
                document.body.style.background = 'white !important';
                document.documentElement.style.overflow = 'auto !important';
                document.documentElement.style.background = 'white !important';
                
                // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï OVERLAY –ö–õ–ê–°–°–´
                var bodyClasses = document.body.className;
                var newClasses = bodyClasses.replace(/modal-open|overflow-hidden|backdrop|overlay/g, '');
                document.body.className = newClasses.trim();
                
                // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –°–¢–ò–õ–ò
                document.body.removeAttribute('style');
                document.documentElement.removeAttribute('style');
                
                // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –°–ö–†–û–õ–õ–ò–ù–ì –ò –ë–ï–õ–´–ô –§–û–ù
                document.body.style.overflow = 'auto';
                document.body.style.background = 'white';
                document.documentElement.style.overflow = 'auto';
                document.documentElement.style.background = 'white';
                """
                driver.execute_script(js_remove_overlay)
                print("[API-V2-FIREFOX] ‚úÖ –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ")
                
            except:
                pass
            
        except Exception as e:
            print(f"[API-V2-FIREFOX] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {e}")
    
    def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ headers —Å —Å–ª—É—á–∞–π–Ω—ã–º User-Agent"""
        return {
            "accept": "*/*",
            "accept-language": "en-US,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded;charset=UTF-8",
            "origin": "https://www.instagram.com",
            "user-agent": random.choice(self.user_agents),
            "X-ASBD-ID": "129477",
            "X-IG-WWW-Claim": "0",
            "X-IG-App-ID": "936619743392459",
            "X-CSRFToken": 'missing',
            "Referer": "https://www.instagram.com/",
            "X-Requested-With": "XMLHttpRequest"
        }
    
    async def check_account(
        self, 
        username: str, 
        max_attempts: int = 3,
        use_proxy: bool = True
    ) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            username: Instagram username
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            use_proxy: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–∫—Å–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        username = self.clean_username(username)
        url = f"https://i.instagram.com/api/v1/users/web_profile_info/?username={username}"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        attempts = []
        
        for attempt in range(max_attempts):
            try:
                # –í—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
                proxy_config = None
                if use_proxy and self.proxy_list:
                    proxy_config = self.get_next_proxy()
                    proxy_url = proxy_config['http'] if proxy_config else None
                else:
                    proxy_url = None
                
                print(f"üî∞ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è @{username}" + 
                      (f" —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy_config['ip']}" if proxy_config else " –±–µ–∑ –ø—Ä–æ–∫—Å–∏"))
                
                headers = self.get_headers()
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        url, 
                        headers=headers, 
                        proxy=proxy_url,
                        timeout=15, 
                        ssl=False
                    ) as response:
                        
                        data = await response.read()
                        response_status = response.status
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ
                        attempts.append({
                            'attempt': attempt + 1,
                            'status_code': response_status,
                            'proxy_used': proxy_config['ip'] if proxy_config else 'none',
                            'success': response_status == 200
                        })
                        
                        if response_status != 200:
                            print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∫–æ–¥ {response_status} –¥–ª—è @{username}")
                            continue
                        
                        userinfo = json.loads(data)
                        
                        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                        if 'data' in userinfo and userinfo['data'].get('user') is not None:
                            user_data = userinfo['data']['user']
                            
                            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É
                            found_username = user_data.get('username', '').lower()
                            requested_username = username.lower()
                            
                            print(f"[API-V2-DEBUG] –ó–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏: @{requested_username}, –ø–æ–ª—É—á–∏–ª–∏: @{found_username}")
                            
                            if found_username != requested_username:
                                print(f"[API-V2-DEBUG] ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ username! –ó–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ @{requested_username}, –ø–æ–ª—É—á–∏–ª–∏ @{found_username}")
                                result = {
                                    'exists': False,
                                    'is_banned': False,
                                    'is_private': False,
                                    'followers': 0,
                                    'following': 0,
                                    'posts': 0,
                                    'is_verified': False,
                                    'full_name': '',
                                    'username': '',
                                    'profile_pic_url': '',
                                    'biography': '',
                                    'error': f'username_mismatch: requested {requested_username}, got {found_username}',
                                    'attempts': attempts,
                                    'final_attempt': attempt + 1,
                                    'proxy_used': proxy_config['ip'] if proxy_config else 'none'
                                }
                                return result
                            
                            result = {
                                'exists': True,
                                'is_banned': False,
                                'is_private': user_data.get('is_private', False),
                                'followers': user_data.get('edge_followed_by', {}).get('count', 0),
                                'following': user_data.get('edge_follow', {}).get('count', 0),
                                'posts': user_data.get('edge_owner_to_timeline_media', {}).get('count', 0),
                                'is_verified': user_data.get('is_verified', False),
                                'full_name': user_data.get('full_name', ''),
                                'username': user_data.get('username', ''),
                                'profile_pic_url': user_data.get('profile_pic_url', ''),
                                'biography': user_data.get('biography', ''),
                                'error': None,
                                'attempts': attempts,
                                'final_attempt': attempt + 1,
                                'proxy_used': proxy_config['ip'] if proxy_config else 'none'
                            }
                            return result
                        
                        elif ('data' in userinfo and userinfo['data'].get('user') is None):
                            result = {
                                'exists': False,
                                'is_banned': True,
                                'is_private': False,
                                'followers': 0,
                                'following': 0,
                                'posts': 0,
                                'is_verified': False,
                                'full_name': '',
                                'username': username,
                                'profile_pic_url': '',
                                'biography': '',
                                'error': 'Account not found or banned',
                                'attempts': attempts,
                                'final_attempt': attempt + 1,
                                'proxy_used': proxy_config['ip'] if proxy_config else 'none'
                            }
                            return result
                        
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è @{username}")
                            continue
                            
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è @{username} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                attempts.append({
                    'attempt': attempt + 1,
                    'error': 'Timeout',
                    'proxy_used': proxy_config['ip'] if proxy_config else 'none',
                    'success': False
                })
                if attempt < max_attempts - 1:
                    await asyncio.sleep(2)
                continue
                
            except json.JSONDecodeError as e:
                print(f"üìÑ JSON –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
                attempts.append({
                    'attempt': attempt + 1,
                    'error': f'JSON Decode: {str(e)}',
                    'proxy_used': proxy_config['ip'] if proxy_config else 'none',
                    'success': False
                })
                if attempt < max_attempts - 1:
                    await asyncio.sleep(3)
                continue
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
                attempts.append({
                    'attempt': attempt + 1,
                    'error': str(e),
                    'proxy_used': proxy_config['ip'] if proxy_config else 'none',
                    'success': False
                })
                if attempt < max_attempts - 1:
                    await asyncio.sleep(2)
                continue
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        return {
            'exists': None,
            'is_banned': None,
            'is_private': None,
            'followers': 0,
            'following': 0,
            'posts': 0,
            'is_verified': False,
            'full_name': '',
            'username': username,
            'profile_pic_url': '',
            'biography': '',
            'error': f'All {max_attempts} attempts failed',
            'attempts': attempts,
            'final_attempt': max_attempts,
            'proxy_used': 'multiple' if attempts else 'none'
        }


async def check_account_via_api_v2_proxy(
    session: Session,
    user_id: int,
    username: str,
    max_attempts: int = 3
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ API v2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–µ–ª–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    2. –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    
    Args:
        session: Database session
        user_id: User ID
        username: Instagram username to check
        max_attempts: Maximum number of attempts
        
    Returns:
        Dict with check results: {
            "username": str,
            "exists": bool | None,
            "full_name": str | None,
            "followers": int | None,
            "following": int | None,
            "posts": int | None,
            "screenshot_path": str | None,
            "error": str | None,
            "checked_via": str,
            "proxy_used": str
        }
    """
    print(f"[API-V2-PROXY] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ API v2 —Å –ø—Ä–æ–∫—Å–∏")
    
    result = {
        "username": username,
        "exists": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "screenshot_path": None,
        "error": None,
        "checked_via": "api-v2-proxy",
        "proxy_used": None
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    import os
    from datetime import datetime
    screenshot_dir = "screenshots"
    os.makedirs(screenshot_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    screenshot_path = os.path.join(screenshot_dir, f"{username}_header_{timestamp}.png")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        proxy_list = []
        proxies = session.query(Proxy).filter(
            Proxy.user_id == user_id,
            Proxy.is_active == True
        ).all()
        
        for proxy in proxies:
            if proxy.username and proxy.password:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç –∏–∑ host (—Ñ–æ—Ä–º–∞—Ç host:port)
                if ':' in proxy.host:
                    host, port = proxy.host.split(':', 1)
                    proxy_str = f"{host}:{port}:{proxy.username}:{proxy.password}"
                else:
                    # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                    proxy_str = f"{proxy.host}:8080:{proxy.username}:{proxy.password}"
                proxy_list.append(proxy_str)
        
        if not proxy_list:
            print(f"[API-V2-PROXY] ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            result["error"] = "no_proxies_available"
            return result
        
        print(f"[API-V2-PROXY] üì° –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxy_list)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä—â–∏–∫ —Å –ø—Ä–æ–∫—Å–∏
        checker = InstagramCheckerWithProxy(proxy_list=proxy_list)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        api_result = await checker.check_account(username, max_attempts=max_attempts, use_proxy=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.update({
            "exists": api_result.get("exists"),
            "full_name": api_result.get("full_name"),
            "followers": api_result.get("followers"),
            "following": api_result.get("following"),
            "posts": api_result.get("posts"),
            "proxy_used": api_result.get("proxy_used"),
            "error": api_result.get("error")
        })
        
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        if api_result.get("exists") is True:
            print(f"[API-V2-PROXY] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            best_proxy = select_best_proxy(session, user_id)
            if not best_proxy:
                print(f"[API-V2-PROXY] ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                result["error"] = "no_proxy_for_screenshot"
                return result
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            proxy_url = f"{best_proxy.scheme}://{best_proxy.username}:{best_proxy.password}@{best_proxy.host}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É api+proxy (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö!)
            try:
                from .proxy_checker import check_account_via_proxy_with_screenshot
            except ImportError:
                from services.proxy_checker import check_account_via_proxy_with_screenshot
            
            screenshot_result = await check_account_via_proxy_with_screenshot(
                username=username,
                proxy=best_proxy,
                headless=True,
                timeout_ms=30000,
                screenshot_path=screenshot_path
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 403 –æ—à–∏–±–∫—É, –ø—Ä–æ–±—É–µ–º Firefox (–∫–∞–∫ –≤ api+proxy)
            if screenshot_result.get("error") == "403_forbidden":
                print(f"[API-V2-PROXY] ‚ö†Ô∏è 403 Forbidden —Å –ø—Ä–æ–∫—Å–∏ - –ø—Ä–æ–±—É–µ–º Firefox")
                try:
                    from selenium import webdriver
                    from selenium.webdriver.firefox.options import Options as FirefoxOptions
                    from selenium.webdriver.common.by import By
                    from selenium.webdriver.support.ui import WebDriverWait
                    from selenium.webdriver.support import expected_conditions as EC
                    import time
                    import random
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    import os
                    os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox
                    options = FirefoxOptions()
                    
                    # Desktop —Ä–µ–∂–∏–º
                    desktop_user_agents = [
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                    ]
                    
                    user_agent = random.choice(desktop_user_agents)
                    options.set_preference("general.useragent.override", user_agent)
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                    options.set_preference("dom.webdriver.enabled", False)
                    options.set_preference("useAutomationExtension", False)
                    options.set_preference("media.navigator.enabled", False)
                    options.set_preference("media.peerconnection.enabled", False)
                    
                    # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è desktop
                    options.add_argument("--width=1920")
                    options.add_argument("--height=1080")
                    
                    if True:  # –í—Å–µ–≥–¥–∞ headless –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
                        options.add_argument("--headless")
                    
                    # –°–æ–∑–¥–∞–µ–º Firefox –¥—Ä–∞–π–≤–µ—Ä
                    driver = webdriver.Firefox(options=options)
                    driver.set_window_size(1920, 1080)
                    
                    try:
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Instagram
                        url = f"https://www.instagram.com/{username}/"
                        print(f"[API-V2-FIREFOX] üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                        driver.get(url)
                        
                        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        time.sleep(3)
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–∞—Ö)
                        InstagramCheckerWithProxy.close_instagram_modals_firefox(driver)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        time.sleep(2)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
                        print("[API-V2-FIREFOX] üî• –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
                        try:
                            # –ù–∞–∂–∞—Ç–∏–µ Escape
                            from selenium.webdriver.common.keys import Keys
                            driver.find_element("tag name", "body").send_keys(Keys.ESCAPE)
                            driver.find_element("tag name", "body").send_keys(Keys.ESCAPE)
                            print("[API-V2-FIREFOX] ‚å®Ô∏è Escape –Ω–∞–∂–∞—Ç")
                        except Exception as e:
                            print(f"[API-V2-FIREFOX] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Escape: {e}")
                        
                        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
                        try:
                            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                            close_selectors = [
                                "button[aria-label='Close']",
                                "svg[aria-label='Close']", 
                                "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                                "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                                "[data-testid='close-button']",
                                "button[class*='close']",
                                "button[class*='Close']"
                            ]
                            
                            for selector in close_selectors:
                                try:
                                    elements = driver.find_elements("css selector", selector)
                                    for element in elements:
                                        if element.is_displayed():
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                                            text = element.text.lower() if element.text else ""
                                            aria_label = element.get_attribute("aria-label") or ""
                                            if "close" in text or "–∑–∞–∫—Ä—ã—Ç—å" in text or "close" in aria_label.lower() or "–∑–∞–∫—Ä—ã—Ç—å" in aria_label.lower():
                                                driver.execute_script("arguments[0].click();", element)
                                                print(f"[API-V2-FIREFOX] üñ±Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {selector}")
                                                time.sleep(0.5)
                                except:
                                    continue
                                    
                            print("[API-V2-FIREFOX] üñ±Ô∏è –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
                        except Exception as e:
                            print(f"[API-V2-FIREFOX] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫: {e}")
                        
                        # JavaScript –∏–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–æ–≤
                        try:
                            js_click_buttons = """
                            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
                            var closeButtons = document.querySelectorAll('button[aria-label="Close"], svg[aria-label="Close"], button[aria-label="–ó–∞–∫—Ä—ã—Ç—å"], svg[aria-label="–ó–∞–∫—Ä—ã—Ç—å"]');
                            for (var i = 0; i < closeButtons.length; i++) {
                                if (closeButtons[i].offsetParent !== null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                                    var text = closeButtons[i].textContent || '';
                                    var ariaLabel = closeButtons[i].getAttribute('aria-label') || '';
                                    if (text.toLowerCase().includes('close') || text.toLowerCase().includes('–∑–∞–∫—Ä—ã—Ç—å') || 
                                        ariaLabel.toLowerCase().includes('close') || ariaLabel.toLowerCase().includes('–∑–∞–∫—Ä—ã—Ç—å')) {
                                        closeButtons[i].click();
                                    }
                                }
                            }
                            """
                            driver.execute_script(js_click_buttons)
                            print("[API-V2-FIREFOX] üñ±Ô∏è JavaScript –∫–ª–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                        except Exception as e:
                            print(f"[API-V2-FIREFOX] ‚ö†Ô∏è –û—à–∏–±–∫–∞ JavaScript –∫–ª–∏–∫–æ–≤: {e}")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                        print("[API-V2-FIREFOX] üî• –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É...")
                        try:
                            js_final_cleanup = """
                            // üî• –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê - –£–î–ê–õ–Ø–ï–ú –í–°–ï –û–°–¢–ê–í–®–ò–ï–°–Ø –≠–õ–ï–ú–ï–ù–¢–´
                            var allElements = document.querySelectorAll('*');
                            for (var i = 0; i < allElements.length; i++) {
                                var element = allElements[i];
                                var style = element.style || {};
                                var className = element.className || '';
                                
                                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
                                if (style.background && (style.background.indexOf('rgba(0,0,0') !== -1 || 
                                    style.background.indexOf('rgba(0, 0, 0') !== -1 || 
                                    style.background.indexOf('black') !== -1 || 
                                    style.background.indexOf('#000') !== -1)) {
                                    element.style.display = 'none !important';
                                    element.remove();
                                }
                                
                                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index
                                var zIndex = parseInt(style.zIndex) || 0;
                                if (zIndex > 50) {
                                    element.style.display = 'none !important';
                                    element.remove();
                                }
                                
                                // –£–¥–∞–ª—è–µ–º –≤—Å–µ fixed —ç–ª–µ–º–µ–Ω—Ç—ã
                                if (style.position === 'fixed') {
                                    element.style.display = 'none !important';
                                    element.remove();
                                }
                            }
                            
                            // üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–ï–õ–´–ô –§–û–ù
                            document.body.style.background = 'white !important';
                            document.documentElement.style.background = 'white !important';
                            document.body.style.backgroundImage = 'none !important';
                            document.documentElement.style.backgroundImage = 'none !important';
                            """
                            driver.execute_script(js_final_cleanup)
                            print("[API-V2-FIREFOX] üî• –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                        except Exception as e:
                            print(f"[API-V2-FIREFOX] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                        time.sleep(1)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                        page_source = driver.page_source
                        if "instagram.com" in driver.current_url and username.lower() in page_source.lower():
                            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                            driver.save_screenshot(screenshot_path)
                            
                            screenshot_result["screenshot_path"] = screenshot_path
                            screenshot_result["exists"] = True
                            print(f"[API-V2-PROXY] üì∏ Firefox —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
                        else:
                            print(f"[API-V2-PROXY] ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                            screenshot_result["error"] = "page_load_failed"
                            
                    finally:
                        driver.quit()
                        
                except Exception as e:
                    print(f"[API-V2-PROXY] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Firefox —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                    # Fallback –Ω–∞ PIL —Å–∫—Ä–∏–Ω—à–æ—Ç
                    try:
                        from PIL import Image, ImageDraw, ImageFont
                        from datetime import datetime
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        img = Image.new('RGB', (800, 600), color='white')
                        draw = ImageDraw.Draw(img)
                        
                        try:
                            font = ImageFont.truetype("arial.ttf", 24)
                        except:
                            font = ImageFont.load_default()
                        
                        text = f"Instagram Account: @{username}\nStatus: Active (API v2 confirmed)\nMethod: API v2 + Proxy\nTime: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                        draw.text((50, 250), text, fill='black', font=font)
                        img.save(screenshot_path)
                        
                        screenshot_result["screenshot_path"] = screenshot_path
                        screenshot_result["exists"] = True
                        print(f"[API-V2-PROXY] üì∏ Fallback PIL —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot_path}")
                        
                    except Exception as fallback_error:
                        print(f"[API-V2-PROXY] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {fallback_error}")
                        screenshot_result["error"] = "screenshot_failed_fallback"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            print(f"[API-V2-DEBUG] screenshot_result: {screenshot_result}")
            print(f"[API-V2-DEBUG] screenshot_result.get('exists'): {screenshot_result.get('exists')}")
            print(f"[API-V2-DEBUG] screenshot_result.get('exists') is True: {screenshot_result.get('exists') is True}")
            
            if screenshot_result.get("exists") is True:
                print(f"[API-V2-DEBUG] –í—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ if screenshot_result.get('exists') is True")
                result.update({
                    "exists": screenshot_result.get("exists"),
                    "full_name": screenshot_result.get("full_name"),
                    "followers": screenshot_result.get("followers"),
                    "following": screenshot_result.get("following"),
                    "posts": screenshot_result.get("posts"),
                    "is_verified": screenshot_result.get("is_verified"),
                    "is_private": screenshot_result.get("is_private"),
                    "screenshot_path": screenshot_result.get("screenshot_path"),
                    "proxy_used": screenshot_result.get("proxy_used")
                })
                
                if screenshot_result.get("screenshot_path"):
                    print(f"[API-V2-PROXY] üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: {screenshot_result['screenshot_path']}")
                else:
                    print(f"[API-V2-PROXY] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω")
                
                # –í–°–ï–ì–î–ê –ø–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω (–¥–∞–∂–µ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                print(f"[API-V2-DEBUG] –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                account = session.query(Account).filter(
                    Account.user_id == user_id,
                    Account.account == username
                ).first()
                if account:
                    print(f"[API-V2-DEBUG] –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {account.account}")
                    account.done = True
                    account.date_of_finish = date.today()
                    session.commit()
                    print(f"[API-V2-PROXY] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
                else:
                    print(f"[API-V2-DEBUG] ‚ùå –ê–∫–∫–∞—É–Ω—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            else:
                print(f"[API-V2-PROXY] ‚ö†Ô∏è –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
                result["error"] = "screenshot_verification_failed"
        
        elif api_result.get("exists") is False:
            print(f"[API-V2-PROXY] ‚ùå –ê–∫–∫–∞—É–Ω—Ç @{username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π (–Ω–µ –Ω–∞–π–¥–µ–Ω)
            account = session.query(Account).filter(
                Account.user_id == user_id,
                Account.account == username
            ).first()
            if account:
                account.done = True
                account.date_of_finish = date.today()
                session.commit()
                print(f"[API-V2-PROXY] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        else:
            print(f"[API-V2-PROXY] ‚ùì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username}: {api_result.get('error', 'unknown')}")
    
    except Exception as e:
        print(f"[API-V2-PROXY] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
        result["error"] = str(e)
    
    return result


async def batch_check_accounts_via_api_v2_proxy(
    session: Session,
    user_id: int,
    usernames: List[str],
    delay_between: float = 3.0
) -> List[Dict[str, Any]]:
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API v2 —Å –ø—Ä–æ–∫—Å–∏
    
    Args:
        session: Database session
        user_id: User ID
        usernames: –°–ø–∏—Å–æ–∫ username'–æ–≤
        delay_between: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    results = []
    
    for i, username in enumerate(usernames):
        print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(usernames)}")
        
        result = await check_account_via_api_v2_proxy(
            session=session,
            user_id=user_id,
            username=username
        )
        results.append(result)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if i < len(usernames) - 1:
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay_between}—Å–µ–∫...")
            await asyncio.sleep(delay_between)
    
    return results
