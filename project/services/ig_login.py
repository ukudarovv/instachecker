"""Final Instagram login via Playwright - based on successful test."""

from typing import Optional, List, Dict, Any
from playwright.async_api import async_playwright, TimeoutError as PWTimeoutError
from tenacity import retry, stop_after_attempt, wait_exponential

LOGIN_URL = "https://www.instagram.com/accounts/login/"


def _proxy_kwargs_from_url(proxy_url: Optional[str]):
    """Convert proxy URL to Playwright proxy kwargs."""
    if not proxy_url:
        return None
    from urllib.parse import urlparse
    u = urlparse(proxy_url)
    auth = {}
    if u.username and u.password:
        auth["username"] = u.username
        auth["password"] = u.password
    return {"server": f"{u.scheme}://{u.hostname}:{u.port}", **auth}


@retry(
    stop=stop_after_attempt(2), 
    wait=wait_exponential(multiplier=3, min=3, max=15),
    reraise=True
)
async def playwright_login_and_get_cookies(
    ig_username: str,
    ig_password: str,
    headless: bool,
    login_timeout_ms: int,
    twofa_timeout_ms: int,
    proxy_url: Optional[str] = None,
    user_agent: Optional[str] = None,
) -> List[Dict[str, Any]]:
    """
    Final login via Chromium - based on successful test algorithm.
    Returns list of cookies (dicts).
    """
    proxy_kwargs = _proxy_kwargs_from_url(proxy_url)
    
    # Use custom user agent or default realistic one
    if not user_agent:
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=headless, 
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-dev-shm-usage"
            ]
        )
        context = await browser.new_context(
            viewport={"width": 1280, "height": 900},
            user_agent=user_agent,
            proxy=proxy_kwargs
        )
        
        page = await context.new_page()
        try:
            print(f"üåê Navigating to Instagram login page...")
            await page.goto(LOGIN_URL, wait_until="domcontentloaded", timeout=30000)
            await page.wait_for_timeout(5000)
            
            print(f"üîê Logging in as @{ig_username}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ input —ç–ª–µ–º–µ–Ω—Ç—ã
            inputs = await page.query_selector_all("input")
            print(f"üìã Found {len(inputs)} input elements")
            
            if len(inputs) < 2:
                print(f"‚ùå Not enough input elements found")
                await page.screenshot(path="login_error.png")
                print(f"üì∏ Screenshot saved as login_error.png")
                raise Exception("Instagram login page not loaded correctly. Please use cookies import method.")
            
            # –ü–µ—Ä–≤—ã–π input - username, –≤—Ç–æ—Ä–æ–π - password
            username_input = inputs[0]
            password_input = inputs[1]
            
            print("‚úÖ Found input fields")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –º–µ–¥–ª–µ–Ω–Ω–æ
            await username_input.click()
            await page.wait_for_timeout(1000)
            await username_input.fill("")  # –û—á–∏—â–∞–µ–º
            await page.wait_for_timeout(500)
            await username_input.type(ig_username, delay=150)  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥
            await page.wait_for_timeout(1000)
            print("‚úÖ Username entered")
            
            await password_input.click()
            await page.wait_for_timeout(1000)
            await password_input.fill("")  # –û—á–∏—â–∞–µ–º
            await page.wait_for_timeout(500)
            await password_input.type(ig_password, delay=150)  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤–≤–æ–¥
            await page.wait_for_timeout(2000)
            print("‚úÖ Password entered")
            
            print("üñ±Ô∏è Clicking login button...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            submit_button = await page.query_selector('button[type="submit"]')
            if submit_button:
                await submit_button.click()
                print("‚úÖ Login button clicked")
            else:
                print("‚ùå Login button not found")
                raise Exception("Login button not found. Please use cookies import method.")
            
            print("‚è≥ Waiting for response...")
            
            # –ñ–¥–µ–º —Å —Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for i in range(10):  # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
                await page.wait_for_timeout(1000)
                current_url = page.url
                print(f"  {i+1}/10: URL = {current_url}")
                
                # –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
                if "/accounts/login" not in current_url:
                    print("‚úÖ URL changed - redirect happening")
                    break
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            current_url = page.url
            print(f"üîç Final URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
            if "/accounts/login" in current_url:
                print("‚ùå Login failed - still on login page")
                
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                try:
                    error_element = await page.locator('[role="alert"]').first
                    if await error_element.count() > 0:
                        error_text = await error_element.text_content()
                        print(f"‚ùå Login failed: {error_text}")
                        raise Exception(f"Login failed: {error_text}")
                except:
                    pass
                raise Exception("Login failed - credentials may be incorrect")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 2FA
            if "two_factor" in current_url:
                print("üîê Two-factor authentication required")
                print("‚ùå Cannot proceed with 2FA automatically")
                print("üí° Please use cookies import method instead")
                raise Exception("2FA required - use cookies import method")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–∑–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if "/challenge/" in current_url:
                print("üõ°Ô∏è Instagram security challenge detected")
                print("‚ùå Cannot proceed with security challenge automatically")
                print("üí° Please login manually in browser first, then export cookies")
                raise Exception("Security challenge required - cannot automate")
            
            print("‚úÖ Login successful!")
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞
            try:
                not_now_buttons = await page.query_selector_all('button:has-text("Not Now")')
                for button in not_now_buttons:
                    try:
                        await button.click()
                        await page.wait_for_timeout(1000)
                        print("üíæ Dismissed popup")
                    except:
                        pass
            except:
                pass
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üè† Navigating to home page...")
            await page.goto("https://www.instagram.com/", wait_until="domcontentloaded", timeout=15000)
            await page.wait_for_timeout(3000)
            
            # –ü–æ–ª—É—á–∞–µ–º cookies
            print("üç™ Getting cookies...")
            cookies = await context.cookies()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ sessionid
            has_sessionid = any(c.get('name') == 'sessionid' for c in cookies)
            print(f"üç™ Retrieved {len(cookies)} cookies, sessionid present: {has_sessionid}")
            
            if not has_sessionid:
                print("‚ö†Ô∏è Warning: sessionid cookie not found in response")
            
            return cookies
        finally:
            await context.close()
            await browser.close()
