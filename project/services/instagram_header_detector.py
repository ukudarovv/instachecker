"""
Instagram Header Detector - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã header –ø—Ä–æ—Ñ–∏–ª—è.
–†–µ—à–µ–Ω–∏–µ DeepSeek —Å OpenCV –∏ –¥–µ—Ç–µ–∫—Ü–∏–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
"""

import cv2
import numpy as np
from PIL import Image
import os
from typing import Optional, Tuple, Dict, List


class InstagramHeaderDetector:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã header Instagram –ø—Ä–æ—Ñ–∏–ª—è"""
    
    def __init__(self):
        self.header_templates = self._load_header_templates()
    
    def _load_header_templates(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è header"""
        return {
            'avatar_region': (50, 150, 150, 250),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–≤–∞—Ç–∞—Ä–∞
            'username_region': (200, 150, 500, 200),  # –û–±–ª–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'stats_region': (200, 220, 500, 280),  # –û–±–ª–∞—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        }
    
    def detect_header_height(self, screenshot_path: str) -> int:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã header
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã—Å–æ—Ç—É –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
        """
        try:
            print(f"[HEADER-DETECTOR] üîç –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot_path}")
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∞–º –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
            height = self._detect_by_contrast(screenshot_path)
            if height:
                print(f"[HEADER-DETECTOR] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É: {height}px")
                return height
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ header
            height = self._detect_by_elements(screenshot_path)
            if height:
                print(f"[HEADER-DETECTOR] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º: {height}px")
                return height
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Instagram
            height = self._detect_by_ui_elements(screenshot_path)
            if height:
                print(f"[HEADER-DETECTOR] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ UI: {height}px")
                return height
            
            # –ú–µ—Ç–æ–¥ 4: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_height = self._get_default_height(screenshot_path)
            print(f"[HEADER-DETECTOR] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_height}px")
            return default_height
            
        except Exception as e:
            print(f"[HEADER-DETECTOR] ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã header: {e}")
            return 600  # –í—ã—Å–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _detect_by_contrast(self, screenshot_path: str) -> Optional[int]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã header –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É –∏ —Ü–≤–µ—Ç–∞–º"""
        try:
            img = cv2.imread(screenshot_path)
            if img is None:
                return None
            
            height, width = img.shape[:2]
            print(f"[HEADER-DETECTOR] üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∫—Ä–∞–µ–≤
            edges = cv2.Canny(gray, 50, 150)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–≥—Ä–∞–Ω–∏—Ü—ã header)
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=50, 
                                  minLineLength=width*0.3, maxLineGap=20)
            
            if lines is not None:
                horizontal_lines = []
                for line in lines:
                    x1, y1, x2, y2 = line[0]
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                    if abs(y2 - y1) < 10 and abs(x2 - x1) > width * 0.3:
                        horizontal_lines.append(y1)
                
                if horizontal_lines:
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∫–∞–∫ –≥—Ä–∞–Ω–∏—Ü—É header
                    header_bottom = max(horizontal_lines)
                    result = min(header_bottom + 100, height)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É header
                    max_header_height = int(height * 0.3)  # –ú–∞–∫—Å–∏–º—É–º 30% —ç–∫—Ä–∞–Ω–∞
                    result = min(result, max_header_height)
                    
                    print(f"[HEADER-DETECTOR] üìè –ù–∞–π–¥–µ–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞ header: {result}px")
                    return result
            
            return None
            
        except Exception as e:
            print(f"[HEADER-DETECTOR] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ contrast detection: {e}")
            return None
    
    def _detect_by_elements(self, screenshot_path: str) -> Optional[int]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º header"""
        try:
            img = Image.open(screenshot_path)
            width, height = img.size
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy array –¥–ª—è OpenCV
            img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            
            # –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã header
            elements_found = []
            
            # 1. –ü–æ–∏—Å–∫ –∫—Ä—É–≥–ª–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
            circles = self._detect_circles(img_cv)
            if circles is not None:
                avatar_y = int(circles[0, 0, 1])
                elements_found.append(avatar_y + 200)  # –ê–≤–∞—Ç–∞—Ä + –æ—Ç—Å—Ç—É–ø
                print(f"[HEADER-DETECTOR] üîµ –ù–∞–π–¥–µ–Ω –∞–≤–∞—Ç–∞—Ä –Ω–∞ Y: {avatar_y}")
            
            # 2. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ (–æ–±—ã—á–Ω–æ —è—Ä–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
            buttons_y = self._detect_buttons(img_cv)
            if buttons_y:
                elements_found.append(buttons_y + 100)
                print(f"[HEADER-DETECTOR] üîò –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞ Y: {buttons_y}")
            
            # 3. –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –±–∏–æ
            bio_y = self._detect_bio_text(img_cv)
            if bio_y:
                elements_found.append(bio_y + 50)
                print(f"[HEADER-DETECTOR] üìù –ù–∞–π–¥–µ–Ω bio –Ω–∞ Y: {bio_y}")
            
            if elements_found:
                result = min(max(elements_found), height - 100)
                print(f"[HEADER-DETECTOR] üìè –ù–∞–π–¥–µ–Ω–æ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º: {result}px")
                return result
            
            return None
            
        except Exception as e:
            print(f"[HEADER-DETECTOR] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ element detection: {e}")
            return None
    
    def _detect_circles(self, img) -> Optional[float]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∫—Ä—É–≥–ª–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            gray = cv2.medianBlur(gray, 5)
            
            circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1, 50,
                                     param1=50, param2=30, minRadius=40, maxRadius=80)
            
            if circles is not None:
                circles = np.round(circles[0, :]).astype("int")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∫—Ä—É–≥–∞ (–∞–≤–∞—Ç–∞—Ä)
                return float(circles[0][1])
            return None
        except:
            return None
    
    def _detect_buttons(self, img) -> Optional[float]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ (—è—Ä–∫–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)"""
        try:
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            
            # –ú–∞—Å–∫–∞ –¥–ª—è —Å–∏–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ (–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)
            blue_lower = np.array([100, 150, 50])
            blue_upper = np.array([140, 255, 255])
            blue_mask = cv2.inRange(hsv, blue_lower, blue_upper)
            
            # –ú–∞—Å–∫–∞ –¥–ª—è –±–µ–ª—ã—Ö/—Å–µ—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
            white_lower = np.array([0, 0, 200])
            white_upper = np.array([180, 50, 255])
            white_mask = cv2.inRange(hsv, white_lower, white_upper)
            
            combined_mask = cv2.bitwise_or(blue_mask, white_mask)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
            contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            button_positions = []
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–∫–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ —à–∏—Ä–æ–∫–∏–µ –∏ –Ω–µ–≤—ã—Å–æ–∫–∏–µ)
                if w > 100 and h > 30 and h < 80:
                    button_positions.append(y)
            
            if button_positions:
                return float(min(button_positions))  # –°–∞–º–∞—è –≤–µ—Ä—Ö–Ω—è—è –∫–Ω–æ–ø–∫–∞
            
            return None
        except:
            return None
    
    def _detect_bio_text(self, img) -> Optional[float]:
        """–î–µ—Ç–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –±–∏–æ"""
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º threshold –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)
            
            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            kernel = np.ones((3, 20), np.uint8)
            dilated = cv2.dilate(thresh, kernel, iterations=2)
            
            contours, _ = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            text_positions = []
            for contour in contours:
                x, y, w, h = cv2.boundingRect(contour)
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏)
                if w > 200 and h > 15 and h < 50:
                    text_positions.append(y)
            
            if text_positions:
                return float(max(text_positions))  # –°–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            
            return None
        except:
            return None
    
    def _detect_by_ui_elements(self, screenshot_path: str) -> Optional[int]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º Instagram"""
        try:
            img = cv2.imread(screenshot_path)
            if img is None:
                return None
            
            height, width = img.shape[:2]
            
            # –ü–æ–∏—Å–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Instagram UI
            elements = {
                'bottom_nav': self._find_bottom_navigation(img),
                'stories': self._find_stories_line(img),
                'posts_grid': self._find_posts_grid(img)
            }
            
            print(f"[HEADER-DETECTOR] üîç UI —ç–ª–µ–º–µ–Ω—Ç—ã: {elements}")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_starts = []
            for element_name, element_y in elements.items():
                if element_y:
                    content_starts.append(element_y)
                    print(f"[HEADER-DETECTOR] üìç {element_name}: Y={element_y}")
            
            if content_starts:
                header_height = min(content_starts) - 50  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                result = max(400, min(header_height, height - 200))
                print(f"[HEADER-DETECTOR] üìè –ù–∞–π–¥–µ–Ω–æ –ø–æ UI: {result}px")
                return result
            
            return None
            
        except Exception as e:
            print(f"[HEADER-DETECTOR] ‚ö†Ô∏è –û—à–∏–±–∫–∞ UI detection: {e}")
            return None
    
    def _find_bottom_navigation(self, img) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Instagram"""
        try:
            height, width = img.shape[:2]
            # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 150px)
            bottom_region = img[height-150:height, :]
            
            # –ò—â–µ–º —Ç–µ–º–Ω—É—é –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            gray_bottom = cv2.cvtColor(bottom_region, cv2.COLOR_BGR2GRAY)
            avg_brightness = np.mean(gray_bottom)
            
            if avg_brightness < 100:  # –¢–µ–º–Ω–∞—è –ø–∞–Ω–µ–ª—å
                return height - 150
            
            return None
        except:
            return None
    
    def _find_stories_line(self, img) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ª–∏–Ω–∏–∏ Stories"""
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ò—â–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
            edges = cv2.Canny(gray, 50, 150)
            lines = cv2.HoughLinesP(edges, 1, np.pi/180, threshold=30,
                                  minLineLength=100, maxLineGap=10)
            
            if lines is not None:
                for line in lines:
                    x1, y1, x2, y2 = line[0]
                    if abs(y2 - y1) < 5 and 200 < y1 < 600:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ stories
                        return y1
            
            return None
        except:
            return None
    
    def _find_posts_grid(self, img) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ grid —Å –ø–æ—Å—Ç–∞–º–∏"""
        try:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ò—â–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π pattern grid (3 –∫–æ–ª–æ–Ω–∫–∏)
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—â–µ–º –æ–±–ª–∞—Å—Ç—å —Å –≤—ã—Å–æ–∫–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π
            kernel = np.ones((5,5), np.uint8)
            gradient = cv2.morphologyEx(gray, cv2.MORPH_GRADIENT, kernel)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ grid
            height, width = gradient.shape
            step = 10
            
            for y in range(400, height - 100, step):
                row_region = gradient[y:y+step, :]
                row_variance = np.var(row_region)
                
                # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä—É grid
                if row_variance > 1000:
                    return y
            
            return None
        except:
            return None
    
    def _get_default_height(self, screenshot_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            with Image.open(screenshot_path) as img:
                width, height = img.size
                
                # –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É header
                if height > 1500:  # –î–ª–∏–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                    return min(700, int(height * 0.25))  # –ú–∞–∫—Å–∏–º—É–º 25%
                elif height > 1000:  # –°—Ä–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                    return min(600, int(height * 0.3))   # –ú–∞–∫—Å–∏–º—É–º 30%
                else:  # –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                    return min(500, int(height * 0.35))  # –ú–∞–∫—Å–∏–º—É–º 35%
        except:
            return 600
    
    def crop_to_header(self, screenshot_path: str, output_path: str = None) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–µ–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–æ header
        """
        if output_path is None:
            name, ext = os.path.splitext(screenshot_path)
            output_path = f"{name}_header{ext}"
        
        try:
            print(f"[HEADER-DETECTOR] üîç –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É header
            header_height = self.detect_header_height(screenshot_path)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(screenshot_path) as img:
                width, height = img.size
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã
                crop_box = (0, 0, width, min(header_height, height))
                cropped_img = img.crop(crop_box)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cropped_img.save(output_path, quality=95)
                
                print(f"[HEADER-DETECTOR] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–µ–∑–∞–Ω: {header_height}px -> {output_path}")
                return output_path
                
        except Exception as e:
            print(f"[HEADER-DETECTOR] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            return screenshot_path
    
    def batch_crop_screenshots(self, screenshot_paths: list, output_dir: str = None) -> list:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        results = []
        
        for screenshot_path in screenshot_paths:
            if not os.path.exists(screenshot_path):
                print(f"[HEADER-DETECTOR] ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {screenshot_path}")
                continue
            
            if output_dir:
                filename = os.path.basename(screenshot_path)
                name, ext = os.path.splitext(filename)
                output_path = os.path.join(output_dir, f"{name}_header{ext}")
            else:
                output_path = None
            
            try:
                result_path = self.crop_to_header(screenshot_path, output_path)
                results.append(result_path)
            except Exception as e:
                print(f"[HEADER-DETECTOR] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {screenshot_path}: {e}")
                results.append(screenshot_path)
        
        return results
