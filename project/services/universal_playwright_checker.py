"""
Universal Playwright Checker - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–±–∏–ª—å–Ω—É—é —ç–º—É–ª—è—Ü–∏—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Instagram.
"""

import asyncio
import os
import random
from typing import Optional, Dict, Tuple
from datetime import datetime
from urllib.parse import urlparse

try:
    from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
except ImportError:
    async_playwright = None
    PlaywrightTimeoutError = Exception


# –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏
MOBILE_DEVICES = {
    "iPhone 12": {"width": 390, "height": 844},
    "iPhone 13 Pro": {"width": 390, "height": 844},
    "Samsung Galaxy S21": {"width": 360, "height": 800},
    "Pixel 6": {"width": 412, "height": 915}
}

# –ú–æ–±–∏–ª—å–Ω—ã–µ User-Agents
MOBILE_USER_AGENTS = [
    "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Linux; Android 12; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Mobile Safari/537.36",
    "Mozilla/5.0 (Linux; Android 11; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Mobile Safari/537.36"
]


async def close_instagram_modals_aggressive(page):
    """üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è."""
    print("[PLAYWRIGHT] üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è...")
    
    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        await page.wait_for_timeout(3000)
        
        # –°–£–ü–ï–† –ê–ì–†–ï–°–°–ò–í–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è –∏ –º–æ–¥–∞–ª–æ–∫
        js_code = """
        (() => {
            console.log('üî• –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è');
            let removedCount = 0;
            
            // üî• –®–ê–ì 1: –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º z-index
            document.querySelectorAll('*').forEach(element => {
                const style = window.getComputedStyle(element);
                const zIndex = parseInt(style.zIndex) || 0;
                
                if (zIndex > 50) {
                    element.remove();
                    removedCount++;
                }
            });
            
            // üî• –®–ê–ì 2: –£–¥–∞–ª—è–µ–º –≤—Å–µ fixed –∏ absolute —ç–ª–µ–º–µ–Ω—Ç—ã
            document.querySelectorAll('*').forEach(element => {
                const style = window.getComputedStyle(element);
                
                if (style.position === 'fixed' || 
                    (style.position === 'absolute' && parseInt(style.zIndex) > 0)) {
                    element.remove();
                    removedCount++;
                }
            });
            
            // üî• –®–ê–ì 3: –£–¥–∞–ª—è–µ–º –ø–æ role
            document.querySelectorAll('[role="dialog"], [role="presentation"]').forEach(el => {
                el.remove();
                removedCount++;
            });
            
            // üî• –®–ê–ì 4: –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
            document.querySelectorAll('*').forEach(element => {
                const style = window.getComputedStyle(element);
                const bg = style.backgroundColor;
                
                if (bg.includes('rgba(0, 0, 0') || bg.includes('rgb(0, 0, 0)')) {
                    if (parseInt(style.zIndex) > 0 || style.position === 'fixed') {
                        element.remove();
                        removedCount++;
                    }
                }
            });
            
            // üî• –®–ê–ì 5: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º body –∏ html
            if (document.body) {
                document.body.style.overflow = 'auto';
                document.body.style.filter = 'none';
                document.body.style.opacity = '1';
                document.body.style.backgroundColor = '';
                document.body.classList.remove('modal-open', 'overflow-hidden');
            }
            
            if (document.documentElement) {
                document.documentElement.style.overflow = 'auto';
                document.documentElement.style.filter = 'none';
                document.documentElement.style.opacity = '1';
            }
            
            // üî• –®–ê–ì 6: –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            const style = document.createElement('style');
            style.id = 'remove-dimming-overlay';
            style.textContent = `
                body, html {
                    filter: none !important;
                    opacity: 1 !important;
                    overflow: visible !important;
                }
                [style*="position: fixed"],
                [style*="z-index"] {
                    filter: none !important;
                }
            `;
            document.head.appendChild(style);
            
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', removedCount);
            console.log('‚úÖ –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —É–±—Ä–∞–Ω—ã');
        })();
        """
        
        await page.evaluate(js_code)
        print("[PLAYWRIGHT] ‚úÖ JavaScript —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        # –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
        close_selectors = [
            "button[aria-label='Close']",
            "svg[aria-label='Close']",
            "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
            "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']"
        ]
        
        for selector in close_selectors:
            try:
                close_button = await page.query_selector(selector)
                if close_button:
                    await close_button.click()
                    print(f"[PLAYWRIGHT] ‚úÖ –ö–ª–∏–∫ –ø–æ: {selector}")
                    await page.wait_for_timeout(500)
            except Exception:
                pass
        
        # –ú–µ—Ç–æ–¥ 3: Escape –∫–ª–∞–≤–∏—à–∞
        try:
            await page.keyboard.press('Escape')
            await page.keyboard.press('Escape')
            await page.keyboard.press('Escape')
            print("[PLAYWRIGHT] ‚å®Ô∏è Escape –Ω–∞–∂–∞—Ç")
        except Exception:
            pass
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        await page.wait_for_timeout(1000)
        
        print("[PLAYWRIGHT] ‚úÖ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
    except Exception as e:
        print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {e}")


async def check_instagram_account_universal(
    username: str,
    proxy_url: Optional[str] = None,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    timeout: int = 90,
    mobile_emulation: bool = True
) -> Tuple[bool, str, Optional[str], Optional[Dict]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Playwright —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —ç–º—É–ª—è—Ü–∏–µ–π.
    –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.
    
    Args:
        username: Instagram username
        proxy_url: Proxy URL  
        screenshot_path: Path for screenshot
        headless: Headless mode
        timeout: Timeout in seconds
        mobile_emulation: If True, use mobile emulation; if False, use desktop
        
    Returns:
        Tuple of (success, message, screenshot_path, profile_data)
    """
    if not async_playwright:
        return False, "‚ùå Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", None, None
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
    proxy_config = None
    if proxy_url:
        try:
            parsed = urlparse(proxy_url)
            proxy_config = {
                "server": f"{parsed.scheme}://{parsed.hostname}:{parsed.port}"
            }
            if parsed.username:
                proxy_config["username"] = parsed.username
                proxy_config["password"] = parsed.password
            print(f"[PLAYWRIGHT] üåê –ü—Ä–æ–∫—Å–∏: {proxy_config['server']}")
        except Exception as e:
            print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
    
    try:
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Firefox (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .venv)
            try:
                browser = await p.firefox.launch(
                    headless=headless,
                    proxy=proxy_config
                )
                print(f"[PLAYWRIGHT] ‚úÖ Firefox –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
            except Exception as proxy_error:
                print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏: {proxy_error}")
                print(f"[PLAYWRIGHT] üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                browser = await p.firefox.launch(headless=headless)
                proxy_config = None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
                print(f"[PLAYWRIGHT] ‚úÖ Firefox –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ (–º–æ–±–∏–ª—å–Ω–∞—è –∏–ª–∏ desktop)
            if mobile_emulation:
                # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è
                device_name = random.choice(list(MOBILE_DEVICES.keys()))
                device = MOBILE_DEVICES[device_name]
                user_agent = random.choice(MOBILE_USER_AGENTS)
                
                print(f"[PLAYWRIGHT] üì± –≠–º—É–ª—è—Ü–∏—è: {device_name}")
                print(f"[PLAYWRIGHT] üåê User-Agent: {user_agent[:60]}...")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                context = await browser.new_context(
                    viewport={"width": device["width"], "height": device["height"]},
                    user_agent=user_agent,
                    locale='en-US',
                    timezone_id='America/New_York'
                )
            else:
                # Desktop —Ä–µ–∂–∏–º
                desktop_user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                
                print(f"[PLAYWRIGHT] üñ•Ô∏è –†–µ–∂–∏–º: Desktop")
                print(f"[PLAYWRIGHT] üåê User-Agent: {desktop_user_agent[:60]}...")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å desktop –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                context = await browser.new_context(
                    viewport={"width": 1920, "height": 1080},
                    user_agent=desktop_user_agent,
                    locale='en-US',
                    timezone_id='America/New_York'
                )
            
            page = await context.new_page()
            
            # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await page.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
            """)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            page.set_default_timeout(timeout * 1000)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
            url = f"https://www.instagram.com/{username}/"
            print(f"[PLAYWRIGHT] üì° –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
            if proxy_url:
                print(f"[PLAYWRIGHT] üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏...")
                try:
                    test_response = await page.goto("https://httpbin.org/ip", timeout=15000)
                    if test_response and test_response.status == 200:
                        print(f"[PLAYWRIGHT] ‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as proxy_test_error:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏: {proxy_test_error}")
            
            try:
                print(f"[PLAYWRIGHT] ‚è±Ô∏è Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeout} —Å–µ–∫—É–Ω–¥")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Ö–æ–¥ - –∂–¥–µ–º —Ç–æ–ª—å–∫–æ DOM
                try:
                    response = await page.goto(url, wait_until='domcontentloaded', timeout=timeout * 1000)
                    status_code = response.status
                    print(f"[PLAYWRIGHT] üìä HTTP Status: {status_code}")
                except Exception as goto_error:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: {goto_error}")
                    # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º timeout
                    try:
                        response = await page.goto(url, wait_until='domcontentloaded', timeout=30000)
                        status_code = response.status
                        print(f"[PLAYWRIGHT] üìä HTTP Status (retry): {status_code}")
                    except Exception as retry_error:
                        print(f"[PLAYWRIGHT] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {retry_error}")
                        await browser.close()
                        return False, f"‚ùå –û—à–∏–±–∫–∞: {retry_error}", None, None
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                print(f"[PLAYWRIGHT] ‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Instagram
                try:
                    # –ñ–¥–µ–º –∞–≤–∞—Ç–∞—Ä –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await page.wait_for_selector('img[alt*="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"], img[alt*="Profile picture"], h1, h2', timeout=15000)
                    print(f"[PLAYWRIGHT] ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
                except:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                print(f"[PLAYWRIGHT] üñºÔ∏è –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
                await page.wait_for_timeout(8000)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
                try:
                    # –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                    avatar_selectors = [
                        'img[alt*="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"]',
                        'img[alt*="Profile picture"]',
                        'img[alt*="profile"]',
                        'img[alt*="avatar"]',
                        'img[src*="profile"]',
                        'img[src*="avatar"]',
                        'img[class*="profile"]',
                        'img[class*="avatar"]'
                    ]
                    
                    avatar_found = False
                    for selector in avatar_selectors:
                        try:
                            await page.wait_for_selector(selector, timeout=5000)
                            print(f"[PLAYWRIGHT] ‚úÖ –ê–≤–∞—Ç–∞—Ä –Ω–∞–π–¥–µ–Ω: {selector}")
                            avatar_found = True
                            break
                        except:
                            continue
                    
                    if avatar_found:
                        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
                        await page.wait_for_function("""
                            () => {
                                const selectors = [
                                    'img[alt*="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"]',
                                    'img[alt*="Profile picture"]',
                                    'img[alt*="profile"]',
                                    'img[alt*="avatar"]',
                                    'img[src*="profile"]',
                                    'img[src*="avatar"]',
                                    'img[class*="profile"]',
                                    'img[class*="avatar"]'
                                ];
                                
                                for (const selector of selectors) {
                                    const img = document.querySelector(selector);
                                    if (img && img.complete && img.naturalWidth > 0) {
                                        return true;
                                    }
                                }
                                return false;
                            }
                        """, timeout=15000)
                        print(f"[PLAYWRIGHT] ‚úÖ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω")
                    else:
                        print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as avatar_error:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º: {avatar_error}")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ª—é–±—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                try:
                    await page.wait_for_selector('img', timeout=10000)
                    print(f"[PLAYWRIGHT] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
                    
                    # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    await page.wait_for_function("""
                        () => {
                            const images = document.querySelectorAll('img');
                            let loadedCount = 0;
                            images.forEach(img => {
                                if (img.complete && img.naturalWidth > 0) {
                                    loadedCount++;
                                }
                            });
                            return loadedCount > 0;
                        }
                    """, timeout=15000)
                    print(f"[PLAYWRIGHT] ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                except:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                await page.wait_for_timeout(5000)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                await close_instagram_modals_aggressive(page)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    visible_elements = await page.evaluate("""
                        () => {
                            const elements = document.querySelectorAll('img, h1, h2, div[role="main"]');
                            let visibleCount = 0;
                            elements.forEach(el => {
                                const rect = el.getBoundingClientRect();
                                if (rect.width > 0 && rect.height > 0) {
                                    visibleCount++;
                                }
                            });
                            return visibleCount;
                        }
                    """)
                    print(f"[PLAYWRIGHT] üëÅÔ∏è –í–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {visible_elements}")
                    
                    if visible_elements < 3:
                        print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ú–∞–ª–æ –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∂–¥–µ–º –µ—â–µ...")
                        await page.wait_for_timeout(5000)
                except:
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                page_title = await page.title()
                content = await page.content()
                current_url = page.url
                
                print(f"[PLAYWRIGHT] üìÑ Title: {page_title}")
                print(f"[PLAYWRIGHT] üîó URL: {current_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                profile_data = {}
                
                if status_code == 404:
                    message = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)"
                    await browser.close()
                    return False, message, None, None
                
                elif status_code == 403:
                    message = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)"
                    await browser.close()
                    return False, message, None, None
                
                elif "Sorry, this page isn't available" in content:
                    message = "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    await browser.close()
                    return False, message, None, None
                
                # –ü—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                if screenshot_path:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
                        os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)
                        
                        # –î–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è –ë–ï–ó –æ–±—Ä–µ–∑–∫–∏
                        print(f"[PLAYWRIGHT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
                        await page.screenshot(path=screenshot_path, full_page=False)
                        
                        if os.path.exists(screenshot_path):
                            size = os.path.getsize(screenshot_path) / 1024
                            print(f"[PLAYWRIGHT] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω: {size:.1f} KB")
                            profile_data['screenshot'] = screenshot_path
                        else:
                            print(f"[PLAYWRIGHT] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                            screenshot_path = None
                        
                    except Exception as e:
                        print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                        screenshot_path = None
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                await browser.close()
                
                # –ü–æ–ª—É—á–∞–µ–º meta description
                try:
                    meta_desc = page_title
                    if meta_desc:
                        profile_data['description'] = meta_desc
                except:
                    pass
                
                message = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω"
                if page_title:
                    message += f"\nüìÑ {page_title}"
                
                return True, message, screenshot_path, profile_data
                
            except PlaywrightTimeoutError as e:
                print(f"[PLAYWRIGHT] ‚è±Ô∏è Timeout –æ—à–∏–±–∫–∞: {e}")
                await browser.close()
                return False, f"‚è±Ô∏è Timeout - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥", None, None
            
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}", None, None


async def batch_check_accounts_universal(
    accounts: list,
    proxy_url: Optional[str] = None,
    screenshots_dir: str = "screenshots",
    headless: bool = True
) -> Dict[str, Dict]:
    """–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    results = {}
    
    for account in accounts:
        if hasattr(account, 'account'):
            username = account.account
        else:
            username = str(account)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = os.path.join(screenshots_dir, f"{username}_{timestamp}.png")
        
        print(f"\n[PLAYWRIGHT] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username}...")
        
        success, message, screenshot, profile_data = await check_instagram_account_universal(
            username=username,
            proxy_url=proxy_url,
            screenshot_path=screenshot_path,
            headless=headless
        )
        
        results[username] = {
            'success': success,
            'message': message,
            'screenshot': screenshot,
            'profile_data': profile_data,
            'checked_at': datetime.now().isoformat()
        }
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        await asyncio.sleep(random.uniform(3, 6))
    
    return results
