"""
üî• Instagram checker using Playwright - —Å–∞–º–æ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
"""

import asyncio
import os
import time
from typing import Optional, Dict, Any
from datetime import datetime


class InstagramPlaywrightChecker:
    """Instagram checker using Playwright with full proxy support."""
    
    def __init__(self):
        self.mobile_user_agents = [
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Linux; Android 12; SM-S906N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36"
        ]
        
        self.mobile_devices = {
            "iPhone 13 Pro": {"width": 390, "height": 844},
            "iPhone 12": {"width": 390, "height": 844},
            "Samsung Galaxy S21": {"width": 360, "height": 800},
            "Pixel 7": {"width": 412, "height": 915}
        }
    
    def parse_proxy(self, proxy: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ URL –¥–ª—è Playwright."""
        if not proxy:
            return None
        
        try:
            # –§–æ—Ä–º–∞—Ç: http://user:pass@host:port
            proxy_clean = proxy.replace('http://', '').replace('https://', '')
            
            if '@' in proxy_clean:
                # –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                auth_part, server_part = proxy_clean.split('@', 1)
                username, password = auth_part.split(':', 1)
                
                if ':' in server_part:
                    host, port = server_part.split(':', 1)
                else:
                    host = server_part
                    port = '80'
                
                return {
                    "server": f"http://{host}:{port}",
                    "username": username,
                    "password": password
                }
            else:
                # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if ':' in proxy_clean:
                    host, port = proxy_clean.split(':', 1)
                else:
                    host = proxy_clean
                    port = '80'
                
                return {
                    "server": f"http://{host}:{port}"
                }
        
        except Exception as e:
            print(f"[PLAYWRIGHT] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    async def close_instagram_modals_aggressive(self, page):
        """üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω Instagram."""
        print("[PLAYWRIGHT] üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...")
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            await page.wait_for_timeout(3000)
            
            # –ú–µ—Ç–æ–¥ 1: JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            js_code = """
            // üî• –£–î–ê–õ–Ø–ï–ú –í–°–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò OVERLAY
            const allElements = document.querySelectorAll('*');
            allElements.forEach(element => {
                const className = String(element.className || '');
                const style = element.style || {};
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ overlay
                if (className.includes('x7r02ix') || 
                    className.includes('x1vjfegm') || 
                    className.includes('_abcm') ||
                    className.includes('modal') ||
                    className.includes('overlay') ||
                    className.includes('backdrop') ||
                    element.getAttribute('role') === 'dialog' ||
                    style.position === 'fixed' ||
                    parseInt(style.zIndex) > 1000) {
                    
                    element.style.display = 'none';
                    element.style.visibility = 'hidden';
                    element.style.opacity = '0';
                    element.remove();
                }
            });
            
            // üî• –£–î–ê–õ–Ø–ï–ú –≠–õ–ï–ú–ï–ù–¢–´ –° –í–´–°–û–ö–ò–ú Z-INDEX
            const highZElements = document.querySelectorAll('[style*="z-index"]');
            highZElements.forEach(element => {
                const zIndex = parseInt(element.style.zIndex) || 0;
                if (zIndex > 100) {
                    element.style.display = 'none';
                    element.remove();
                }
            });
            
            // üî• –£–î–ê–õ–Ø–ï–ú FIXED –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´
            const fixedElements = document.querySelectorAll('[style*="position: fixed"]');
            fixedElements.forEach(element => {
                element.style.display = 'none';
                element.remove();
            });
            
            // üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú BODY –ò HTML
            document.body.classList.remove('modal-open', 'overflow-hidden');
            document.body.style.overflow = 'auto';
            document.body.style.position = 'static';
            document.body.style.background = 'transparent';
            document.documentElement.style.overflow = 'auto';
            document.documentElement.style.background = 'transparent';
            
            // üî• –û–ß–ò–©–ê–ï–ú –°–¢–ò–õ–ò
            document.body.removeAttribute('style');
            document.documentElement.removeAttribute('style');
            document.body.style.overflow = 'auto';
            document.documentElement.style.overflow = 'auto';
            """
            
            await page.evaluate(js_code)
            print("[PLAYWRIGHT] ‚úÖ JavaScript —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
            # –ú–µ—Ç–æ–¥ 2: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
            close_selectors = [
                "button[aria-label='Close']",
                "svg[aria-label='Close']",
                "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']"
            ]
            
            for selector in close_selectors:
                try:
                    close_button = await page.query_selector(selector)
                    if close_button:
                        await close_button.click()
                        print(f"[PLAYWRIGHT] ‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è: {selector}")
                        await page.wait_for_timeout(1000)
                except Exception:
                    pass
            
            # –ú–µ—Ç–æ–¥ 3: Escape –∫–ª–∞–≤–∏—à–∞
            try:
                await page.keyboard.press('Escape')
                await page.keyboard.press('Escape')
                await page.keyboard.press('Escape')
                print("[PLAYWRIGHT] ‚å®Ô∏è –ù–∞–∂–∞—Ç–∏–µ Escape –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            except Exception:
                pass
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            await page.wait_for_timeout(2000)
            
            print("[PLAYWRIGHT] ‚úÖ –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return True
            
        except Exception as e:
            print(f"[PLAYWRIGHT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω: {e}")
            return False
    
    async def check_profile_existence(
        self,
        username: str,
        screenshot_path: Optional[str] = None,
        headless: bool = True,
        proxy: Optional[str] = None
    ) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ Playwright."""
        
        print(f"[PLAYWRIGHT] üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @{username}")
        
        try:
            from playwright.async_api import async_playwright
        except ImportError:
            print("[PLAYWRIGHT] ‚ùå Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("[PLAYWRIGHT] üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright && playwright install chromium")
            return {
                "exists": None,
                "error": "Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "screenshot_path": None
            }
        
        try:
            async with async_playwright() as p:
                # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
                proxy_config = self.parse_proxy(proxy) if proxy else None
                
                if proxy_config:
                    print(f"[PLAYWRIGHT] üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {proxy_config['server']}")
                    if 'username' in proxy_config:
                        print(f"[PLAYWRIGHT] üîê –° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {proxy_config['username']}:***")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ–∫—Å–∏
                browser = await p.chromium.launch(
                    headless=headless,
                    proxy=proxy_config
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π
                import random
                device_name = random.choice(list(self.mobile_devices.keys()))
                device = self.mobile_devices[device_name]
                user_agent = random.choice(self.mobile_user_agents)
                
                print(f"[PLAYWRIGHT] üì± –≠–º—É–ª—è—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_name}")
                print(f"[PLAYWRIGHT] üåê User-Agent: {user_agent[:50]}...")
                
                context = await browser.new_context(
                    viewport={"width": device["width"], "height": device["height"]},
                    user_agent=user_agent,
                    locale='ru-RU',
                    timezone_id='Europe/Moscow'
                )
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = await context.new_page()
                
                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                await page.add_init_script("""
                    Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                    Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                """)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                page.set_default_timeout(45000)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
                url = f"https://www.instagram.com/{username}/"
                print(f"[PLAYWRIGHT] üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                
                response = await page.goto(url, wait_until='domcontentloaded')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                status_code = response.status
                print(f"[PLAYWRIGHT] üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {status_code}")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await page.wait_for_timeout(5000)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                await self.close_instagram_modals_aggressive(page)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                content = await page.content()
                page_title = await page.title()
                
                print(f"[PLAYWRIGHT] üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                exists = None
                error = None
                
                if status_code == 404:
                    exists = False
                    error = "404_not_found"
                    print(f"[PLAYWRIGHT] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                
                elif status_code == 403:
                    exists = None
                    error = "403_forbidden"
                    print(f"[PLAYWRIGHT] üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                
                elif "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in content or "Sorry, this page isn't available" in content:
                    exists = False
                    error = "page_not_found"
                    print(f"[PLAYWRIGHT] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω (–∫–æ–Ω—Ç–µ–Ω—Ç)")
                
                elif "–í–æ–π–¥–∏—Ç–µ –≤ Instagram" in content or "Log in to Instagram" in content:
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–æ–π—Ç–∏ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
                    exists = True  # –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥
                    print(f"[PLAYWRIGHT] ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                else:
                    exists = True
                    print(f"[PLAYWRIGHT] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{username} –Ω–∞–π–¥–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                if screenshot_path:
                    await page.screenshot(path=screenshot_path, full_page=False)
                    
                    if os.path.exists(screenshot_path):
                        file_size = os.path.getsize(screenshot_path)
                        print(f"[PLAYWRIGHT] üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path} ({file_size} –±–∞–π—Ç)")
                    else:
                        print(f"[PLAYWRIGHT] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                        screenshot_path = None
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                await browser.close()
                
                return {
                    "exists": exists,
                    "error": error,
                    "screenshot_path": screenshot_path,
                    "status_code": status_code,
                    "checked_via": "playwright"
                }
        
        except Exception as e:
            print(f"[PLAYWRIGHT] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "exists": None,
                "error": str(e),
                "screenshot_path": None,
                "checked_via": "playwright"
            }


async def check_account_with_playwright(
    username: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    max_retries: int = 2,
    proxy: Optional[str] = None
) -> Dict[str, Any]:
    """
    üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Playwright
    
    Args:
        username: Instagram username
        screenshot_path: Path for screenshot
        headless: Run in headless mode
        max_retries: Maximum retry attempts
        proxy: Proxy URL (http://user:pass@host:port)
        
    Returns:
        Dict with check results
    """
    print(f"[PLAYWRIGHT-CHECK] üöÄ –ó–∞–ø—É—Å–∫ Playwright –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @{username}")
    
    checker = InstagramPlaywrightChecker()
    
    for attempt in range(max_retries):
        print(f"[PLAYWRIGHT-CHECK] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
        
        try:
            result = await checker.check_profile_existence(
                username=username,
                screenshot_path=screenshot_path,
                headless=headless,
                proxy=proxy
            )
            
            if result.get("exists") is not None:
                print(f"[PLAYWRIGHT-CHECK] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {
                    "username": username,
                    "exists": result["exists"],
                    "is_private": None,
                    "full_name": None,
                    "followers": None,
                    "following": None,
                    "posts": None,
                    "screenshot_path": result.get("screenshot_path"),
                    "error": result.get("error"),
                    "checked_via": "playwright",
                    "proxy_used": bool(proxy),
                    "status_code": result.get("status_code"),
                    "screenshot_created": bool(result.get("screenshot_path"))
                }
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            if attempt < max_retries - 1:
                import random
                delay = random.uniform(3, 7)
                print(f"[PLAYWRIGHT-CHECK] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)
        
        except Exception as e:
            print(f"[PLAYWRIGHT-CHECK] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                import random
                delay = random.uniform(3, 7)
                print(f"[PLAYWRIGHT-CHECK] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    print(f"[PLAYWRIGHT-CHECK] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "screenshot_path": None,
        "error": "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Playwright –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å",
        "checked_via": "playwright",
        "proxy_used": bool(proxy),
        "screenshot_created": False
    }

