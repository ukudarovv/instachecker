"""
Main Checker - –≥–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
–õ–æ–≥–∏–∫–∞: API –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ ‚Üí Proxy + —Å–∫—Ä–∏–Ω—à–æ—Ç.
"""

import asyncio
import os
from typing import Optional, Dict, Tuple
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

try:
    from ..models import Account, Proxy
    from ..utils.encryptor import OptionalFernet
    from ..config import get_settings
    from .universal_playwright_checker import check_instagram_account_universal
    from .proxy_service import get_active_proxies
    from .check_via_api import check_account_exists_via_api
except ImportError:
    from models import Account, Proxy
    from utils.encryptor import OptionalFernet
    from config import get_settings
    from services.universal_playwright_checker import check_instagram_account_universal
    from services.proxy_service import get_active_proxies
    from services.check_via_api import check_account_exists_via_api


def build_proxy_url_from_object(proxy: Proxy) -> str:
    """
    Build proxy URL from Proxy object.
    
    Args:
        proxy: Proxy object
        
    Returns:
        Proxy URL string
    """
    if proxy.username and proxy.password:
        try:
            settings = get_settings()
            encryptor = OptionalFernet(settings.encryption_key)
            password = encryptor.decrypt(proxy.password)
            return f"{proxy.scheme}://{proxy.username}:{password}@{proxy.host}"
        except:
            return f"{proxy.scheme}://{proxy.host}"
    else:
        return f"{proxy.scheme}://{proxy.host}"


def get_best_proxy(session: Session, user_id: int) -> Optional[str]:
    """
    Get best available proxy for user.
    
    Args:
        session: Database session
        user_id: User ID
        
    Returns:
        Proxy URL or None
    """
    proxies = get_active_proxies(session, user_id)
    
    if not proxies:
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ success rate
    best_proxy = None
    best_score = -1
    
    for proxy in proxies:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤ –∫—É–ª–¥–∞—É–Ω–µ
        if proxy.cooldown_until and proxy.cooldown_until > datetime.now():
            continue
        
        # –°—á–∏—Ç–∞–µ–º score
        success_rate = 0
        if proxy.used_count > 0:
            success_rate = proxy.success_count / proxy.used_count
        
        # Score = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10, –º–µ–Ω—å—à–µ –ª—É—á—à–µ) + success_rate (0-1)
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á—Ç–æ–±—ã 1 –±—ã–ª–æ –ª—É—á—à–µ 10
        score = (11 - proxy.priority) * 10 + success_rate * 100
        
        if score > best_score:
            best_score = score
            best_proxy = proxy
    
    if best_proxy:
        return build_proxy_url_from_object(best_proxy)
    
    # –ï—Å–ª–∏ –≤—Å–µ –≤ –∫—É–ª–¥–∞—É–Ω–µ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
    if proxies:
        return build_proxy_url_from_object(proxies[0])
    
    return None


async def check_account_main(
    username: str,
    session: Session,
    user_id: int,
    screenshot_path: Optional[str] = None
) -> Tuple[bool, str, Optional[str]]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
    –õ–æ–≥–∏–∫–∞: API –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ ‚Üí Proxy + —Å–∫—Ä–∏–Ω—à–æ—Ç.
    
    Args:
        username: Instagram username
        session: Database session
        user_id: User ID
        screenshot_path: Path for screenshot (auto-generated if None)
        
    Returns:
        Tuple of (success, message, screenshot_path)
    """
    print(f"\n[MAIN-CHECKER] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username}")
    
    # –®–ê–ì 1: API –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±—ã—Å—Ç—Ä–∞—è)
    print(f"[MAIN-CHECKER] üì° –®–∞–≥ 1: API –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    api_result = await check_account_exists_via_api(session, user_id, username)
    api_success = api_result.get("exists", False)
    api_error = api_result.get("error")
    api_message = "–Ω–∞–π–¥–µ–Ω" if api_success else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # Check for API key exhaustion
    if api_error == "all_api_keys_exhausted":
        print(f"[MAIN-CHECKER] ‚ùå –í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False, "–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.", None
    elif api_error == "no_api_keys_available":
        print(f"[MAIN-CHECKER] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π.", None
    
    if not api_success:
        print(f"[MAIN-CHECKER] ‚ùå API –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {api_message}")
        return False, f"API: {api_message}", None
    
    print(f"[MAIN-CHECKER] ‚úÖ API –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏
    proxy_url = get_best_proxy(session, user_id)
    
    if not proxy_url:
        print(f"[MAIN-CHECKER] ‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ API —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return True, f"API: {api_message}", None
    
    print(f"[MAIN-CHECKER] üåê –ù–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Å–∏: {proxy_url[:50]}...")
    
    # –®–ê–ì 3: Proxy + –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π –≤ desktop —Ñ–æ—Ä–º–∞—Ç–µ
    print(f"[MAIN-CHECKER] üì∏ –®–∞–≥ 2: Proxy –ø—Ä–æ–≤–µ—Ä–∫–∞ + –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞, desktop)...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not screenshot_path:
        screenshots_dir = "screenshots"
        os.makedirs(screenshots_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = os.path.join(screenshots_dir, f"{username}_{timestamp}.png")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
    try:
        from .ig_screenshot import check_account_with_header_screenshot
    except ImportError:
        from services.ig_screenshot import check_account_with_header_screenshot
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —á–µ–∫–µ—Ä —Å –æ–±—ã—á–Ω—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –≤ desktop —Ñ–æ—Ä–º–∞—Ç–µ
    proxy_result = await check_account_with_header_screenshot(
        username=username,
        proxy_url=proxy_url,
        screenshot_path=screenshot_path,
        headless=True,
        timeout_ms=60000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 60 —Å–µ–∫—É–Ω–¥
        dark_theme=True,  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω)
        mobile_emulation=False,  # Desktop —Ñ–æ—Ä–º–∞—Ç (–Ω–µ –º–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è)
        crop_ratio=0  # –ë–ï–ó –æ–±—Ä–µ–∑–∫–∏ - –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    )
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    proxy_success = proxy_result.get("exists", False)
    proxy_message = proxy_result.get("checked_via", "proxy_screenshot")
    screenshot = screenshot_path if os.path.exists(screenshot_path) else None
    profile_data = proxy_result  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
    try:
        from .proxy_service import update_proxy_stats
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        proxies = session.query(Proxy).filter(
            Proxy.user_id == user_id,
            Proxy.is_active == True
        ).all()
        
        for proxy in proxies:
            if build_proxy_url_from_object(proxy) == proxy_url:
                update_proxy_stats(session, proxy, proxy_success)
                print(f"[MAIN-CHECKER] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                break
                
    except Exception as e:
        print(f"[MAIN-CHECKER] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç: API —É—Å–ø–µ—à–Ω–æ + Proxy —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if proxy_success:
        print(f"[MAIN-CHECKER] ‚úÖ API + Proxy: —É—Å–ø–µ—à–Ω–æ")
        return True, f"API: {api_message} | Proxy: {proxy_message}", screenshot
    else:
        print(f"[MAIN-CHECKER] ‚ö†Ô∏è API —É—Å–ø–µ—à–Ω–æ, –Ω–æ Proxy –Ω–µ –ø—Ä–æ—à–µ–ª: {proxy_message}")
        # –ï—Å–ª–∏ API –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ Proxy –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª,
        # –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω)
        if screenshot and os.path.exists(screenshot):
            print(f"[MAIN-CHECKER] üì∏ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Proxy")
            return True, f"API: {api_message} | Proxy: {proxy_message}", screenshot
        else:
            print(f"[MAIN-CHECKER] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Proxy")
            return True, f"API: {api_message} | Proxy: {proxy_message}", None


async def check_account_on_add(
    username: str,
    session: Session,
    user_id: int
) -> Tuple[bool, str, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏ + —Å–∫—Ä–∏–Ω—à–æ—Ç.
    
    Args:
        username: Instagram username
        session: Database session
        user_id: User ID
        
    Returns:
        Tuple of (success, message, screenshot_path)
    """
    print(f"[MAIN-CHECKER] üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}")
    return await check_account_main(username, session, user_id)


async def check_account_auto(
    account: Account,
    session: Session
) -> Tuple[bool, str, Optional[str]]:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏ + —Å–∫—Ä–∏–Ω—à–æ—Ç.
    
    Args:
        account: Account object
        session: Database session
        
    Returns:
        Tuple of (success, message, screenshot_path)
    """
    print(f"[MAIN-CHECKER] üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.account}")
    return await check_account_main(
        username=account.account,
        session=session,
        user_id=account.user_id
    )


async def check_account_manual(
    username: str,
    session: Session,
    user_id: int
) -> Tuple[bool, str, Optional[str]]:
    """
    –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã").
    
    Args:
        username: Instagram username
        session: Database session
        user_id: User ID
        
    Returns:
        Tuple of (success, message, screenshot_path)
    """
    print(f"[MAIN-CHECKER] üëÜ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ @{username}")
    return await check_account_main(username, session, user_id)


async def check_account_with_header_dark_theme(
    username: str,
    session: Session,
    user_id: int,
    screenshot_path: Optional[str] = None
) -> Tuple[bool, str, Optional[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ proxy –ë–ï–ó IG —Å–µ—Å—Å–∏–∏.
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ header'–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω).
    
    Args:
        username: Instagram username
        session: Database session
        user_id: User ID
        screenshot_path: Path for screenshot (auto-generated if None)
        
    Returns:
        Tuple of (success, message, screenshot_path)
    """
    print(f"\n[MAIN-CHECKER] üåô –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —Å header-—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º (—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏
    proxy_url = get_best_proxy(session, user_id)
    
    if not proxy_url:
        print(f"[MAIN-CHECKER] ‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", None
    
    print(f"[MAIN-CHECKER] üåê –ù–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Å–∏: {proxy_url[:50]}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not screenshot_path:
        screenshots_dir = "screenshots"
        os.makedirs(screenshots_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = os.path.join(screenshots_dir, f"{username}_header_dark_{timestamp}.png")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        from .ig_screenshot import check_account_with_header_screenshot
    except ImportError:
        from services.ig_screenshot import check_account_with_header_screenshot
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ proxy —Å header-—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π
    result = await check_account_with_header_screenshot(
        username=username,
        proxy_url=proxy_url,
        screenshot_path=screenshot_path,
        headless=True,
        timeout_ms=30000,
        dark_theme=True,  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω)
        mobile_emulation=True,  # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (iPhone 12)
        crop_ratio=0  # –ë–ï–ó –æ–±—Ä–µ–∑–∫–∏ - —Å–∫—Ä–∏–Ω—à–æ—Ç header —ç–ª–µ–º–µ–Ω—Ç–∞
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
    try:
        from .proxy_service import update_proxy_stats
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        proxies = session.query(Proxy).filter(
            Proxy.user_id == user_id,
            Proxy.is_active == True
        ).all()
        
        for proxy in proxies:
            if build_proxy_url_from_object(proxy) == proxy_url:
                update_proxy_stats(session, proxy, result.get("exists", False))
                print(f"[MAIN-CHECKER] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                break
                
    except Exception as e:
        print(f"[MAIN-CHECKER] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏: {e}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    success = result.get("exists", False)
    screenshot = result.get("screenshot_path")
    error = result.get("error")
    
    if success:
        print(f"[MAIN-CHECKER] ‚úÖ –£—Å–ø–µ—à–Ω–æ (header-—Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π)")
        return True, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω (header-—Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π)", screenshot
    elif error:
        print(f"[MAIN-CHECKER] ‚ùå –û—à–∏–±–∫–∞: {error}")
        return False, f"–û—à–∏–±–∫–∞: {error}", None
    else:
        print(f"[MAIN-CHECKER] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
