"""Instagram profile screenshot via Playwright + proxy."""

import asyncio
from typing import Optional
from playwright.async_api import async_playwright, TimeoutError as PWTimeoutError


def _proxy_kwargs_from_url(proxy_url: str):
    """Convert proxy URL to Playwright proxy kwargs."""
    # proxy_url: scheme://[user:pass@]host:port
    # Playwright –æ–∂–∏–¥–∞–µ—Ç {"server": "scheme://host:port", "username": "...", "password": "..."}
    from urllib.parse import urlparse
    u = urlparse(proxy_url)
    auth = {}
    if u.username and u.password:
        auth["username"] = u.username
        auth["password"] = u.password
    return {"server": f"{u.scheme}://{u.hostname}:{u.port}", **auth}


async def _apply_dark_theme(page):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Instagram (–ª–µ–≥–∫–∞—è –≤–µ—Ä—Å–∏—è)."""
    # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.wait_for_load_state('networkidle')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    await page.wait_for_timeout(1000)
    
    # –õ–ï–ì–ö–ê–Ø —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ - —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω, –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    dark_theme_css = """
    /* –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    body, html {
        background-color: #000000 !important;
    }
    
    /* –ù–ï —Ç—Ä–æ–≥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
    body > div {
        background-color: transparent !important;
    }
    """
    
    await page.add_style_tag(content=dark_theme_css)
    
    # –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π - —Ç–æ–ª—å–∫–æ body –∏ html
    await page.evaluate("""
        () => {
            console.log('üåô –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–µ–≥–∫–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —Ñ–æ–Ω)...');
            
            // –¢–û–õ–¨–ö–û body –∏ html - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç!
            document.body.style.setProperty('background-color', '#000000', 'important');
            document.documentElement.style.setProperty('background-color', '#000000', 'important');
            
            console.log('‚úÖ –õ–µ–≥–∫–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (—Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã)');
        }
    """)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
    await page.wait_for_timeout(500)


async def screenshot_profile_header(
    username: str,
    proxy_url: str,
    wait_selector: str,
    fallback_selector: str,
    headless: bool = True,
    timeout_ms: int = 15000,
    save_path: Optional[str] = None,
    dark_theme: bool = True
) -> Optional[str]:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç https://www.instagram.com/<username>/ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏,
    –∂–¥—ë—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä 'wait_selector', –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω —ç–ª–µ–º–µ–Ω—Ç–∞.
    –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî –ø—Ä–æ–±—É–µ—Ç 'fallback_selector'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PNG –∏–ª–∏ None.
    
    Args:
        dark_theme: –ï—Å–ª–∏ True, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω, –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç)
    """
    url = f"https://www.instagram.com/{username.strip('@')}/"
    proxy_kwargs = _proxy_kwargs_from_url(proxy_url)
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=headless, args=[
            "--disable-blink-features=AutomationControlled",
            "--no-sandbox",
        ])
        context = await browser.new_context(
            viewport={"width": 1280, "height": 900},
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit Safari/537.36",
            proxy=proxy_kwargs
        )
        page = await context.new_page()
        try:
            await page.goto(url, wait_until="domcontentloaded", timeout=timeout_ms)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ü–µ–ª–∏—Ç—å—Å—è –≤ ¬´—à–∞–ø–∫—É¬ª –ø—Ä–æ—Ñ–∏–ª—è
            try:
                elem = page.locator(wait_selector).first
                await elem.wait_for(timeout=timeout_ms)
            except PWTimeoutError:
                elem = page.locator(fallback_selector).first
                await elem.wait_for(timeout=timeout_ms)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if dark_theme:
                await _apply_dark_theme(page)

            spath = save_path or f"/tmp/ig_{username}_header.png"
            await elem.screenshot(path=spath, type="png")
            return spath
        except Exception:
            return None
        finally:
            await context.close()
            await browser.close()


async def check_account_with_header_screenshot(
    username: str,
    proxy_url: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    timeout_ms: int = 30000,
    dark_theme: bool = True,
    mobile_emulation: bool = True,
    crop_ratio: float = 0.5  # 50% –≤–µ—Ä—Ö–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è header + –±–∏–æ)
) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Instagram –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ proxy –ë–ï–ó IG —Å–µ—Å—Å–∏–∏.
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ header'–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω).
    
    Args:
        username: Instagram username
        proxy_url: Proxy URL (scheme://[user:pass@]host:port)
        screenshot_path: Path to save screenshot
        headless: Run in headless mode
        timeout_ms: Timeout in milliseconds
        dark_theme: Apply dark theme (black background)
        mobile_emulation: Use mobile device emulation (iPhone 12)
        crop_ratio: Ratio for cropping to header (0.5 = 50% top, includes header+bio+buttons)
    
    Returns:
        dict with check results:
            - username: str
            - exists: bool | None
            - screenshot_path: str | None
            - error: str | None
            - checked_via: "proxy_header_screenshot"
            - dark_theme_applied: bool
    """
    import os
    from datetime import datetime
    
    print(f"\n[PROXY-HEADER-SCREENSHOT] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ proxy —Å header-—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º")
    print(f"[PROXY-HEADER-SCREENSHOT] üåê Proxy: {proxy_url[:50]}...")
    print(f"[PROXY-HEADER-SCREENSHOT] üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞: {dark_theme}")
    print(f"[PROXY-HEADER-SCREENSHOT] üì± –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è: {mobile_emulation}")
    print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è  –û–±—Ä–µ–∑–∫–∞: {crop_ratio*100:.0f}% –≤–µ—Ä—Ö–∞ (header + –±–∏–æ + –∫–Ω–æ–ø–∫–∏)")
    
    result = {
        "username": username,
        "exists": None,
        "screenshot_path": None,
        "error": None,
        "checked_via": "proxy_header_screenshot",
        "dark_theme_applied": False,
        "mobile_emulation": mobile_emulation
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not screenshot_path:
        screenshots_dir = "screenshots"
        os.makedirs(screenshots_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_path = os.path.join(screenshots_dir, f"{username}_header_{timestamp}.png")
    
    url = f"https://www.instagram.com/{username.strip('@')}/"
    proxy_kwargs = _proxy_kwargs_from_url(proxy_url)
    
    try:
        async with async_playwright() as p:
            # üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            launch_args = [
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-dev-shm-usage"
            ]
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞
            if dark_theme:
                launch_args.extend([
                    "--force-dark-mode",
                    "--enable-features=WebUIDarkMode"
                ])
            
            # üî• –ü–†–û–ö–°–ò –Ω–∞ —É—Ä–æ–≤–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Playwright)
            browser = await p.chromium.launch(
                headless=headless,
                args=launch_args,
                proxy=proxy_kwargs  # –ü—Ä–æ–∫—Å–∏ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –∑–¥–µ—Å—å
            )
            
            # üî• –ú–û–ë–ò–õ–¨–ù–ê–Ø –≠–ú–£–õ–Ø–¶–ò–Ø –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            if mobile_emulation:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º iPhone 12 –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                device = p.devices["iPhone 12"]
                context_options = {
                    **device
                    # proxy –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º - —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ browser.launch()
                }
                
                # üî• –¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê –Ω–∞ —É—Ä–æ–≤–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if dark_theme:
                    context_options["color_scheme"] = "dark"
                
                print(f"[PROXY-HEADER-SCREENSHOT] üì± –≠–º—É–ª—è—Ü–∏—è: iPhone 12")
            else:
                # –û–±—ã—á–Ω—ã–π desktop —Ä–µ–∂–∏–º
                context_options = {
                    "viewport": {"width": 1280, "height": 900},
                    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                    # proxy –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º - —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ browser.launch()
                }
                
                # üî• –¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê –¥–ª—è desktop
                if dark_theme:
                    context_options["color_scheme"] = "dark"
            
            context = await browser.new_context(**context_options)
            
            # üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê —á–µ—Ä–µ–∑ JavaScript injection
            if dark_theme:
                await context.add_init_script("""
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
                    localStorage.setItem('dark_mode', '1');
                    localStorage.setItem('ig_dark_mode', '1');
                    localStorage.setItem('theme', 'dark');
                    
                    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º matchMedia –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                    Object.defineProperty(window, 'matchMedia', {
                        writable: true,
                        value: (query) => ({
                            matches: query.includes('dark') ? true : false,
                            media: query,
                            addListener: () => {},
                            removeListener: () => {},
                            addEventListener: () => {},
                            removeEventListener: () => {},
                            dispatchEvent: () => true,
                        }),
                    });
                    
                    console.log('üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ localStorage –∏ matchMedia');
                """)
            
            # –°—Ç–µ–ª—Å-—Ä–µ–∂–∏–º
            await context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
            """)
            
            page = await context.new_page()
            
            # üî• –≠–ú–£–õ–Ø–¶–ò–Ø –¢–ï–ú–ù–û–ô –¢–ï–ú–´ —á–µ—Ä–µ–∑ media
            if dark_theme:
                await page.emulate_media(color_scheme='dark')
                print(f"[PROXY-HEADER-SCREENSHOT] üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ emulate_media")
            
            try:
                print(f"[PROXY-HEADER-SCREENSHOT] üì° –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
                response = await page.goto(url, wait_until="domcontentloaded", timeout=timeout_ms)
                status_code = response.status if response else None
                
                print(f"[PROXY-HEADER-SCREENSHOT] üìä HTTP Status: {status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
                if status_code == 404:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    result["exists"] = False
                    result["error"] = "404_not_found"
                    await browser.close()
                    return result
                
                elif status_code == 403:
                    print(f"[PROXY-HEADER-SCREENSHOT] üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)")
                    result["exists"] = None
                    result["error"] = "403_forbidden"
                    await browser.close()
                    return result
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                print(f"[PROXY-HEADER-SCREENSHOT] ‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                await page.wait_for_timeout(5000)  # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –ø–µ—Ä–µ–∫–∏–Ω—É–ª–æ –ª–∏ –Ω–∞ login
                current_url = page.url
                print(f"[PROXY-HEADER-SCREENSHOT] üîó –¢–µ–∫—É—â–∏–π URL: {current_url}")
                
                if "accounts/login" in current_url:
                    print(f"[PROXY-HEADER-SCREENSHOT] üîÑ –ü–µ—Ä–µ–∫–∏–Ω—É–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è...")
                    # –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                    await page.goto(url, wait_until="domcontentloaded", timeout=timeout_ms)
                    await page.wait_for_timeout(2000)
                    current_url = page.url
                    print(f"[PROXY-HEADER-SCREENSHOT] üîó –ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞: {current_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –°–ù–ê–ß–ê–õ–ê
                content = await page.content()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏ Instagram —Å—Ç—Ä–∞–Ω–∏—Ü—É "Open app" –∏–ª–∏ "Continue on web"
                if "Open app" in content or "open_app" in current_url.lower() or "Continue on web" in content:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è Instagram –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ desktop...")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
                    await browser.close()
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å DESKTOP —ç–º—É–ª—è—Ü–∏–µ–π
                    print(f"[PROXY-HEADER-SCREENSHOT] üñ•Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ DESKTOP —Ä–µ–∂–∏–º...")
                    
                    browser = await p.chromium.launch(
                        headless=headless,
                        args=launch_args,
                        proxy=proxy_kwargs
                    )
                    
                    # Desktop viewport
                    context_options = {
                        "viewport": {"width": 1920, "height": 1080},
                        "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                    }
                    if dark_theme:
                        context_options["color_scheme"] = "dark"
                    
                    context = await browser.new_context(**context_options)
                    
                    if dark_theme:
                        await context.add_init_script("""
                            localStorage.setItem('theme', 'dark');
                            localStorage.setItem('dark_mode', '1');
                        """)
                    
                    await context.add_init_script("""
                        Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                        Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                    """)
                    
                    page = await context.new_page()
                    
                    if dark_theme:
                        await page.emulate_media(color_scheme='dark')
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ cookies
                    print(f"[PROXY-HEADER-SCREENSHOT] üç™ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies...")
                    await context.add_cookies([
                        {
                            'name': 'ig_did',
                            'value': 'A1B2C3D4-E5F6-7890-ABCD-EF1234567890',
                            'domain': '.instagram.com',
                            'path': '/'
                        },
                        {
                            'name': 'ig_nrcb',
                            'value': '1',
                            'domain': '.instagram.com',
                            'path': '/'
                        }
                    ])
                    
                    print(f"[PROXY-HEADER-SCREENSHOT] üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (desktop)...")
                    response = await page.goto(url, wait_until="domcontentloaded", timeout=timeout_ms)
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
                    await page.wait_for_timeout(5000)
                    current_url = page.url
                    content = await page.content()
                    print(f"[PROXY-HEADER-SCREENSHOT] üîó URL: {current_url}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –±–∞–Ω–Ω–µ—Ä—ã
                print(f"[PROXY-HEADER-SCREENSHOT] üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –∏ –±–∞–Ω–Ω–µ—Ä—ã...")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
                try:
                    await page.keyboard.press("Escape")
                    await page.wait_for_timeout(500)
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚å®Ô∏è –ù–∞–∂–∞–ª–∏ ESC")
                except:
                    pass
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º cookies –±–∞–Ω–Ω–µ—Ä
                cookie_selectors = [
                    "button:has-text('Accept')",
                    "button:has-text('Allow')",
                    "button:has-text('I agree')",
                    "button:has-text('Agree')",
                    "button:has-text('OK')",
                    "[role='button']:has-text('Accept')",
                ]
                
                for selector in cookie_selectors:
                    try:
                        btn = page.locator(selector).first
                        if await btn.is_visible(timeout=1000):
                            await btn.click()
                            print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ –ü—Ä–∏–Ω—è–ª–∏ cookies: {selector}")
                            await page.wait_for_timeout(1000)
                            break
                    except:
                        continue
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                close_selectors = [
                    "svg[aria-label='Close']",
                    "button[aria-label='Close']",
                    "[aria-label='Close']",
                    "button:has-text('Not Now')",
                    "button:has-text('–ù–µ —Å–µ–π—á–∞—Å')",
                    "div[role='dialog'] svg",  # –ò–∫–æ–Ω–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ
                    "div[role='dialog'] button",  # –õ—é–±–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ
                ]
                
                # –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                for i in range(3):  # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                    closed = False
                    for selector in close_selectors:
                        try:
                            close_button = page.locator(selector).first
                            if await close_button.is_visible(timeout=1000):
                                await close_button.click()
                                print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ –ó–∞–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª–∫—É {i+1}: {selector}")
                                await page.wait_for_timeout(1000)
                                closed = True
                                break
                        except:
                            continue
                    
                    if not closed:
                        break  # –ë–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –∏ –≤–≤–µ—Ä—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                try:
                    await page.evaluate("window.scrollTo(0, 300)")
                    await page.wait_for_timeout(1000)
                    await page.evaluate("window.scrollTo(0, 0)")
                    await page.wait_for_timeout(1000)
                    print(f"[PROXY-HEADER-SCREENSHOT] üìú –ü—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                except:
                    pass
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫
                print(f"[PROXY-HEADER-SCREENSHOT] ‚è≥ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                await page.wait_for_timeout(2000)  # 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —á–µ—Ä–µ–∑ JavaScript - –ê–ì–†–ï–°–°–ò–í–ù–û
                print(f"[PROXY-HEADER-SCREENSHOT] üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)...")
                removed_count = await page.evaluate("""
                    () => {
                        let count = 0;
                        
                        // –£–¥–∞–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                        for (let iteration = 0; iteration < 3; iteration++) {
                            
                            // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ (role="dialog")
                            document.querySelectorAll('[role="dialog"]').forEach(el => {
                                el.remove();
                                count++;
                            });
                            
                            // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ overlay/backdrop/modal —ç–ª–µ–º–µ–Ω—Ç—ã
                            document.querySelectorAll('[class*="overlay"], [class*="Overlay"], [class*="backdrop"], [class*="Backdrop"], [class*="modal"], [class*="Modal"]').forEach(el => {
                                el.remove();
                                count++;
                            });
                            
                            // 3. –£–¥–∞–ª—è–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–ª—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
                            document.querySelectorAll('[class*="skeleton"], [class*="Skeleton"], [class*="placeholder"], [class*="Placeholder"]').forEach(el => {
                                el.remove();
                                count++;
                            });
                            
                            // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ SVG –∫—Ä–µ—Å—Ç–∏–∫–∏ (–∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è)
                            document.querySelectorAll('svg[aria-label*="Close"], svg[aria-label*="close"], button[aria-label*="Close"]').forEach(el => {
                                const parent = el.closest('div');
                                if (parent && window.getComputedStyle(parent).position === 'fixed') {
                                    parent.remove();
                                    count++;
                                } else {
                                    el.remove();
                                    count++;
                                }
                            });
                            
                            // 5. –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏ –≤—ã—Å–æ–∫–∏–º z-index
                            document.querySelectorAll('div').forEach(el => {
                                const style = window.getComputedStyle(el);
                                
                                // –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏ z-index > 100
                                if (style.position === 'fixed' && parseInt(style.zIndex) > 100) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ª–∏ —ç—Ç–æ
                                    if (!el.querySelector('nav') && !el.closest('nav') && !el.querySelector('header')) {
                                        el.remove();
                                        count++;
                                    }
                                }
                                
                                // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ –∏–º–µ—é—Ç opacity < 1 –∏ position fixed
                                if (style.position === 'fixed' && parseFloat(style.opacity) < 1 && parseFloat(style.opacity) > 0) {
                                    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω - —ç—Ç–æ overlay
                                    const rect = el.getBoundingClientRect();
                                    if (rect.width > window.innerWidth * 0.8 && rect.height > window.innerHeight * 0.8) {
                                        el.remove();
                                        count++;
                                    }
                                }
                            });
                            
                            // 6. –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —á–µ—Ä–Ω—ã–º/—Å–µ—Ä—ã–º —Ñ–æ–Ω–æ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ)
                            document.querySelectorAll('div').forEach(el => {
                                const style = window.getComputedStyle(el);
                                const bgColor = style.backgroundColor;
                                const rect = el.getBoundingClientRect();
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π/—Å–µ—Ä—ã–π —Ñ–æ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
                                if ((bgColor.includes('rgba(0, 0, 0') || bgColor.includes('rgba(38, 38, 38')) && 
                                    rect.width > window.innerWidth * 0.5 && 
                                    rect.height > window.innerHeight * 0.5 &&
                                    style.position === 'fixed') {
                                    el.remove();
                                    count++;
                                }
                            });
                        }
                        
                        // –£–±–∏—Ä–∞–µ–º overflow: hidden —Å body (–º–æ–¥–∞–ª–∫–∏ —á–∞—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É)
                        document.body.style.overflow = 'auto';
                        document.documentElement.style.overflow = 'auto';
                        
                        return count;
                    }
                """)
                print(f"[PROXY-HEADER-SCREENSHOT] üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {removed_count}")
                
                # –ñ–¥–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
                await page.wait_for_timeout(1500)
                
                if "Sorry, this page isn't available" in content:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    result["exists"] = False
                    result["error"] = "page_not_found"
                    await browser.close()
                    return result
                
                # –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                print(f"[PROXY-HEADER-SCREENSHOT] ‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏)...")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_loaded = False
                for attempt in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                        has_stats = await page.evaluate("""
                            () => {
                                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–æ–±—ã—á–Ω–æ —ç—Ç–æ span –∏–ª–∏ div —Å —á–∏—Å–ª–∞–º–∏)
                                const statsElements = Array.from(document.querySelectorAll('span, div'));
                                const hasNumbers = statsElements.some(el => {
                                    const text = el.textContent.trim();
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–∞ —Ç–∏–ø–∞ "123", "1.2M", "695M" –∏ —Ç.–¥.
                                    return /^\d+(\.\d+)?[KMB]?$/.test(text.replace(/,/g, ''));
                                });
                                
                                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ "posts", "followers", "following"
                                const bodyText = document.body.innerText.toLowerCase();
                                const hasLabels = bodyText.includes('posts') || 
                                                 bodyText.includes('followers') || 
                                                 bodyText.includes('following') ||
                                                 bodyText.includes('–ø—É–±–ª–∏–∫–∞—Ü–∏–π') ||
                                                 bodyText.includes('–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
                                
                                return hasNumbers && hasLabels;
                            }
                        """)
                        
                        if has_stats:
                            stats_loaded = True
                            print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                            break
                        else:
                            await page.wait_for_timeout(1000)
                    except Exception as e:
                        await page.wait_for_timeout(1000)
                        continue
                
                if not stats_loaded:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                await page.wait_for_timeout(2000)
                
                # –ò—â–µ–º header –ø—Ä–æ—Ñ–∏–ª—è
                print(f"[PROXY-HEADER-SCREENSHOT] üîç –ò—â–µ–º header –ø—Ä–æ—Ñ–∏–ª—è...")
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è header'–∞ –ø—Ä–æ—Ñ–∏–ª—è
                header_selectors = [
                    'header',
                    'header section',
                    'div[role="main"] header',
                    'main header'
                ]
                
                header_elem = None
                for selector in header_selectors:
                    try:
                        locator = page.locator(selector).first
                        await locator.wait_for(state="visible", timeout=5000)
                        header_elem = locator
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ Header –Ω–∞–π–¥–µ–Ω: {selector}")
                        break
                    except:
                        continue
                
                if not header_elem:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è Header –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å viewport")
                    # –ï—Å–ª–∏ header –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å viewport
                    header_elem = None
                
                # –î–∞–µ–º –≤—Ä–µ–º—è Instagram –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ç–µ–º–Ω—É—é —Ç–µ–º—É
                if dark_theme:
                    print(f"[PROXY-HEADER-SCREENSHOT] üåô –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã Instagram...")
                    await page.wait_for_timeout(5000)  # 5 —Å–µ–∫—É–Ω–¥ - –¥–∞–µ–º –≤—Ä–µ–º—è Instagram –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
                    dark_theme_verified = await page.evaluate("""
                        () => {
                            const body = document.body;
                            const computedStyle = window.getComputedStyle(body);
                            const bgColor = computedStyle.backgroundColor;
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ–Ω —Ç–µ–º–Ω—ã–π
                            const isDark = bgColor.includes('0, 0, 0') || bgColor.includes('#000') || bgColor.includes('rgb(0, 0, 0)');
                            return isDark;
                        }
                    """)
                    
                    result["dark_theme_applied"] = dark_theme_verified
                    
                    if dark_theme_verified:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ Instagram –∞–∫—Ç–∏–≤–Ω–∞")
                    else:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚ÑπÔ∏è  Instagram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É")
                else:
                    result["dark_theme_applied"] = False
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç header'–∞ –∏–ª–∏ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if header_elem and crop_ratio == 0:
                    # –ï—Å–ª–∏ crop_ratio=0 –ò header –Ω–∞–π–¥–µ–Ω - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ header'–∞ (–±–µ–∑ –æ–±—Ä–µ–∑–∫–∏)
                    print(f"[PROXY-HEADER-SCREENSHOT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç–æ–ª—å–∫–æ header'–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
                    await header_elem.screenshot(path=screenshot_path, type="png")
                elif crop_ratio > 0:
                    print(f"[PROXY-HEADER-SCREENSHOT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ header'–∞ (—Å –æ–±—Ä–µ–∑–∫–æ–π)...")
                    
                    if header_elem:
                        # –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ header'–∞
                        await header_elem.screenshot(path=screenshot_path, type="png")
                    else:
                        # –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ viewport
                        await page.screenshot(path=screenshot_path, full_page=False)
                else:
                    # –ü–û–õ–ù–´–ô —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ header –Ω–µ –Ω–∞–π–¥–µ–Ω)
                    print(f"[PROXY-HEADER-SCREENSHOT] üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –ü–û–õ–ù–û–ì–û —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (full_page=True)...")
                    await page.screenshot(path=screenshot_path, full_page=True)
                
                # –û–±—Ä–µ–∑–∫–∞ –ø–æ –±–æ–∫–∞–º –Ω–∞ 15% —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                if os.path.exists(screenshot_path):
                    try:
                        from PIL import Image
                        
                        img = Image.open(screenshot_path)
                        width, height = img.size
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (—É–±–∏—Ä–∞–µ–º 15% —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
                        crop_left = int(width * 0.15)
                        crop_right = int(width * 0.85)
                        
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ 15px —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É
                        crop_top = max(0, -15)  # -15px —Å–≤–µ—Ä—Ö—É (—Ä–∞—Å—à–∏—Ä—è–µ–º –≤–≤–µ—Ä—Ö)
                        crop_bottom = min(height, height + 15)  # +15px —Å–Ω–∏–∑—É (—Ä–∞—Å—à–∏—Ä—è–µ–º –≤–Ω–∏–∑)
                        
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –ø–æ –±–æ–∫–∞–º: {width}px -> {crop_right - crop_left}px (—É–±–∏—Ä–∞–µ–º 15% —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)")
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã: {height}px -> {crop_bottom - crop_top}px (+15px —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É)")
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –±–æ–∫–∞–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
                        cropped = img.crop((crop_left, crop_top, crop_right, crop_bottom))
                        cropped.save(screenshot_path, quality=95)
                        
                        new_width = crop_right - crop_left
                        new_height = crop_bottom - crop_top
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–µ–∑–∞–Ω: {width}x{height} -> {new_width}x{new_height}")
                        
                        result["cropped_sides"] = True
                        result["original_width"] = width
                        result["final_width"] = new_width
                        
                    except ImportError:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏")
                        result["cropped_sides"] = False
                    except Exception as crop_error:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ –ø–æ –±–æ–∫–∞–º: {crop_error}")
                        result["cropped_sides"] = False
                
                # –û–ë–†–ï–ó–ö–ê: –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
                if os.path.exists(screenshot_path) and crop_ratio > 0:
                    try:
                        from PIL import Image
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        img = Image.open(screenshot_path)
                        width, height = img.size
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤–µ—Ä—Ö–∞ (—Ç–æ–ª—å–∫–æ header)
                        new_height = int(height * crop_ratio)
                        
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –¥–æ header'–∞: {crop_ratio*100:.0f}% –≤–µ—Ä—Ö–∞ ({height}px -> {new_height}px)")
                        
                        # –û–±—Ä–µ–∑–∞–µ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ header)
                        cropped = img.crop((0, 0, width, new_height))
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        cropped.save(screenshot_path, quality=95)
                        
                        size = os.path.getsize(screenshot_path) / 1024
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚úÇÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±—Ä–µ–∑–∞–Ω: {width}x{height} ‚Üí {width}x{new_height}")
                        print(f"[PROXY-HEADER-SCREENSHOT] üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {size:.1f} KB")
                        
                        result["cropped"] = True
                        result["original_size"] = f"{width}x{height}"
                        result["final_size"] = f"{width}x{new_height}"
                        
                    except ImportError:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏")
                        result["cropped"] = False
                    except Exception as crop_error:
                        print(f"[PROXY-HEADER-SCREENSHOT] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏: {crop_error}")
                        result["cropped"] = False
                
                if os.path.exists(screenshot_path):
                    size = os.path.getsize(screenshot_path) / 1024
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç header'–∞ —Å–æ–∑–¥–∞–Ω: {size:.1f} KB")
                    result["screenshot_path"] = screenshot_path
                    result["exists"] = True
                else:
                    print(f"[PROXY-HEADER-SCREENSHOT] ‚ùå –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    result["error"] = "screenshot_failed"
                
                await browser.close()
                
            except PWTimeoutError as e:
                print(f"[PROXY-HEADER-SCREENSHOT] ‚è±Ô∏è Timeout: {e}")
                result["error"] = f"timeout: {e}"
                await browser.close()
                
            except Exception as e:
                print(f"[PROXY-HEADER-SCREENSHOT] ‚ùå –û—à–∏–±–∫–∞: {e}")
                result["error"] = str(e)
                await browser.close()
    
    except Exception as e:
        print(f"[PROXY-HEADER-SCREENSHOT] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        result["error"] = str(e)
    
    return result