"""
üé≠ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Instagram —á–µ—Ä–µ–∑ Playwright
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
"""

import asyncio
import random
import os
from typing import Optional, Dict, Any, List
from datetime import datetime


class InstagramPlaywrightAdvanced:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Instagram checker —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ User-Agents
        self.user_agents = [
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Mobile Safari/537.36"
        ]
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (—Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ Playwright)
        self.mobile_devices = [
            "iPhone 12",
            "iPhone 13",
            "Pixel 5",
            "iPhone 13 Pro"
        ]
        
        # Viewports
        self.viewports = [
            {"width": 390, "height": 844},  # iPhone 12/13
            {"width": 393, "height": 851},  # Pixel 7
            {"width": 360, "height": 800},  # Galaxy S21
            {"width": 412, "height": 915},  # Pixel 7 Pro
        ]
    
    async def initialize(self, proxy: Optional[str] = None, headless: bool = True, device: Optional[str] = None):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print("[PLAYWRIGHT-ADV] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ Playwright...")
        
        try:
            from playwright.async_api import async_playwright
        except ImportError:
            print("[PLAYWRIGHT-ADV] ‚ùå Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
        
        self.playwright = await async_playwright().start()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        launch_options = {
            "headless": headless,
            "args": [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled",
                "--disable-features=VizDisplayCompositor",
                "--disable-notifications",
                "--disable-popup-blocking"
            ]
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        if proxy:
            proxy_config = self._parse_proxy(proxy)
            if proxy_config:
                launch_options["proxy"] = proxy_config
                print(f"[PLAYWRIGHT-ADV] üîó –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {proxy_config['server']}")
        
        self.browser = await self.playwright.chromium.launch(**launch_options)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if not device:
            device = random.choice(self.mobile_devices)
        
        print(f"[PLAYWRIGHT-ADV] üì± –≠–º—É–ª—è—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device}")
        
        device_config = self.playwright.devices[device]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.context = await self.browser.new_context(
            **device_config,
            locale='ru-RU',
            timezone_id='Europe/Moscow',
            permissions=[],  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ permissions
            color_scheme='light',
            reduced_motion='reduce'
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        await self.context.set_extra_http_headers({
            "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Encoding": "gzip, deflate, br",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
        })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page = await self.context.new_page()
        
        # –°—Ç–µ–ª—Å-—Ä–µ–∂–∏–º
        await self._enable_stealth_mode()
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        await self._setup_resource_blocking()
        
        print("[PLAYWRIGHT-ADV] ‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    
    def _parse_proxy(self, proxy: str) -> Optional[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ URL"""
        try:
            proxy_clean = proxy.replace('http://', '').replace('https://', '')
            
            if '@' in proxy_clean:
                auth_part, server_part = proxy_clean.split('@', 1)
                username, password = auth_part.split(':', 1)
                
                if ':' in server_part:
                    host, port = server_part.split(':', 1)
                else:
                    host = server_part
                    port = '80'
                
                return {
                    "server": f"http://{host}:{port}",
                    "username": username,
                    "password": password
                }
            else:
                if ':' in proxy_clean:
                    host, port = proxy_clean.split(':', 1)
                else:
                    host = proxy_clean
                    port = '80'
                
                return {"server": f"http://{host}:{port}"}
        
        except Exception as e:
            print(f"[PLAYWRIGHT-ADV] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    async def _enable_stealth_mode(self):
        """üõ°Ô∏è –í–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        print("[PLAYWRIGHT-ADV] üõ°Ô∏è –í–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–∞...")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ WebDriver –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        await self.page.add_init_script("""
            () => {
                // –£–¥–∞–ª–µ–Ω–∏–µ webdriver —Å–≤–æ–π—Å—Ç–≤–∞
                delete Object.getPrototypeOf(navigator).webdriver;
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });
                
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ permissions
                const originalQuery = window.navigator.permissions.query;
                window.navigator.permissions.query = (parameters) => (
                    parameters.name === 'notifications' ?
                        Promise.resolve({ state: Notification.permission }) :
                        originalQuery(parameters)
                );
                
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ languages
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en', 'ru'],
                });
                
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ chrome
                window.chrome = {
                    runtime: {}
                };
            }
        """)
        
        # –≠–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç)
        await self.page.add_init_script("""
            () => {
                // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ WebGL
                const getParameter = WebGLRenderingContext.prototype.getParameter;
                WebGLRenderingContext.prototype.getParameter = function(parameter) {
                    if (parameter === 37445) {
                        return 'Intel Inc.';
                    }
                    if (parameter === 37446) {
                        return 'Intel Iris OpenGL Engine';
                    }
                    return getParameter.call(this, parameter);
                };
            }
        """)
        
        print("[PLAYWRIGHT-ADV] ‚úÖ –°—Ç–µ–ª—Å-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    async def _setup_resource_blocking(self):
        """‚ö° –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
        
        async def handle_route(route):
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
            blocked_types = ['image', 'font', 'media']
            
            if route.request.resource_type in blocked_types:
                await route.abort()
            else:
                await route.continue_()
        
        await self.page.route("**/*", handle_route)
        print("[PLAYWRIGHT-ADV] ‚ö° –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    async def human_like_behavior(self, duration: int = 5):
        """üé≠ –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        print(f"[PLAYWRIGHT-ADV] üé≠ –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è ({duration}—Å)...")
        
        actions = [
            "scroll_down",
            "scroll_up",
            "move_mouse",
            "wait"
        ]
        
        for _ in range(random.randint(3, 7)):
            action = random.choice(actions)
            
            if action == "scroll_down":
                await self.page.mouse.wheel(0, random.randint(100, 500))
            elif action == "scroll_up":
                await self.page.mouse.wheel(0, random.randint(-500, -100))
            elif action == "move_mouse":
                x = random.randint(100, 400)
                y = random.randint(100, 400)
                await self.page.mouse.move(x, y)
            elif action == "wait":
                await asyncio.sleep(random.uniform(0.5, 1.5))
            
            await asyncio.sleep(random.uniform(0.3, 1.0))
    
    async def close_instagram_modals(self):
        """üéØ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω Instagram"""
        print("[PLAYWRIGHT-ADV] üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω...")
        
        # –ú–µ—Ç–æ–¥ 1: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º
        modal_selectors = [
            "button[aria-label='Close']",
            "svg[aria-label='Close']",
            "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
            "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']"
        ]
        
        for selector in modal_selectors:
            try:
                close_button = self.page.locator(selector).first
                if await close_button.count() > 0 and await close_button.is_visible():
                    await close_button.click()
                    print(f"[PLAYWRIGHT-ADV] ‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∞: {selector}")
                    await asyncio.sleep(1)
            except Exception:
                pass
        
        # –ú–µ—Ç–æ–¥ 2: JavaScript —É–¥–∞–ª–µ–Ω–∏–µ
        try:
            await self.page.evaluate("""
                () => {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
                    const dialogs = document.querySelectorAll('[role="dialog"]');
                    dialogs.forEach(d => d.remove());
                    
                    // –£–¥–∞–ª—è–µ–º overlay
                    const overlays = document.querySelectorAll('[class*="x7r02ix"], [class*="overlay"], [class*="backdrop"]');
                    overlays.forEach(o => o.remove());
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º body
                    document.body.style.overflow = 'auto';
                    document.body.style.position = 'static';
                    document.body.style.background = 'transparent';
                    document.documentElement.style.overflow = 'auto';
                }
            """)
            print("[PLAYWRIGHT-ADV] ‚úÖ JavaScript —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"[PLAYWRIGHT-ADV] ‚ö†Ô∏è JavaScript –æ—à–∏–±–∫–∞: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: Escape
        try:
            await self.page.keyboard.press('Escape')
            await self.page.keyboard.press('Escape')
            print("[PLAYWRIGHT-ADV] ‚å®Ô∏è Escape –Ω–∞–∂–∞—Ç")
        except Exception:
            pass
        
        await asyncio.sleep(2)
    
    async def check_profile(self, username: str, screenshot_path: Optional[str] = None) -> Dict[str, Any]:
        """üìä –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è Instagram"""
        print(f"[PLAYWRIGHT-ADV] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: @{username}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            url = f"https://www.instagram.com/{username}/"
            print(f"[PLAYWRIGHT-ADV] üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            
            response = await self.page.goto(url, wait_until="networkidle", timeout=45000)
            status_code = response.status
            
            print(f"[PLAYWRIGHT-ADV] üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {status_code}")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(random.uniform(3, 5))
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            await self.human_like_behavior(random.randint(3, 5))
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            await self.close_instagram_modals()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            await asyncio.sleep(2)
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_url = self.page.url
            page_content = await self.page.content()
            page_title = await self.page.title()
            
            print(f"[PLAYWRIGHT-ADV] üìã –ê–Ω–∞–ª–∏–∑:")
            print(f"[PLAYWRIGHT-ADV]   üîó URL: {current_url}")
            print(f"[PLAYWRIGHT-ADV]   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
            print(f"[PLAYWRIGHT-ADV]   üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page_content)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            checks = {
                "login_redirect": "accounts/login" in current_url,
                "profile_found": username.lower() in page_content.lower(),
                "error_404": any(msg in page_content.lower() for msg in [
                    "not found", "404", "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "sorry, this page"
                ]),
                "private_profile": any(msg in page_content.lower() for msg in [
                    "private", "–∑–∞–∫—Ä—ã—Ç—ã–π", "this account is private"
                ]),
                "instagram_title": "instagram" in page_title.lower()
            }
            
            print(f"[PLAYWRIGHT-ADV] üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            exists = None
            reason = "undetermined"
            is_private = None
            
            if status_code == 404 or checks["error_404"]:
                exists = False
                reason = "page_not_found"
            elif checks["login_redirect"]:
                exists = True
                reason = "login_redirect"
            elif checks["private_profile"]:
                exists = True
                is_private = True
                reason = "private_profile"
            elif checks["profile_found"]:
                exists = True
                is_private = False
                reason = "profile_content"
            
            print(f"[PLAYWRIGHT-ADV] üìä –ò—Ç–æ–≥: exists={exists}, private={is_private}, reason={reason}")
            
            # –°–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_created = False
            if screenshot_path:
                try:
                    await self.page.screenshot(path=screenshot_path, full_page=False)
                    if os.path.exists(screenshot_path):
                        file_size = os.path.getsize(screenshot_path)
                        print(f"[PLAYWRIGHT-ADV] üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path} ({file_size} –±–∞–π—Ç)")
                        screenshot_created = True
                except Exception as e:
                    print(f"[PLAYWRIGHT-ADV] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            
            return {
                "exists": exists,
                "is_private": is_private,
                "reason": reason,
                "status_code": status_code,
                "screenshot_path": screenshot_path if screenshot_created else None,
                "screenshot_created": screenshot_created,
                "checked_via": "playwright_advanced"
            }
        
        except Exception as e:
            print(f"[PLAYWRIGHT-ADV] ‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "exists": None,
                "is_private": None,
                "reason": f"error: {str(e)}",
                "status_code": None,
                "screenshot_path": None,
                "screenshot_created": False,
                "checked_via": "playwright_advanced"
            }
    
    async def close(self):
        """üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("[PLAYWRIGHT-ADV] üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()
        
        print("[PLAYWRIGHT-ADV] ‚úÖ –†–µ—Å—É—Ä—Å—ã –∑–∞–∫—Ä—ã—Ç—ã")


async def check_account_with_playwright_advanced(
    username: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    max_retries: int = 2,
    proxy: Optional[str] = None
) -> Dict[str, Any]:
    """
    üé≠ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Instagram —á–µ—Ä–µ–∑ Playwright
    
    Args:
        username: Instagram username
        screenshot_path: Path for screenshot
        headless: Run in headless mode
        max_retries: Maximum retry attempts
        proxy: Proxy URL (http://user:pass@host:port)
        
    Returns:
        Dict with check results
    """
    print(f"[PLAYWRIGHT-ADV-CHECK] üé≠ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è @{username}")
    
    checker = InstagramPlaywrightAdvanced()
    
    for attempt in range(max_retries):
        print(f"[PLAYWRIGHT-ADV-CHECK] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            success = await checker.initialize(proxy=proxy, headless=headless)
            if not success:
                print("[PLAYWRIGHT-ADV-CHECK] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            result = await checker.check_profile(username, screenshot_path)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ
            await checker.close()
            
            if result.get("exists") is not None:
                print(f"[PLAYWRIGHT-ADV-CHECK] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return {
                    "username": username,
                    "exists": result["exists"],
                    "is_private": result.get("is_private"),
                    "full_name": None,
                    "followers": None,
                    "following": None,
                    "posts": None,
                    "screenshot_path": result.get("screenshot_path"),
                    "error": None if result["exists"] is not None else result.get("reason"),
                    "checked_via": "playwright_advanced",
                    "proxy_used": bool(proxy),
                    "status_code": result.get("status_code"),
                    "screenshot_created": result.get("screenshot_created", False)
                }
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            if attempt < max_retries - 1:
                delay = random.uniform(3, 7)
                print(f"[PLAYWRIGHT-ADV-CHECK] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å...")
                await asyncio.sleep(delay)
        
        except Exception as e:
            print(f"[PLAYWRIGHT-ADV-CHECK] ‚ùå –û—à–∏–±–∫–∞: {e}")
            await checker.close()
            
            if attempt < max_retries - 1:
                delay = random.uniform(3, 7)
                await asyncio.sleep(delay)
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    print(f"[PLAYWRIGHT-ADV-CHECK] ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "screenshot_path": None,
        "error": "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å",
        "checked_via": "playwright_advanced",
        "proxy_used": bool(proxy),
        "screenshot_created": False
    }

