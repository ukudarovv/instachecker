"""–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ Instagram —Å –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º."""

import time
import random
import json
import os
from typing import Optional, Dict, Any
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
import undetected_chromedriver as uc


class InstagramMobileBypass:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Instagram —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
    
    def __init__(self):
        self.driver = None
        self.wait = None
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.desktop_device = {
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "width": 1920,
            "height": 1080,
            "pixelRatio": 1.0
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.mobile_devices = {
            "iphone_12": {
                "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
                "width": 390,
                "height": 844,
                "pixelRatio": 3.0
            },
            "samsung_galaxy_s21": {
                "userAgent": "Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
                "width": 360,
                "height": 800,
                "pixelRatio": 3.0
            },
            "iphone_x": {
                "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
                "width": 375,
                "height": 812,
                "pixelRatio": 3.0
            },
            "pixel_7": {
                "userAgent": "Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
                "width": 393,
                "height": 851,
                "pixelRatio": 2.75
            }
        }
    
    def get_desktop_device(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            print(f"[DEVICE] üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            return self.desktop_device
        except Exception as e:
            print(f"[DEVICE] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            # Fallback –Ω–∞ –±–∞–∑–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            return {
                "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "width": 1920,
                "height": 1080,
                "pixelRatio": 1.0
            }
    
    def validate_proxy_format(self, proxy: str) -> dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ERR_UNSUPPORTED_PROXIES"""
        print(f"[PROXY] üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {proxy}")
        
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            proxy = proxy.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–æ–∫—Å–∏
            if proxy.startswith('http://'):
                return {"type": "http", "url": proxy, "valid": True}
            elif proxy.startswith('https://'):
                return {"type": "https", "url": proxy, "valid": True}
            elif proxy.startswith('socks5://'):
                return {"type": "socks5", "url": proxy, "valid": True}
            elif ':' in proxy and not proxy.startswith(('http', 'socks5')):
                # –§–æ—Ä–º–∞—Ç ip:port –∏–ª–∏ user:pass@ip:port
                if '@' in proxy:
                    # user:pass@ip:port
                    auth_part, server_part = proxy.split('@', 1)
                    if ':' in auth_part:
                        username, password = auth_part.split(':', 1)
                        return {
                            "type": "http", 
                            "url": f"http://{proxy}",
                            "auth": {"username": username, "password": password},
                            "valid": True
                        }
                else:
                    # ip:port
                    return {"type": "http", "url": f"http://{proxy}", "valid": True}
            
            return {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏"}
            
        except Exception as e:
            return {"valid": False, "error": str(e)}

    def create_mobile_driver_fixed(self, headless: bool = True, proxy: Optional[str] = None) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = self.get_desktop_device()
        device_name = "desktop_windows"
        
        print(f"[DRIVER] üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {device_name}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º undetected_chromedriver –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ERR_UNSUPPORTED_PROXIES
            options = uc.ChromeOptions()
            
            # Desktop –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏)
            options.add_argument(f"--user-agent={device['userAgent']}")
            options.add_argument(f"--window-size={device['width']},{device['height']}")
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-ipc-flooding-protection')
            
            # –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            options.add_experimental_option('useAutomationExtension', False)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--disable-web-security')
            options.add_argument('--allow-running-insecure-content')
            options.add_argument('--disable-notifications')
            options.add_argument('--disable-popup-blocking')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-software-rasterizer')
            
            # Headless —Ä–µ–∂–∏–º (–ª—É—á—à–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã)
            if headless:
                options.add_argument('--headless=new')  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç headless
            else:
                # –í –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
                options.add_argument(f'--window-size={device["width"]},{device["height"]}')
            
            # –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ö–°–ò - –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢
            if proxy:
                proxy_info = self.validate_proxy_format(proxy)
                
                if proxy_info["valid"]:
                    print(f"[PROXY] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_info['url']}")
                    
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç
                    options.add_argument(f'--proxy-server={proxy_info["url"]}')
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                    options.add_argument('--ignore-certificate-errors')
                    options.add_argument('--ignore-ssl-errors')
                    options.add_argument('--disable-web-security')
                    options.add_argument('--allow-running-insecure-content')
                    
                    # –î–ª—è –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                    if 'auth' in proxy_info:
                        auth = proxy_info['auth']
                        print(f"[PROXY] üîê –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {auth['username']}:***")
                else:
                    print(f"[PROXY] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_info['error']}")
                    print("[PROXY] üö´ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            else:
                print("[PROXY] ‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è undetected_chromedriver
            print("[DRIVER] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è undetected_chromedriver...")
            
            self.driver = uc.Chrome(
                options=options,
                headless=headless,
                use_subprocess=False,  # –í–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                version_main=None      # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ Chrome
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(15)
            
            print("[DRIVER] ‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            print(f"[DRIVER] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            if proxy:
                print("[DRIVER] üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                return self.create_mobile_driver_fixed(headless, None)
            
            return False

    def create_firefox_driver(self, headless: bool = True, proxy: Optional[str] = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = self.get_desktop_device()
        device_name = "desktop_windows"
        
        # Firefox –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π User-Agent
        device["userAgent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0"
        
        print(f"[FIREFOX] üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {device_name}")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox
            options = FirefoxOptions()
            
            # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ User-Agent
            mobile_user_agent = device["userAgent"]
            options.set_preference("general.useragent.override", mobile_user_agent)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.set_preference("dom.webdriver.enabled", False)
            options.set_preference("useAutomationExtension", False)
            options.set_preference("dom.webnotifications.enabled", False)
            options.set_preference("media.volume_scale", "0.0")
            options.set_preference("dom.push.enabled", False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
            if proxy:
                proxy_info = self.validate_proxy_format(proxy)
                
                if proxy_info["valid"]:
                    print(f"[FIREFOX] üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_info['url']}")
                    
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    proxy_url = proxy_info["url"]
                    
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
                    if "://" in proxy_url:
                        proxy_url = proxy_url.split("://")[1]
                    
                    # –ü–∞—Ä—Å–∏–º host:port (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º username:password)
                    if '@' in proxy_url:
                        # –§–æ—Ä–º–∞—Ç: username:password@host:port
                        auth_part, server_part = proxy_url.split('@', 1)
                        proxy_host, proxy_port = server_part.split(':', 1)
                    elif ':' in proxy_url:
                        # –§–æ—Ä–º–∞—Ç: host:port
                        proxy_host, proxy_port = proxy_url.split(':', 1)
                    else:
                        print(f"[FIREFOX] ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy}")
                        proxy_host = None
                        proxy_port = None
                    
                    if proxy_host and proxy_port:
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤ Firefox
                        options.set_preference("network.proxy.type", 1)  # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
                        options.set_preference("network.proxy.http", proxy_host)
                        options.set_preference("network.proxy.http_port", int(proxy_port))
                        options.set_preference("network.proxy.ssl", proxy_host)
                        options.set_preference("network.proxy.ssl_port", int(proxy_port))
                        options.set_preference("network.proxy.ftp", proxy_host)
                        options.set_preference("network.proxy.ftp_port", int(proxy_port))
                        options.set_preference("network.proxy.socks", proxy_host)
                        options.set_preference("network.proxy.socks_port", int(proxy_port))
                        options.set_preference("network.proxy.socks_version", 5)
                        options.set_preference("network.proxy.socks_remote_dns", True)
                        
                        # –î–ª—è –ø—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                        if 'auth' in proxy_info:
                            auth = proxy_info['auth']
                            print(f"[FIREFOX] üîê –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {auth['username']}:***")
                            # Firefox –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –Ω–∞–ø—Ä—è–º—É—é
                            # –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
                else:
                    print(f"[FIREFOX] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_info['error']}")
                    print("[FIREFOX] üö´ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            else:
                print("[FIREFOX] ‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            
            # Headless —Ä–µ–∂–∏–º —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            if headless:
                options.add_argument('--headless=new')  # –ù–æ–≤—ã–π headless —Ä–µ–∂–∏–º
                options.add_argument('--disable-gpu-sandbox')  # GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                options.add_argument('--enable-gpu')  # –í–∫–ª—é—á–∞–µ–º GPU
                options.add_argument('--no-sandbox')  # –û—Ç–∫–ª—é—á–∞–µ–º sandbox –¥–ª—è GPU
                options.add_argument('--disable-dev-shm-usage')  # –ü–∞–º—è—Ç—å –¥–ª—è GPU
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
            options.add_argument(f'--width={device["width"]}')
            options.add_argument(f'--height={device["height"]}')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox –¥—Ä–∞–π–≤–µ—Ä–∞
            print("[FIREFOX] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox...")
            
            self.driver = webdriver.Firefox(options=options)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
            self.driver.set_window_size(device["width"], device["height"])
            
            # –°–∫—Ä—ã—Ç–∏–µ WebDriver –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(15)
            
            print("[FIREFOX] ‚úÖ Firefox –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            print(f"[FIREFOX] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Firefox –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω)
            if proxy:
                print("[FIREFOX] üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å Firefox –¥—Ä–∞–π–≤–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                return self.create_firefox_driver(headless, None)
            
            return False
    
    def create_firefox_driver_no_fallback(self, headless: bool = True, proxy: Optional[str] = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞ –ë–ï–ó fallback —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = self.get_desktop_device()
        device_name = "desktop_windows"
        
        # Firefox –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π User-Agent
        device["userAgent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0"
        
        print(f"[FIREFOX-PROXY] üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {device_name}")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox
            options = FirefoxOptions()
            
            # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ User-Agent
            mobile_user_agent = device["userAgent"]
            options.set_preference("general.useragent.override", mobile_user_agent)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.set_preference("dom.webdriver.enabled", False)
            options.set_preference("useAutomationExtension", False)
            options.set_preference("dom.webnotifications.enabled", False)
            options.set_preference("media.volume_scale", "0.0")
            options.set_preference("dom.push.enabled", False)
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ö–°–ò
            if not proxy:
                print("[FIREFOX-PROXY] ‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                return False
            
            proxy_info = self.validate_proxy_format(proxy)
            
            if not proxy_info["valid"]:
                print(f"[FIREFOX-PROXY] ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_info['error']}")
                return False
            
            print(f"[FIREFOX-PROXY] üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏: {proxy_info['url']}")
            
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            proxy_url = proxy_info["url"]
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            if "://" in proxy_url:
                proxy_url = proxy_url.split("://")[1]
            
            # –ü–∞—Ä—Å–∏–º host:port (–∏–∑–≤–ª–µ–∫–∞–µ–º username:password –µ—Å–ª–∏ –µ—Å—Ç—å)
            if '@' in proxy_url:
                # –§–æ—Ä–º–∞—Ç: username:password@host:port
                auth_part, server_part = proxy_url.split('@', 1)
                username, password = auth_part.split(':', 1)
                proxy_host, proxy_port = server_part.split(':', 1)
                print(f"[FIREFOX-PROXY] üîê –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {username}:***@{proxy_host}:{proxy_port}")
            elif ':' in proxy_url:
                # –§–æ—Ä–º–∞—Ç: host:port
                proxy_host, proxy_port = proxy_url.split(':', 1)
                print(f"[FIREFOX-PROXY] ‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {proxy_host}:{proxy_port}")
            else:
                print(f"[FIREFOX-PROXY] ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy}")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤ Firefox
            options.set_preference("network.proxy.type", 1)  # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            options.set_preference("network.proxy.http", proxy_host)
            options.set_preference("network.proxy.http_port", int(proxy_port))
            options.set_preference("network.proxy.ssl", proxy_host)
            options.set_preference("network.proxy.ssl_port", int(proxy_port))
            options.set_preference("network.proxy.ftp", proxy_host)
            options.set_preference("network.proxy.ftp_port", int(proxy_port))
            options.set_preference("network.proxy.socks", proxy_host)
            options.set_preference("network.proxy.socks_port", int(proxy_port))
            options.set_preference("network.proxy.socks_version", 5)
            options.set_preference("network.proxy.socks_remote_dns", True)
            
            # Headless —Ä–µ–∂–∏–º —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            if headless:
                options.add_argument('--headless=new')  # –ù–æ–≤—ã–π headless —Ä–µ–∂–∏–º
                options.add_argument('--disable-gpu-sandbox')  # GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                options.add_argument('--enable-gpu')  # –í–∫–ª—é—á–∞–µ–º GPU
                options.add_argument('--no-sandbox')  # –û—Ç–∫–ª—é—á–∞–µ–º sandbox –¥–ª—è GPU
                options.add_argument('--disable-dev-shm-usage')  # –ü–∞–º—è—Ç—å –¥–ª—è GPU
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
            options.add_argument(f'--width={device["width"]}')
            options.add_argument(f'--height={device["height"]}')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox –¥—Ä–∞–π–≤–µ—Ä–∞
            print("[FIREFOX-PROXY] üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firefox...")
            
            self.driver = webdriver.Firefox(options=options)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏
            self.driver.set_window_size(device["width"], device["height"])
            
            # –°–∫—Ä—ã—Ç–∏–µ WebDriver –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(15)
            
            print("[FIREFOX-PROXY] ‚úÖ Firefox –¥—Ä–∞–π–≤–µ—Ä —Å –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            print(f"[FIREFOX-PROXY] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Firefox –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏: {e}")
            import traceback
            traceback.print_exc()
            
            # –ù–ï–¢ FALLBACK - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            print("[FIREFOX-PROXY] ‚ö†Ô∏è FALLBACK –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø")
            return False

    def create_mobile_driver(self, headless: bool = True, proxy: Optional[str] = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = self.get_desktop_device()
        device_name = "desktop_windows"
        
        print(f"[MOBILE-BYPASS] üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ desktop —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
        
        try:
            # –û–ø—Ü–∏–∏ Chrome –¥–ª—è desktop
            options = Options()
            
            # Desktop –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏)
            options.add_argument(f"--user-agent={device['userAgent']}")
            options.add_argument(f"--window-size={device['width']},{device['height']}")
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-renderer-backgrounding')
            
            # –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            options.add_experimental_option('useAutomationExtension', False)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
            options.add_argument('--disable-web-security')
            options.add_argument('--allow-running-insecure-content')
            options.add_argument('--disable-notifications')
            options.add_argument('--disable-popup-blocking')
            
            # Headless —Ä–µ–∂–∏–º —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            if headless:
                options.add_argument('--headless=new')  # –ù–æ–≤—ã–π headless —Ä–µ–∂–∏–º
                options.add_argument('--disable-gpu-sandbox')  # GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                options.add_argument('--enable-gpu')  # –í–∫–ª—é—á–∞–µ–º GPU
                options.add_argument('--no-sandbox')  # –û—Ç–∫–ª—é—á–∞–µ–º sandbox –¥–ª—è GPU
                options.add_argument('--disable-dev-shm-usage')  # –ü–∞–º—è—Ç—å –¥–ª—è GPU
                options.add_argument('--disable-gpu')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if proxy:
                print(f"[MOBILE-BYPASS] üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy}")
                
                # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if proxy.startswith('http://') or proxy.startswith('https://'):
                    # HTTP/HTTPS –ø—Ä–æ–∫—Å–∏
                    options.add_argument(f'--proxy-server={proxy}')
                elif proxy.startswith('socks5://'):
                    # SOCKS5 –ø—Ä–æ–∫—Å–∏
                    options.add_argument(f'--proxy-server={proxy}')
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º http://
                    options.add_argument(f'--proxy-server=http://{proxy}')
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                options.add_argument('--proxy-bypass-list=<-loopback>')
                options.add_argument('--disable-proxy-certificate-handler')
                options.add_argument('--disable-web-security')
                options.add_argument('--allow-running-insecure-content')
                options.add_argument('--ignore-certificate-errors')
                options.add_argument('--ignore-ssl-errors')
                options.add_argument('--ignore-certificate-errors-spki-list')
                options.add_argument('--disable-extensions')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
                if '@' in proxy:
                    # –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                    options.add_argument('--proxy-auth=*')
                    options.add_argument('--disable-background-timer-throttling')
                    options.add_argument('--disable-backgrounding-occluded-windows')
                    options.add_argument('--disable-renderer-backgrounding')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = webdriver.Chrome(options=options)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ DevTools Protocol
            if proxy:
                try:
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ DevTools Protocol
                    self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                        "userAgent": self.rotate_user_agent()
                    })
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
                    if '@' in proxy:
                        # –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                        proxy_parts = proxy.split('@')
                        if len(proxy_parts) == 2:
                            auth_part = proxy_parts[0].split('://')[-1]
                            if ':' in auth_part:
                                username, password = auth_part.split(':', 1)
                                proxy_url = proxy_parts[1]
                                
                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
                                self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                                    "userAgent": self.rotate_user_agent()
                                })
                                
                                print(f"[MOBILE-BYPASS] üîê –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {username}:***")
                    
                except Exception as e:
                    print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ DevTools: {e}")
            
            # –°–∫—Ä—ã—Ç–∏–µ WebDriver –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_script("Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})")
            self.driver.execute_script("Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            self.driver.set_page_load_timeout(30)
            self.driver.implicitly_wait(10)
            self.wait = WebDriverWait(self.driver, 15)
            
            print(f"[MOBILE-BYPASS] ‚úÖ –î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —Å —ç–º—É–ª—è—Ü–∏–µ–π {device_name}")
            return True
            
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def human_like_behavior(self, duration: int = 5) -> None:
        """–≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è."""
        print(f"[MOBILE-BYPASS] üß† –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è ({duration}—Å)...")
        
        start_time = time.time()
        
        try:
            body = self.driver.find_element(By.TAG_NAME, 'body')
        except:
            print("[MOBILE-BYPASS] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ body —ç–ª–µ–º–µ–Ω—Ç")
            return
        
        while time.time() - start_time < duration:
            try:
                # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
                scroll_height = self.driver.execute_script("return document.body.scrollHeight")
                if scroll_height > 0:
                    random_scroll = random.randint(100, min(500, scroll_height))
                    self.driver.execute_script(f"window.scrollTo(0, {random_scroll})")
                
                # –°–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∏–∫–∏
                if random.random() > 0.7:
                    try:
                        body.click()
                    except:
                        pass
                
                # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∞–ø—ã (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
                if random.random() > 0.8:
                    self.driver.execute_script("""
                        var tapEvent = new TouchEvent('touchstart', {
                            touches: [new Touch({identifier: 1, target: document.body, clientX: 100, clientY: 200})],
                            bubbles: true
                        });
                        document.body.dispatchEvent(tapEvent);
                    """)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(random.uniform(0.5, 2))
                
            except Exception as e:
                print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ human_like_behavior: {e}")
                break
    
    def accept_cookies_if_present(self) -> bool:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏ –µ—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ–∫–Ω–æ."""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∫—É–∫–∏
            cookie_selectors = [
                "button[data-testid='cookie-banner-accept']",
                "button:contains('Accept')",
                "button:contains('Allow')", 
                "button:contains('–ü—Ä–∏–Ω—è—Ç—å')",
                "//button[contains(text(), 'Accept')]",
                "//button[contains(text(), 'Allow')]",
                "//button[contains(text(), '–ü—Ä–∏–Ω—è—Ç—å')]"
            ]
            
            for selector in cookie_selectors:
                try:
                    if selector.startswith('//'):
                        button = self.driver.find_element(By.XPATH, selector)
                    else:
                        button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if button.is_displayed():
                        button.click()
                        print("[MOBILE-BYPASS] üç™ –ö—É–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã")
                        time.sleep(2)
                        return True
                except:
                    continue
                    
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∫—É–∫–∏: {e}")
        
        return False
    
    def close_instagram_modal(self) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Instagram (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ/–ª–æ–≥–∏–Ω)."""
        try:
            print("[MOBILE-BYPASS] üîç –ü–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Instagram...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            page_source = self.driver.page_source.lower()
            if '—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é' in page_source or 'view profile completely' in page_source:
                print("[MOBILE-BYPASS] üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Instagram")
            else:
                print("[MOBILE-BYPASS] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                return True
            
            # –¢–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Instagram
            modal_selectors = [
                # –¢–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è Instagram
                "div[role='button'][tabindex='0'] svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "div[role='button'] svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "svg[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "//svg[@aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "//div[@role='button']//svg[@aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                "//div[@role='button' and .//svg[@aria-label='–ó–∞–∫—Ä—ã—Ç—å']]",
                "//div[contains(@class, 'x1i10hfl') and .//svg[@aria-label='–ó–∞–∫—Ä—ã—Ç—å']]",
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "button[aria-label='Close']",
                "button[aria-label='–ó–∞–∫—Ä—ã—Ç—å']",
                "//button[contains(@aria-label, 'Close')]",
                "//button[contains(@aria-label, '–ó–∞–∫—Ä—ã—Ç—å')]",
                # –ö–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                "//button[contains(text(), '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')]",
                "//button[contains(text(), 'Open app')]",
                "//button[contains(text(), '–û—Ç–∫—Ä—ã—Ç—å Instagram')]",
                # –ö–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ª–æ–≥–∏–Ω–∞
                "//button[contains(text(), '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')]",
                "//button[contains(text(), 'Register')]",
                "//a[contains(text(), '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Instagram')]",
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
                "[role='dialog'] button",
                ".modal button",
                "[data-testid='modal'] button",
                # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "div[role='dialog'] button",
                "div[class*='modal'] button",
                "div[class*='Modal'] button"
            ]
            
            modal_closed = False
            
            for selector in modal_selectors:
                try:
                    if selector.startswith('//'):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        try:
                            if element.is_displayed() and element.is_enabled():
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                                text = element.text.lower()
                                aria_label = element.get_attribute('aria-label') or ''
                                tag_name = element.tag_name.lower()
                                
                                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                if tag_name == 'svg' and '–∑–∞–∫—Ä—ã—Ç—å' in aria_label.lower():
                                    # –î–ª—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                                    try:
                                        parent = element.find_element(By.XPATH, "..")
                                        if parent.is_displayed() and parent.is_enabled():
                                            parent.click()
                                            print(f"[MOBILE-BYPASS] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ SVG (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                                            time.sleep(3)
                                            modal_closed = True
                                            break
                                    except:
                                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è, –ø—Ä–æ–±—É–µ–º —Å–∞–º SVG
                                        element.click()
                                        print(f"[MOBILE-BYPASS] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ SVG –Ω–∞–ø—Ä—è–º—É—é (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                                        time.sleep(3)
                                        modal_closed = True
                                        break
                                elif any(keyword in text or keyword in aria_label.lower() for keyword in 
                                      ['close', '–∑–∞–∫—Ä—ã—Ç—å', '√ó', '‚úï', '–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'open app', '–æ—Ç–∫—Ä—ã—Ç—å instagram', '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'register']):
                                    element.click()
                                    print(f"[MOBILE-BYPASS] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                                    time.sleep(3)
                                    modal_closed = True
                                    break
                        except Exception as e:
                            continue
                    
                    if modal_closed:
                        break
                            
                except Exception as e:
                    continue
            
            # –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ú–ï–¢–û–î–´ –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
            if not modal_closed:
                print("[MOBILE-BYPASS] üî• –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê...")
                
                # –ú–µ—Ç–æ–¥ 1: JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
                try:
                    js_code = """
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                    var modals = document.querySelectorAll('[class*="x7r02ix"], [class*="x1vjfegm"], [class*="_abcm"], [class*="x1i10hfl"]');
                    for (var i = 0; i < modals.length; i++) {
                        modals[i].style.display = 'none !important';
                        modals[i].style.visibility = 'hidden !important';
                        modals[i].style.opacity = '0 !important';
                        modals[i].remove();
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ overlay —ç–ª–µ–º–µ–Ω—Ç—ã
                    var overlays = document.querySelectorAll('[class*="x7r02ix"]');
                    for (var i = 0; i < overlays.length; i++) {
                        overlays[i].style.display = 'none !important';
                        overlays[i].remove();
                    }
                    
                    // –£–¥–∞–ª—è–µ–º body –∫–ª–∞—Å—Å—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = 'auto !important';
                    document.body.style.position = 'static !important';
                    
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    var allElements = document.querySelectorAll('*');
                    for (var i = 0; i < allElements.length; i++) {
                        if (allElements[i].className && allElements[i].className.includes('x7r02ix')) {
                            allElements[i].style.display = 'none !important';
                            allElements[i].remove();
                        }
                    }
                    """
                    self.driver.execute_script(js_code)
                    print("[MOBILE-BYPASS] üßπ JavaScript –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω")
                    time.sleep(2)
                    modal_closed = True
                except Exception as js_error:
                    print(f"[MOBILE-BYPASS] ‚ö†Ô∏è JavaScript —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {js_error}")
                
                # –ú–µ—Ç–æ–¥ 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Escape
                if not modal_closed:
                    try:
                        from selenium.webdriver.common.keys import Keys
                        for _ in range(5):
                            self.driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
                            time.sleep(0.5)
                        print("[MOBILE-BYPASS] ‚å®Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Escape")
                        modal_closed = True
                    except Exception as escape_error:
                        print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Escape –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {escape_error}")
                
                # –ú–µ—Ç–æ–¥ 3: –ö–ª–∏–∫–∏ –≤ —Ä–∞–∑–Ω—ã–µ —É–≥–ª—ã —ç–∫—Ä–∞–Ω–∞
                if not modal_closed:
                    try:
                        from selenium.webdriver.common.action_chains import ActionChains
                        actions = ActionChains(self.driver)
                        
                        # –ö–ª–∏–∫–∏ –≤ —É–≥–ª—ã —ç–∫—Ä–∞–Ω–∞
                        corners = [(10, 10), (10, 100), (100, 10), (100, 100)]
                        for x, y in corners:
                            try:
                                actions.move_by_offset(x, y).click().perform()
                                time.sleep(0.5)
                            except:
                                continue
                        print("[MOBILE-BYPASS] üñ±Ô∏è –ö–ª–∏–∫–∏ –≤ —É–≥–ª—ã —ç–∫—Ä–∞–Ω–∞")
                        modal_closed = True
                    except Exception as corner_error:
                        print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –ö–ª–∏–∫–∏ –≤ —É–≥–ª—ã –Ω–µ —É–¥–∞–ª–∏—Å—å: {corner_error}")
                
                # –ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if not modal_closed:
                    try:
                        self.driver.refresh()
                        print("[MOBILE-BYPASS] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        time.sleep(3)
                        modal_closed = True
                    except Exception as refresh_error:
                        print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —É–¥–∞–ª–æ—Å—å: {refresh_error}")
                
                # –ú–µ—Ç–æ–¥ 5: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—Ä–∞—Ç–Ω–æ
                if not modal_closed:
                    try:
                        current_url = self.driver.current_url
                        self.driver.get("https://www.instagram.com/")
                        time.sleep(2)
                        self.driver.get(current_url)
                        print("[MOBILE-BYPASS] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏ –æ–±—Ä–∞—Ç–Ω–æ")
                        time.sleep(3)
                        modal_closed = True
                    except Exception as nav_error:
                        print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {nav_error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if modal_closed:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –µ—â–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                time.sleep(1)
                page_source_after = self.driver.page_source.lower()
                if '—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é' not in page_source_after and 'view profile completely' not in page_source_after:
                    print("[MOBILE-BYPASS] ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                    return True
                else:
                    print("[MOBILE-BYPASS] ‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
            else:
                print("[MOBILE-BYPASS] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
                return False
                    
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            return False
    
    def prepare_session(self) -> bool:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è."""
        print("[MOBILE-BYPASS] üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏...")
        
        try:
            # –ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Instagram
            self.driver.get('https://www.instagram.com/')
            time.sleep(random.uniform(3, 6))
            
            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏
            self.accept_cookies_if_present()
            
            # –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            self.human_like_behavior(random.randint(5, 8))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ª–æ–≥–∏–Ω
            current_url = self.driver.current_url
            if 'accounts/login' in current_url:
                print("[MOBILE-BYPASS] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏...")
                # –ü—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                self.driver.back()
                time.sleep(2)
            
            print("[MOBILE-BYPASS] ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def handle_login_redirect(self, username: str) -> Optional[bool]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ª–æ–≥–∏–Ω."""
        print("[MOBILE-BYPASS] üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ª–æ–≥–∏–Ω...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL
            alternative_urls = [
                f'https://www.instagram.com/{username}/?__a=1',
                f'https://www.instagram.com/{username}/channel/',
                f'https://www.instagram.com/explore/people/?search={username}'
            ]
            
            for url in alternative_urls:
                try:
                    print(f"[MOBILE-BYPASS] üîó –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: {url}")
                    self.driver.get(url)
                    time.sleep(3)
                    
                    current_url = self.driver.current_url
                    if 'accounts/login' not in current_url:
                        page_source = self.driver.page_source.lower()
                        if username.lower() in page_source:
                            print(f"[MOBILE-BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL")
                            return True
                        elif '404' in page_source:
                            print(f"[MOBILE-BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                            return False
                            
                except Exception as e:
                    print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º URL {url}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –≤–µ–¥—É—Ç –Ω–∞ –ª–æ–≥–∏–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            print("[MOBILE-BYPASS] ‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –ª–æ–≥–∏–Ω - –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
            
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {e}")
            return None
    
    def additional_checks(self, username: str) -> bool:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
        try:
            print("[MOBILE-BYPASS] üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
            meta_tags = self.driver.find_elements(By.TAG_NAME, 'meta')
            for meta in meta_tags:
                content = meta.get_attribute('content') or ''
                if username.lower() in content.lower():
                    print("[MOBILE-BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞-—Ç–µ–≥–∞—Ö")
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON-LD –¥–∞–Ω–Ω—ã—Ö
            scripts = self.driver.find_elements(By.TAG_NAME, 'script')
            for script in scripts:
                script_type = script.get_attribute('type') or ''
                if 'application/ld+json' in script_type:
                    script_content = script.get_attribute('innerHTML') or ''
                    if username.lower() in script_content.lower():
                        print("[MOBILE-BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω –≤ JSON-LD –¥–∞–Ω–Ω—ã—Ö")
                        return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = self.driver.title.lower()
            if username.lower() in title and 'instagram' in title:
                print("[MOBILE-BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return True
            
            print("[MOBILE-BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
            return False
            
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
            return False
    
    def check_profile_existence(self, username: str, screenshot_path: Optional[str] = None, proxy: Optional[str] = None) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
        print(f"[MOBILE-BYPASS] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: @{username}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Firefox –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
        if not self.create_firefox_driver(proxy=proxy):
            return {
                "exists": None,
                "screenshot_path": None,
                "error": "driver_creation_failed"
            }
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
            if not self.prepare_session():
                return None
            
            # –ü–æ—Å–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile_url = f'https://www.instagram.com/{username}/'
            print(f"[MOBILE-BYPASS] üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {profile_url}")
            
            self.driver.get(profile_url)
            time.sleep(random.uniform(4, 7))
            
            # –≠–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
            self.human_like_behavior(random.randint(3, 5))
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å
            self.close_instagram_modal()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            time.sleep(random.uniform(2, 4))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if screenshot_path:
                try:
                    self.driver.save_screenshot(screenshot_path)
                    print(f"[MOBILE-BYPASS] üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                except Exception as e:
                    print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            current_url = self.driver.current_url
            page_source = self.driver.page_source.lower()
            
            print(f"[MOBILE-BYPASS] üîó –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            if 'accounts/login' in current_url:
                print("[MOBILE-BYPASS] üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞")
                login_result = self.handle_login_redirect(username)
                return {
                    "exists": login_result,
                    "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                    "error": None if login_result is not None else "login_redirect_failed"
                }
            
            elif '404' in page_source or 'not found' in page_source:
                print("[MOBILE-BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                return {
                    "exists": False,
                    "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                    "error": None
                }
            
            elif username.lower() in page_source:
                print("[MOBILE-BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return {
                    "exists": True,
                    "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                    "error": None
                }
            
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                additional_result = self.additional_checks(username)
                return {
                    "exists": additional_result,
                    "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                    "error": None if additional_result is not None else "additional_checks_failed"
                }
                
        except TimeoutException:
            print("[MOBILE-BYPASS] ‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return {
                "exists": None,
                "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                "error": "timeout"
            }
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return {
                "exists": None,
                "screenshot_path": screenshot_path if screenshot_path and os.path.exists(screenshot_path) else None,
                "error": str(e)
            }
        finally:
            if self.driver:
                self.driver.quit()
    
    def rotate_user_agent(self) -> str:
        """–†–æ—Ç–∞—Ü–∏—è User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        user_agents = [
            # iOS devices
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1",
            # Android devices
            "Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 13; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36"
        ]
        return random.choice(user_agents)


async def check_account_with_mobile_bypass(
    username: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    max_retries: int = 2,
    proxy: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏.
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram
        screenshot_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        headless: –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        proxy: –ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    print(f"[MOBILE-BYPASS] üöÄ –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username}")
    print(f"[MOBILE-BYPASS] üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {max_retries}")
    
    bypass = InstagramMobileBypass()
    
    for attempt in range(max_retries):
        print(f"[MOBILE-BYPASS] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
        
        try:
            result = bypass.check_profile_existence(username, screenshot_path, proxy)
            
            if result.get("exists") is True:
                print(f"[MOBILE-BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{username} –ù–ê–ô–î–ï–ù —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —ç–º—É–ª—è—Ü–∏—é")
                return {
                    "username": username,
                    "exists": True,
                    "is_private": None,
                    "full_name": None,
                    "followers": None,
                    "following": None,
                    "posts": None,
                    "error": result.get("error"),
                    "checked_via": "mobile_bypass_emulation",
                    "screenshot_path": result.get("screenshot_path"),
                    "mobile_device_used": "random"
                }
            elif result.get("exists") is False:
                print(f"[MOBILE-BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –ù–ï –ù–ê–ô–î–ï–ù")
                return {
                    "username": username,
                    "exists": False,
                    "is_private": None,
                    "full_name": None,
                    "followers": None,
                    "following": None,
                    "posts": None,
                    "error": result.get("error"),
                    "checked_via": "mobile_bypass_emulation",
                    "screenshot_path": result.get("screenshot_path")
                }
            else:
                print(f"[MOBILE-BYPASS] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è @{username}")
                if attempt < max_retries - 1:
                    delay = random.uniform(5, 10)
                    print(f"[MOBILE-BYPASS] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(delay)
                    continue
                
        except Exception as e:
            print(f"[MOBILE-BYPASS] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                delay = random.uniform(5, 10)
                print(f"[MOBILE-BYPASS] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(delay)
                continue
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return {
        "username": username,
        "exists": None,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "error": "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å",
        "checked_via": "mobile_bypass_emulation",
        "screenshot_path": None
    }
