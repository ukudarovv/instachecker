"""–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Instagram —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""

import time
import random
import requests
import json
import os
from typing import Optional, List, Dict, Any
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import undetected_chromedriver as uc
from bs4 import BeautifulSoup
try:
    from selenium_stealth import stealth
    STEALTH_AVAILABLE = True
except ImportError:
    STEALTH_AVAILABLE = False
    print("[BYPASS] ‚ö†Ô∏è selenium-stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

class InstagramBypass:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Instagram"""
    
    def __init__(self):
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0'
        ]
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–±–∏–ª—å–Ω—ã–µ User-Agents
        self.mobile_user_agents = [
            'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 15_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36',
            'Mozilla/5.0 (Linux; Android 12; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Mobile Safari/537.36',
            'Instagram 269.0.0.18.75 (iPhone13,4; iOS 16_5; en_US; en-US; scale=3.00; 1284x2778; 463736449) AppleWebKit/420+',
        ]
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.mobile_headers_list = [
            {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Mobile/15E148 Safari/604.1',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-us,en;q=0.5',
                'Accept-Encoding': 'gzip,deflate',
                'Connection': 'keep-alive',
            },
            {
                'User-Agent': 'Instagram 269.0.0.18.75 (iPhone13,4; iOS 16_5; en_US; en-US; scale=3.00; 1284x2778; 463736449) AppleWebKit/420+',
                'X-IG-App-ID': '124024574287414',
                'X-IG-Capabilities': '3brTvx8=',
                'X-IG-Connection-Type': 'WIFI',
            },
            {
                'User-Agent': 'Mozilla/5.0 (Linux; Android 13; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Mobile Safari/537.36',
                'X-Requested-With': 'com.instagram.android',
            }
        ]
        
        self.mobile_headers = {
            'User-Agent': 'Instagram 269.0.0.18.75 (iPhone13,4; iOS 16_5; en_US; en-US; scale=3.00; 1284x2778; 463736449) AppleWebKit/420+',
            'X-IG-App-ID': '124024574287414',
            'X-IG-Capabilities': '3brTvx8=',
            'X-IG-Connection-Type': 'WIFI',
            'Accept-Language': 'en-US',
            'Content-Type': 'application/x-www-form-urlencoded',
        }
    
    def create_fully_undetected_driver(self) -> uc.Chrome:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        print("[BYPASS] üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        options = uc.ChromeOptions()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä—ã—Ç–∏—è
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--disable-features=VizDisplayCompositor')
        options.add_argument('--disable-background-timer-throttling')
        options.add_argument('--disable-backgrounding-occluded-windows')
        options.add_argument('--disable-renderer-backgrounding')
        options.add_argument('--disable-ipc-flooding-protection')
        options.add_argument('--no-default-browser-check')
        options.add_argument('--disable-component-extensions-with-background-pages')
        options.add_argument('--disable-default-apps')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-plugins')
        options.add_argument('--disable-translate')
        
        # User-Agent –∏ —è–∑—ã–∫–∏
        user_agent = random.choice(self.user_agents)
        options.add_argument(f'--user-agent={user_agent}')
        options.add_argument('--accept-lang=en-US,en;q=0.9')
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument('--disable-gpu')
        options.add_argument('--disable-software-rasterizer')
        options.add_argument('--disable-webgl')
        options.add_argument('--disable-canvas-aa')
        options.add_argument('--disable-2d-canvas-clip-aa')
        
        options.add_experimental_option("excludeSwitches", ["enable-automation", "enable-logging"])
        options.add_experimental_option('useAutomationExtension', False)
        
        driver = uc.Chrome(options=options)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ WebDriver –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        driver.execute_cdp_cmd('Network.setUserAgentOverride', {
            "userAgent": user_agent,
            "platform": "Win32",
            "userAgentMetadata": {
                "brands": [
                    {"brand": "Not A;Brand", "version": "99"},
                    {"brand": "Chromium", "version": "120"},
                    {"brand": "Google Chrome", "version": "120"}
                ],
                "fullVersion": "120.0.0.0",
                "platform": "Windows",
                "platformVersion": "10.0.0",
                "architecture": "x86",
                "model": ""
            }
        })
        
        # –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        stealth_scripts = [
            "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})",
            "Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})",
            "Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})",
            "Object.defineProperty(navigator, 'hardwareConcurrency', {get: () => 8})",
            "Object.defineProperty(navigator, 'deviceMemory', {get: () => 8})",
            "Object.defineProperty(screen, 'width', {get: () => 1920})",
            "Object.defineProperty(screen, 'height', {get: () => 1080})",
            "window.chrome = {runtime: {}}",
            "const originalQuery = window.navigator.permissions.query; window.navigator.permissions.query = (parameters) => (parameters.name === 'notifications' ? Promise.resolve({state: Notification.permission}) : originalQuery(parameters))"
        ]
        
        for script in stealth_scripts:
            try:
                driver.execute_script(script)
            except:
                pass
        
        print("[BYPASS] ‚úÖ –°–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä —Å–æ–∑–¥–∞–Ω")
        return driver
    
    def check_profile_multiple_endpoints(self, username: str) -> Optional[bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API endpoints"""
        print(f"[BYPASS] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ API endpoints...")
        
        endpoints = [
            # Public JSON endpoints
            f'https://www.instagram.com/api/v1/users/web_profile_info/?username={username}',
            f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}',
            f'https://www.instagram.com/{username}/?__a=1&__d=dis',
            f'https://www.instagram.com/{username}/channel/?__a=1',
            
            # GraphQL endpoints
            f'https://www.instagram.com/graphql/query/?query_hash=profile_info&username={username}',
            f'https://www.instagram.com/graphql/query/?query_hash=user_info&username={username}',
            
            # Mobile API endpoints
            f'https://i.instagram.com/api/v1/users/{username}/usernameinfo/',
            f'https://i.instagram.com/api/v1/users/{username}/info/',
        ]
        
        headers = {
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'X-Requested-With': 'XMLHttpRequest',
            'X-IG-App-ID': '936619743392459',
            'X-ASBD-ID': '198387',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'Referer': f'https://www.instagram.com/{username}/',
        }
        
        for i, endpoint in enumerate(endpoints):
            try:
                print(f"[BYPASS] üîó Endpoint {i+1}/{len(endpoints)}: {endpoint[:50]}...")
                response = requests.get(endpoint, headers=headers, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if any(key in str(data) for key in ['user', 'data', 'graphql', 'id', 'username']):
                        print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ endpoint {i+1}")
                        return True
                elif response.status_code == 404:
                    print(f"[BYPASS] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ endpoint {i+1}")
                    return False
                    
            except Exception as e:
                print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ endpoint {i+1}: {e}")
                continue
        
        print(f"[BYPASS] ‚ö†Ô∏è –í—Å–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    def check_mobile_endpoints(self, username: str) -> Optional[bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–µ API endpoints"""
        print(f"[BYPASS] üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–µ endpoints...")
        
        mobile_endpoints = [
            f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}',
            f'https://i.instagram.com/api/v1/users/{username}/usernameinfo/',
            f'https://i.instagram.com/api/v1/users/search/?q={username}',
        ]
        
        for i, endpoint in enumerate(mobile_endpoints):
            try:
                print(f"[BYPASS] üì± Mobile endpoint {i+1}/{len(mobile_endpoints)}")
                response = requests.get(endpoint, headers=self.mobile_headers, timeout=10)
                
                if response.status_code == 200:
                    print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π endpoint {i+1}")
                    return True
                elif response.status_code == 404:
                    print(f"[BYPASS] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π endpoint {i+1}")
                    return False
                    
            except Exception as e:
                print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ endpoint {i+1}: {e}")
                continue
        
        print(f"[BYPASS] ‚ö†Ô∏è –í—Å–µ –º–æ–±–∏–ª—å–Ω—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    def quick_instagram_check(self, username: str) -> Optional[bool]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ–±—Ö–æ–¥–æ–º 403 (–º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ + –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤)"""
        print(f"[BYPASS] ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ @{username} (–º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π User-Agent –∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            headers = random.choice(self.mobile_headers_list)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
            endpoints = [
                f'https://www.instagram.com/{username}/?__a=1&__d=dis',
                f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}',
                f'https://www.instagram.com/{username}/',
            ]
            
            for i, endpoint in enumerate(endpoints):
                try:
                    print(f"[BYPASS] ‚ö° Endpoint {i+1}/{len(endpoints)}: {endpoint[:50]}...")
                    response = requests.get(endpoint, headers=headers, timeout=10, allow_redirects=False)
                    
                    print(f"[BYPASS] Status Code: {response.status_code}")
                    
                    if response.status_code == 200:
                        print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥")
                        return True
                    elif response.status_code == 404:
                        print(f"[BYPASS] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω (404)")
                        return False
                    elif response.status_code == 302:
                        location = response.headers.get('Location', '')
                        print(f"[BYPASS] Redirect to: {location}")
                        if 'login' not in location:
                            print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –Ω–∞ –ª–æ–≥–∏–Ω)")
                            return True
                        
                except Exception as e:
                    print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ endpoint {i+1}: {e}")
                    continue
                    
        except Exception as e:
            print(f"[BYPASS] ‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        return None
    
    def check_public_sources(self, username: str) -> Optional[bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Google Cache, Archive.org)"""
        print(f"[BYPASS] üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
        
        # Google –∫—ç—à
        try:
            print(f"[BYPASS] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cache...")
            google_cache_url = f'https://webcache.googleusercontent.com/search?q=cache:https://www.instagram.com/{username}/'
            headers = {'User-Agent': random.choice(self.user_agents)}
            response = requests.get(google_cache_url, headers=headers, timeout=10)
            
            if response.status_code == 200 and username in response.text:
                print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Google Cache")
                return True
        except Exception as e:
            print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Google Cache: {e}")
        
        # Archive.org
        try:
            print(f"[BYPASS] üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ Archive.org...")
            archive_url = f'https://web.archive.org/web/20230000000000*/https://www.instagram.com/{username}/'
            headers = {'User-Agent': random.choice(self.user_agents)}
            response = requests.get(archive_url, headers=headers, timeout=10)
            
            if response.status_code == 200 and 'available' in response.text.lower():
                print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω –≤ Archive.org")
                return True
        except Exception as e:
            print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Archive.org: {e}")
        
        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google
        try:
            print(f"[BYPASS] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Search...")
            google_search_url = f'https://www.google.com/search?q=site:instagram.com+{username}'
            headers = {'User-Agent': random.choice(self.user_agents)}
            response = requests.get(google_search_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Instagram –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
                instagram_links = soup.find_all('a', href=True)
                for link in instagram_links:
                    if f'instagram.com/{username}' in link.get('href', ''):
                        print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Google Search")
                        return True
        except Exception as e:
            print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Google Search: {e}")
        
        print(f"[BYPASS] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö")
        return None
    
    def create_mobile_emulated_driver(self) -> uc.Chrome:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print("[BYPASS] üì± –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        mobile_emulation = {
            "deviceMetrics": {"width": 375, "height": 812, "pixelRatio": 3.0},
            "userAgent": random.choice(self.mobile_user_agents)
        }
        
        options = uc.ChromeOptions()
        options.add_experimental_option("mobileEmulation", mobile_emulation)
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        
        driver = uc.Chrome(options=options, version_main=None)
        
        # –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("[BYPASS] ‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")
        return driver
    
    def check_with_mobile_emulation(self, username: str) -> Optional[bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —ç–º—É–ª—è—Ü–∏–µ–π –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        print(f"[BYPASS] üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username} —Å –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π...")
        
        driver = self.create_mobile_emulated_driver()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            driver.get('https://www.instagram.com/')
            time.sleep(random.uniform(3, 6))
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            driver.execute_script("window.scrollTo(0, 300)")
            time.sleep(1)
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            driver.get(f'https://www.instagram.com/{username}/')
            time.sleep(random.uniform(4, 7))
            
            current_url = driver.current_url
            page_source = driver.page_source
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            if 'accounts/login' in current_url:
                print("[BYPASS] üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω - –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            elif username in current_url:
                if "Sorry, this page isn't available" in page_source or 'Not Found' in page_source:
                    print(f"[BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                else:
                    print(f"[BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω")
                    return True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if username.lower() in page_source.lower():
                    print(f"[BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ")
                    return True
                else:
                    print(f"[BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
        except Exception as e:
            print(f"[BYPASS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return None
        finally:
            driver.quit()
    
    def setup_instagram_session(self, driver):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
        print("[BYPASS] üåê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Instagram —Å–µ—Å—Å–∏–∏...")
        
        # –®–∞–≥ 1: –ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.get('https://www.instagram.com/')
        time.sleep(random.uniform(3, 7))
        
        # –®–∞–≥ 2: –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.human_like_behavior(driver)
        
        # –®–∞–≥ 3: –ü—Ä–∏–Ω—è—Ç–∏–µ –∫—É–∫–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        try:
            cookie_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'Allow')]") + \
                           driver.find_elements(By.XPATH, "//button[contains(text(), 'Accept')]") + \
                           driver.find_elements(By.XPATH, "//button[contains(text(), '–†–∞–∑—Ä–µ—à–∏—Ç—å')]")
            if cookie_buttons:
                cookie_buttons[0].click()
                print("[BYPASS] üç™ –ü—Ä–∏–Ω—è—Ç—ã cookies")
                time.sleep(2)
        except:
            pass
        
        # –®–∞–≥ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight)")
        time.sleep(2)
        driver.execute_script("window.scrollTo(0, 0)")
        time.sleep(1)
        
        print("[BYPASS] ‚úÖ –°–µ—Å—Å–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
    
    def human_like_behavior(self, driver):
        """–≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        print("[BYPASS] üßë –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è...")
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        for _ in range(random.randint(2, 5)):
            x = random.randint(100, 500)
            y = random.randint(100, 500)
            driver.execute_script(f"window.scrollTo({x}, {y})")
            time.sleep(random.uniform(0.5, 1.5))
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫–ª–∏–∫–∏
        try:
            body = driver.find_element(By.TAG_NAME, 'body')
            for _ in range(random.randint(1, 3)):
                body.click()
                time.sleep(random.uniform(0.3, 0.8))
        except:
            pass
        
        # –í–≤–æ–¥ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∞–≤–∏—à
        try:
            body = driver.find_element(By.TAG_NAME, 'body')
            body.send_keys(Keys.SPACE)
            time.sleep(0.5)
            body.send_keys(Keys.ESCAPE)
        except:
            pass
    
    def check_profile_stealth(self, driver, username: str) -> Optional[bool]:
        """–°–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        print(f"[BYPASS] üïµÔ∏è –°–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ @{username}...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
        self.setup_instagram_session(driver)
        time.sleep(random.uniform(5, 10))
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö URL
        indirect_urls = [
            f'https://www.instagram.com/explore/people/?search={username}',
            f'https://www.instagram.com/web/search/topsearch/?query={username}',
            f'https://www.instagram.com/{username}/followers/',
            f'https://www.instagram.com/{username}/following/',
            f'https://www.instagram.com/{username}/',
        ]
        
        for i, url in enumerate(indirect_urls):
            try:
                print(f"[BYPASS] üîó –ö–æ—Å–≤–µ–Ω–Ω—ã–π URL {i+1}/{len(indirect_urls)}: {url[:50]}...")
                driver.get(url)
                time.sleep(random.uniform(4, 8))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç
                if 'accounts/login' not in driver.current_url:
                    page_source = driver.page_source
                    
                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    checks = [
                        username.lower() in page_source.lower(),
                        f'"{username}"' in page_source,
                        f"@{username}" in page_source,
                        any(indicator in page_source for indicator in ['profile_pic_url', 'biography', 'followed_by', 'user'])
                    ]
                    
                    if any(checks):
                        print(f"[BYPASS] ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∫–æ—Å–≤–µ–Ω–Ω—ã–π URL {i+1}")
                        return True
                    elif any(indicator in page_source for indicator in ['error', '404', 'not found', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞']):
                        print(f"[BYPASS] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∫–æ—Å–≤–µ–Ω–Ω—ã–π URL {i+1}")
                        return False
                else:
                    print(f"[BYPASS] ‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ URL {i+1}")
                    
            except Exception as e:
                print(f"[BYPASS] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ URL {i+1}: {e}")
                continue
        
        print(f"[BYPASS] ‚ö†Ô∏è –í—Å–µ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return None
    
    def ultimate_profile_check(self, username: str, max_retries: int = 3, screenshot_path: Optional[str] = None) -> Optional[bool]:
        """–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–¥—Ö–æ–¥–æ–≤ (403 Bypass)"""
        print(f"[BYPASS] üöÄ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ @{username} (–º–∞–∫—Å. {max_retries} –ø–æ–ø—ã—Ç–æ–∫)")
        print(f"[BYPASS] üéØ –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ 403 –æ—à–∏–±–æ–∫")
        
        for attempt in range(max_retries):
            print(f"\n[BYPASS] üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
            
            # –ú–µ—Ç–æ–¥ 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–ù–û–í–´–ô)
            print("[BYPASS] ‚ö° –ú–µ—Ç–æ–¥ 1: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–±–∏–ª—å–Ω—ã–µ headers + no redirects)")
            result = self.quick_instagram_check(username)
            if result is not None:
                print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: {result}")
                return result
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
            print("[BYPASS] üì° –ú–µ—Ç–æ–¥ 2: API endpoints")
            result = self.check_profile_multiple_endpoints(username)
            if result is not None:
                print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ API: {result}")
                return result
            
            # –ú–µ—Ç–æ–¥ 3: –ú–æ–±–∏–ª—å–Ω—ã–µ endpoints
            print("[BYPASS] üì± –ú–µ—Ç–æ–¥ 3: –ú–æ–±–∏–ª—å–Ω—ã–µ endpoints")
            result = self.check_mobile_endpoints(username)
            if result is not None:
                print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–µ API: {result}")
                return result
            
            # –ú–µ—Ç–æ–¥ 4: –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ù–û–í–´–ô)
            print("[BYPASS] üåê –ú–µ—Ç–æ–¥ 4: –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Google Cache, Archive.org)")
            result = self.check_public_sources(username)
            if result is not None:
                print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {result}")
                return result
            
            # –ú–µ—Ç–æ–¥ 5: –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (–ù–û–í–´–ô) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
            if attempt == max_retries - 1:
                print("[BYPASS] üì± –ú–µ—Ç–æ–¥ 5: –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (Chrome Mobile)")
                result = self.check_with_mobile_emulation(username)
                if result is not None:
                    print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —ç–º—É–ª—è—Ü–∏—é: {result}")
                    return result
            
            # –ú–µ—Ç–æ–¥ 6: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
            if attempt == max_retries - 1:
                print("[BYPASS] üì± –ú–µ—Ç–æ–¥ 6: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è")
                try:
                    from .instagram_mobile_bypass import check_account_with_mobile_bypass
                    
                    # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                    import asyncio
                    result = asyncio.run(check_account_with_mobile_bypass(
                        username=username,
                        screenshot_path=screenshot_path,
                        headless=True,
                        max_retries=1
                    ))
                    
                    if result.get("exists") is not None:
                        print(f"[BYPASS] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —ç–º—É–ª—è—Ü–∏—é: {result.get('exists')}")
                        return result.get("exists")
                    else:
                        print(f"[BYPASS] ‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                        return None
                        
                except Exception as e:
                    print(f"[BYPASS] ‚ùå –û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏: {e}")
                    return None
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < max_retries - 1:
                delay = random.uniform(5, 15)
                print(f"[BYPASS] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(delay)
        
        print(f"[BYPASS] ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è @{username}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
async def check_account_with_bypass(
    username: str,
    screenshot_path: Optional[str] = None,
    headless: bool = True,
    max_retries: int = 2
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã Instagram (403 Bypass)
    
    –í–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
    1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (no redirects)
    2. API endpoints (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)
    3. –ú–æ–±–∏–ª—å–Ω—ã–µ API endpoints (Instagram App)
    4. –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Google Cache, Archive.org)
    5. –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è (Chrome Mobile Emulation)
    6. –ü–æ–ª–Ω–∞—è —Å–∫—Ä—ã—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
    
    Args:
        username: Instagram username
        screenshot_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (optional)
        headless: –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (default: True)
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (default: 2)
        
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:
            - username: str
            - exists: bool | None
            - is_private: None
            - full_name: None
            - followers: None
            - following: None
            - posts: None
            - error: str | None
            - checked_via: str
            - screenshot_path: None
            - bypass_methods_used: list
    """
    print(f"[BYPASS] üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ @{username} —Å –æ–±—Ö–æ–¥–æ–º 403 –æ—à–∏–±–æ–∫")
    print(f"[BYPASS] üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {max_retries}")
    
    bypass = InstagramBypass()
    
    # –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ö–æ–¥–∞
    result = bypass.ultimate_profile_check(username, max_retries=max_retries, screenshot_path=screenshot_path)
    
    methods_used = [
        "quick_mobile_check",      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        "api_endpoints",           # API endpoints
        "mobile_endpoints",        # –ú–æ–±–∏–ª—å–Ω—ã–µ endpoints
        "public_sources",          # –ü—É–±–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        "mobile_emulation",        # –ú–æ–±–∏–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è
        "stealth_browser"          # –°–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä
    ]
    
    # –ï—Å–ª–∏ bypass –º–µ—Ç–æ–¥—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    final_screenshot_path = screenshot_path
    if result is True and screenshot_path:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç
        if not os.path.exists(screenshot_path):
            print(f"[BYPASS] üì∏ Screenshot not created by bypass methods - creating now...")
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ undetected chrome –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                from .undetected_checker import check_account_undetected_chrome
                
                screenshot_result = await check_account_undetected_chrome(
                    username=username,
                    proxy=None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ 403
                    screenshot_path=screenshot_path,
                    headless=headless
                )
                
                if screenshot_result.get("screenshot_path"):
                    final_screenshot_path = screenshot_result["screenshot_path"]
                    print(f"[BYPASS] üì∏ Screenshot created via undetected chrome: {screenshot_result['screenshot_path']}")
                else:
                    print(f"[BYPASS] ‚ö†Ô∏è Failed to create screenshot via undetected chrome")
                    final_screenshot_path = None
                    
            except Exception as screenshot_error:
                print(f"[BYPASS] ‚ö†Ô∏è Failed to create screenshot: {screenshot_error}")
                final_screenshot_path = None
    
    response = {
        "username": username,
        "exists": result,
        "is_private": None,
        "full_name": None,
        "followers": None,
        "following": None,
        "posts": None,
        "error": None if result is not None else "–í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ 403 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏",
        "checked_via": "bypass_403_all_methods",
        "screenshot_path": final_screenshot_path if final_screenshot_path and os.path.exists(final_screenshot_path) else None,
        "bypass_methods_used": methods_used
    }
    
    if result is True:
        print(f"[BYPASS] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{username} –ù–ê–ô–î–ï–ù —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ–±—Ö–æ–¥–∞ 403")
    elif result is False:
        print(f"[BYPASS] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å @{username} –ù–ï –ù–ê–ô–î–ï–ù")
    else:
        print(f"[BYPASS] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å @{username}")
    
    return response


# –ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async def quick_test_bypass(username: str) -> None:
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ username
    
    Args:
        username: Instagram username –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print(f"\n{'='*60}")
    print(f"[TEST] üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ 403 –¥–ª—è @{username}")
    print(f"{'='*60}\n")
    
    result = await check_account_with_bypass(username, max_retries=1)
    
    print(f"\n{'='*60}")
    print(f"[TEST] üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
    print(f"{'='*60}")
    print(f"Username: {result['username']}")
    print(f"Exists: {result['exists']}")
    print(f"Error: {result['error']}")
    print(f"Checked via: {result['checked_via']}")
    print(f"Methods used: {', '.join(result['bypass_methods_used'])}")
    print(f"{'='*60}\n")
