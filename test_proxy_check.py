#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import aiohttp
from sqlalchemy.orm import Session
from project.database import get_engine, get_session_factory, init_db
from project.models import Proxy


async def test_proxy():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
    
    print("=" * 80)
    print("üîç –¢–ï–°–¢ –ü–†–û–ö–°–ò")
    print("=" * 80)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db_url = "sqlite:///bot.db"
    engine = get_engine(db_url)
    init_db(engine)
    session_factory = get_session_factory(engine)
    
    with session_factory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        proxy = session.query(Proxy).filter(
            Proxy.is_active == True
        ).first()
        
        if not proxy:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –≤ –ë–î!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º proxy_url (host —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ip:port)
        if proxy.username and proxy.password:
            proxy_url = f"{proxy.scheme}://{proxy.username}:{proxy.password}@{proxy.host}"
        else:
            proxy_url = f"{proxy.scheme}://{proxy.host}"
        
        print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–∫—Å–∏:")
        print(f"   Scheme: {proxy.scheme}")
        print(f"   Host: {proxy.host}")
        print(f"   Username: {proxy.username if proxy.username else 'None'}")
        print()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ httpbin.org
        print("üîÑ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ httpbin.org...")
        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                    "http://httpbin.org/ip",
                    proxy=proxy_url
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        ip = data.get("origin", "Unknown")
                        print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: {ip}")
                    else:
                        print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram
        print("üîÑ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Instagram...")
        try:
            timeout = aiohttp.ClientTimeout(total=30)
            headers = {
                "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 203.0.0.29.118"
            }
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(
                    "https://www.instagram.com/",
                    proxy=proxy_url,
                    headers=headers,
                    allow_redirects=True
                ) as response:
                    print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                    print(f"   URL: {response.url}")
                    
                    if response.status == 200:
                        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ Instagram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    elif response.status == 302 or response.status == 301:
                        print(f"‚ö†Ô∏è –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {response.headers.get('Location', 'Unknown')}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        print("=" * 80)


if __name__ == "__main__":
    asyncio.run(test_proxy())

